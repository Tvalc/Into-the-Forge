<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    html,body { margin:0; padding:0; background:#18121a; }
    body { font-family: 'Segoe UI', Arial, sans-serif; overflow:hidden; }
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center; }
    canvas { display:block; background:#18121a; box-shadow:0 0 32px #222; }
    ::selection { background:#ffb34733; }
  </style>
</head>
<body>
<div id="gameContainer">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
</div>
<script>
// ========= DATA ===========
const CHARACTERS = [
  { name: "Korok",     faction: "Tempys",  unlockedAt: 0,      color: "#ff7200", desc:"Tank with area control", hp:140, atk:17, spd:4 },
  { name: "Oros",      faction: "Uterra",  unlockedAt: 10000,  color: "#18d860", desc:"Agile ranged specialist", hp:90,  atk:12, spd:7 },
  { name: "Cercee",    faction: "Nekrium", unlockedAt: 25000,  color: "#bc3cff", desc:"Support & crowd control", hp:115, atk:13, spd:6 },
  { name: "Ironbeard", faction: "Alloyin", unlockedAt: 50000,  color: "#88c6ff", desc:"Heavy damage dealer",   hp:160, atk:18, spd:3 },
  { name: "Ignir",     faction: "Tempys",  unlockedAt:100000,  color: "#ff1a1a", desc:"Combo speedmaster",     hp:80,  atk:10, spd:9 },
  { name: "Voss",      faction: "Nekrium", unlockedAt:200000,  color: "#9300c2", desc:"High-risk darkforged!", hp:120, atk:25, spd:6 }
];
const LEVELS = [
  { name:"The Frozen Wastes", unlockedAt:0,
    scenes:[
      { name:"Frozen Wastes 1", color:"#2e3a5a" },
      { name:"Frozen Wastes 2", color:"#273548" },
      { name:"Frozen Wastes 3", color:"#222831" }
    ]
  },
  { name:"The Rootrealms", unlockedAt:25000,
    scenes:[
      { name:"Rootrealms 1", color:"#234228" },
      { name:"Rootrealms 2", color:"#386044" }
    ]
  },
  { name:"Brightsteel City", unlockedAt:50000,
    scenes:[
      { name:"Brightsteel 1", color:"#6bb3e8" }
    ]
  }
];
// Mock enemy types for demo
const ENEMY_TYPES = [
  { name:"Frostling", color:"#5ec6ff", hp:30, atk:8, spd:2.5, reward:100 },
  { name:"Wraith", color:"#bc3cff", hp:60, atk:16, spd:2.8, reward:300 }
];
const comboTiers = [
  { hits:5, mult:1.5 },{ hits:10,mult:2 },{hits:15,mult:2.5},{hits:20,mult:3},{hits:30,mult:4}
];

// ====== STATE ======
let state = "title"; // title|highscore|charselect|levelselect|playing|pause|win|lose
let selectedCharIdx = 0;
let selectedLevelIdx = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let score = 0;
let combo = 0;
let comboTimer = null;
let comboMult = 1;
let player = null;
let enemies = [];
let sceneY = 0;
let currentLevel = null;
let currentSceneIdx = 0;
let keys = {};
let bestCombo = 0;
let unlockJustNow = null;

// ====== CANVAS SETUP ======
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// ====== INPUT HANDLING ======
window.addEventListener('keydown', e => {
  keys[e.key] = true;
});
window.addEventListener('keyup', e => {
  keys[e.key] = false;
});
canvas.addEventListener('mousedown', handleMouse);
canvas.addEventListener('touchstart', function(e){
    let t=e.touches[0]; handleMouse({offsetX:t.clientX-canvas.getBoundingClientRect().left,
                                     offsetY:t.clientY-canvas.getBoundingClientRect().top});
});

// For "press any key/button"
function popAnyKey() {
  for(let k in keys) if(keys[k]){keys={};return true;}
  return false;
}

// Mouse navigation for UI (simplified)
function handleMouse(evt){
    let mx=evt.offsetX,my=evt.offsetY;
    // Char select
    if(state==="charselect"){
        let chars=CHARACTERS;
        let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;
        for(let i=0;i<chars.length;++i){
            let x=x0+i*spacing,y=180,r=48;
            if(Math.hypot(mx-x,my-y)<r+12)
                selectedCharIdx=i;
            // If on SELECT button
            if(i==selectedCharIdx && highScore>=chars[i].unlockedAt &&
               mx>x-48&&mx<x+48&&my>y+r+56&&my<y+r+56+36){
                state="levelselect";
                return;
            }
        }
    }
    // Level select
    if(state==="levelselect"){
        let levels=LEVELS;
        let spacing=70,y0=140;
        for(let i=0;i<levels.length;++i){
            let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
            if(mx>x && mx<x+w && my>y && my<y+h)
                selectedLevelIdx=i;
            if(i==selectedLevelIdx && highScore>=levels[i].unlockedAt &&
               mx>x+w+14 && mx<x+w+14+92 && my>y+6 && my<y+6+38){
                startGame();
                return;
            }
        }
    }
}

// ====== UNLOCK HELPERS ======
function getUnlockedChars() {
  return CHARACTERS.filter(c => highScore >= c.unlockedAt);
}
function getUnlockedLevels() {
  return LEVELS.filter(l => highScore >= l.unlockedAt);
}
function getNextUnlock() {
  let ch = CHARACTERS.find(c=>highScore<c.unlockedAt);
  let lv = LEVELS.find(l=>highScore<l.unlockedAt);
  if (!ch && !lv) return null;
  if (!ch) return {type:'level',name:lv.name,val:lv.unlockedAt};
  if (!lv) return {type:'char',name:ch.name,val:ch.unlockedAt};
  return (ch.unlockedAt<lv.unlockedAt)
         ? {type:'char',name:ch.name,val:ch.unlockedAt}
         : {type:'level',name:lv.name,val:lv.unlockedAt};
}

// ====== UI SCREENS ======
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";
  ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}
function drawTitle() {
  // BG gradient + animated effect
  let grad=ctx.createLinearGradient(0,0,0,canvas.height);
  grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
  ctx.fillStyle=grad; ctx.fillRect(0,0,canvas.width,canvas.height);
  // Animated Solforge Tower
  let t=Date.now()/800;
  ctx.save();
    ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
    ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
    ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
    ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
    // Corruption effect
    ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
    ctx.fillStyle="#bc3cff";ctx.beginPath();
    ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
    ctx.globalAlpha=1;
  ctx.restore();
  // Title text
  ctx.fillStyle="#ffb347"; ctx.font="bold 46px Segoe UI"; ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14; ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.fillStyle="#fff"; ctx.font="bold italic 36px Segoe UI";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
      ctx.fillText("SOLSTICE BREAK",canvas.width/2,160); ctx.shadowBlur=0;
      // High Score
      ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
      ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);
      // Prompt
      if(Math.floor(Date.now()/500)%2===0) {
        ctx.font="bold italic 28px Segoe UI";ctx.fillStyle="#fff";
        ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
      }
      // Transition
      if(popAnyKey()) {
        state="highscore";
      }
}
function drawHighScoreScreen() {
   // BG
   ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
   ctx.font="bold italic 38px Segoe UI";ctx.fillStyle="#ffb347";
   ctx.textAlign="center";
   ctx.fillText("HIGH SCORE:",canvas.width/2,96);
   ctx.font="bold italic 54px Segoe UI";ctx.fillStyle="#fff";
   ctx.fillText(highScore.toLocaleString(),canvas.width/2,170);

   let next=getNextUnlock();
   if(next) {
     ctx.font="24px Segoe UI";ctx.fillStyle="#f7e17c";
     let what=(next.type==="char"?"Character ":"Level ");
     ctx.fillText("Next Unlock at "+next.val.toLocaleString()+": "+what+next.name,
                  canvas.width/2,250);
     // Progress bar
     let progress=Math.min(1,highScore/next.val);
     let w=390,h=26,x=canvas.width/2-w/2,y=275;
     ctx.globalAlpha=.25;ctx.fillStyle="#555";ctx.fillRect(x,y,w,h);ctx.globalAlpha=1;
     ctx.fillStyle="#ffb347";ctx.fillRect(x,y,w*progress,h);
     ctx.strokeStyle="#fff";ctx.lineWidth=2;ctx.strokeRect(x,y,w,h);
     ctx.font="16px Segoe UI";ctx.fillStyle="#fff";
     ctx.textAlign="left";ctx.fillText(highScore.toLocaleString(),x+6,y+h-8);
     ctx.textAlign="right";ctx.fillText(next.val.toLocaleString(),x+w-6,y+h-8);
   } else {
     ctx.font="22px Segoe UI";ctx.fillStyle="#8fdc74";
     ctx.fillText("All content unlocked!",canvas.width/2,250);
   }

   // Unlocks list (show locked/unlocked characters & levels)
   let y=320,lst=[];
   for(let i=1;i<CHARACTERS.length;i++)
       lst.push({type:"CHARACTER:",name:CHARACTERS[i].name,color:(highScore>=CHARACTERS[i].unlockedAt?"#fff":"#888")});
   for(let i=1;i<LEVELS.length;i++)
       lst.push({type:"LEVEL:",name:LEVELS[i].name,color:(highScore>=LEVELS[i].unlockedAt?"#fff":"#888")});
   lst.forEach((item,i)=>{
       ctx.font="18px Segoe UI";ctx.textAlign="center";ctx.fillStyle=item.color;
       ctx.fillText(item.type+" "+item.name,canvas.width/2,y+28*i);
   });

   // Continue prompt
   if(Math.floor(Date.now()/500)%2===0) {
        ctx.font="bold italic 28px Segoe UI";ctx.fillStyle="#fff";
        ctx.textAlign="center";
        ctx.fillText("[ Press Any Button to Continue ]",canvas.width/2,y+28*lst.length+44);
   }
   if(popAnyKey()) state="charselect";
}

function drawCharSelect(){
    // BG
    ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

    let chars=CHARACTERS;
    let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;

    for(let i=0;i<chars.length;++i){
        let x=x0+i*spacing,y=180,r=48;
        let isUnlocked=highScore>=chars[i].unlockedAt;
        // Portrait circle
        ctx.save();
        ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
        ctx.globalAlpha=isUnlocked?1:.15;
        ctx.strokeStyle="#fff";ctx.lineWidth=(i==selectedCharIdx)?7:3;ctx.stroke();
        // Faction color
        ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
        ctx.fillStyle=chars[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
        if(!isUnlocked){
            ctx.globalAlpha=.5;
            ctx.fillStyle="#222";
            ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();
        }
        // Char initial
        ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText(chars[i].name[0],x,y+7);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
            ctx.fillText("Unlocks @ "+chars[i].unlockedAt,x,y+r+24);
        }
        if(i==selectedCharIdx){
            // Info panel
            let charInfoY = y+r+44;
            ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
            ctx.textAlign="center";
            ctx.fillText(chars[i].name+" ("+chars[i].faction+")",x,charInfoY);
            if(isUnlocked){
                drawButton(x-48,charInfoY+12,96,36,"SELECT",true);
            }
            // Description below
            if(isUnlocked){
                ctx.font="16px Segoe UI";ctx.fillStyle="#bbb";
                ctx.textAlign="center";
                ctx.fillText(chars[i].desc,x,charInfoY+58);
            }
        }
        ctx.restore();
    }

    // Left/right/select navigation with keys
    if(popAnyKey()) {
      if(keys['ArrowLeft'] && selectedCharIdx>0) selectedCharIdx--;
      else if(keys['ArrowRight'] && selectedCharIdx<chars.length-1) selectedCharIdx++;
      else if(keys['Enter'] || keys[' ']) {
         if(highScore>=chars[selectedCharIdx].unlockedAt)
           state="levelselect";
      }
      keys={};
    }
}

function drawLevelSelect(){
    // BG
    ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Select Level",canvas.width/2,64);

    let levels=LEVELS;
    let spacing=70,y0=140;

    for(let i=0;i<levels.length;++i){
        let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
        let isUnlocked=highScore>=levels[i].unlockedAt;

        // BG box
        ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
        ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevelIdx)?4:2;
        ctx.strokeRect(x,y,w,h);
        // Preview BG color block for demo
        if(isUnlocked){
            ctx.fillStyle=levels[i].scenes[0].color || "#333";
            ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
        }

        // Level name
        ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
        ctx.fillStyle=isUnlocked?"#fff":"#888";
        ctx.fillText(levels[i].name,x+18,y+33);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
            ctx.textAlign="center";
            ctx.fillText("Unlocks @ "+levels[i].unlockedAt,x+w/2,y+h+23);
        }

        // Select button if unlocked & selected
        if(isUnlocked && i==selectedLevelIdx){
            drawButton(x+w+14,y+6,92,38,"PLAY",true);
        }
        ctx.restore();
    }

    if(popAnyKey()) {
      if(keys['ArrowUp'] && selectedLevelIdx>0) selectedLevelIdx--;
      else if(keys['ArrowDown'] && selectedLevelIdx<levels.length-1) selectedLevelIdx++;
      else if(keys['Enter'] || keys[' ']) {
         if(highScore>=levels[selectedLevelIdx].unlockedAt)
           startGame();
      }
      keys={};
    }
}

// ===== GAMEPLAY MOCKUP =====
function startGame(){
    state="playing";
    score=0;combo=0;comboMult=1;comboTimer=null;sceneY=0;enemies=[];
    currentLevel = LEVELS[selectedLevelIdx];
    currentSceneIdx = 0;

    player={
      x:canvas.width/2,
      y:80,
      vx:0,
      vy:0,
      w:42,h:68,
      col:getUnlockedChars()[selectedCharIdx].color,
      facingRight:true,
      hp:getUnlockedChars()[selectedCharIdx].hp,
      maxHp:getUnlockedChars()[selectedCharIdx].hp,
      atk:getUnlockedChars()[selectedCharIdx].atk,
      spd:getUnlockedChars()[selectedCharIdx].spd,
      alive:true
    };
}

function drawGame(){
    // BG (scene color)
    let scn=currentLevel.scenes[currentSceneIdx];
    let bgcol=scn.color||"#222831";
    ctx.fillStyle=bgcol;ctx.fillRect(0,0,canvas.width,canvas.height);

    // HUD Top bar
    drawHUD();

    // Draw player (simple rectangle + face)
    if(player.alive){
      ctx.save();
      ctx.translate(player.x,player.y);
      // Shadow
      ctx.globalAlpha=.15;ctx.beginPath();ctx.ellipse(0,player.h*.55,player.w*.5,.17*player.h,
          Math.PI/8 + Math.sin(Date.now()/350)*.15,.7*Math.PI,.3*Math.PI);ctx.fillStyle="#000";ctx.fill();ctx.globalAlpha=1;

      // Body
      ctx.lineWidth=4;ctx.strokeStyle="#fff";
      ctx.beginPath();ctx.arc(0,-player.h/3.5-player.w*.17,player.w*.53*Math.abs(Math.sin(Date.now()/500)),Math.PI*1.15,.25*Math.PI,true);ctx.stroke();
      // Main body
      ctx.beginPath();ctx.arc(0,-player.h/4.7-player.w*.12,(player.w+player.h)/5.3,-Math.PI,.98*Math.PI,false);ctx.closePath();
      ctx.globalAlpha=.93;ctx.fillStyle=player.col;ctx.shadowBlur=10;ctx.shadowColor='#fff';
      ctx.fill();ctx.shadowBlur=0;ctx.globalAlpha=1;

      // Face (simple)
      let fcol=["#222","#fff"];
      for(let i=-1;i<=1;i+=2){
         ctx.beginPath();ctx.arc(i*player.w*.17,-player.h/4.7-player.w*.18,.07*player.h+i*.005*player.h,
             Math.PI*1.15,.25*Math.PI,true);ctx.closePath();ctx.globalAlpha=.8;
         ctx.strokeStyle=fcol[(Date.now()/200|0)%2];ctx.lineWidth=(i==1?4.5:.9);ctx.stroke(); 
         ctx.globalAlpha=1;
      }
      // Arms (waving)
      for(let i=-1;i<=1;i+=2){
         let armAngle=Math.PI/3+.14*Math.sin(Date.now()/350+i*.4);
         let ax=i*(player.w*.55),ay=-player.h*.13,
             bx=ax+i*Math.cos(armAngle)*30,
             by=ay+Math.sin(armAngle)*30;

         ctx.beginPath();ctx.moveTo(ax,ay);ctx.lineTo(bx,by);ctx.strokeStyle='#fff';ctx.lineWidth=4;ctx.stroke();
         // Fist (circle)
         if(i*(player.facingRight?1:-1)>0) {
             let hitCol=(combo>5)?'#ffb347':player.col;
             ctx.beginPath();ctx.arc(bx,by,(combo>5)?10.5:7.5,-Math.PI,.98*Math.PI,false);ctx.closePath();
             ctx.globalAlpha=.75;ctx.fillStyle=hitCol;ctx.shadowBlur=(combo>5)?16:2;ctx.shadowColor='#fff';
             ctx.fill();ctx.shadowBlur=0;ctx.globalAlpha=1;
         }
      }
      //
      // Body outline again for pop effect:
      if(combo>10){ 
         ctx.lineWidth=(combo>20?8:6); 
         let cc=["#fff","#bc3cff","#ffb347","#18d860"];
         for(let i=-1;i<=1;i++)
           { 
             let ccc = cc[(Date.now()/170|i)%cc.length];
             if(combo>30)ccc="#f7e17c";
             ctx.strokeStyle = ccc; 
             ctx.strokeRect(-player.w*.53,-player.h*.95,(player.w+.9)*.93,(player.h+6)*.73); 
           } 
       }

      //
      //
      //
      //
      
      //
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      


      

      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      



       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    



    
    



    
    


    
    



    
    



    
    



    
    



    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    


    
    



 


    






// End player draw
      //
      //
      //
      //
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   
     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
// End player draw group

// End main gameplay demo!
}
function drawHUD(){
   // Top bar - Score & HP bar
   let barh =38;

   // Bar BG
   let gradbar = ctx.createLinearGradient(0,10,800-barh*5-30+260/barh*5-29+300/barh*5-29+40/barh*4-20/barh*5-19/barh*5-19/barh*5-19/barh*5-18/barh*5-17/barh*5-16/barh*5-15/barh*5-15/barh*5-14/barh*5-14/barh*5-13/barh*5-13/barh*5-12/barh*5-12/barh*5-11/barh*5-11/barh*5-10/barh*4-9/barh*4-9/barh*4-8/barh*4-8/barh*4-7/barh*4-7/barh*4-6/barh*4-6/barh*4-5/barh*4-5/barh*4-4/barh*4-4/barh*4-3/barh*4-3/barh*4-2/barh*4-2/barh*4-1/barh*4-1/barh*4-.5/barh-.5/barh-.25/barh-.25/barh-.125/barh-.125/barh-.06/barh-.06/barh-.03/barh-.03/barh-.01/barh-.01/.00,"#222");
   gradbar.addColorStop(0,"#222");gradbar.addColorStop(1,"#333");
   //
   //
   //
   //
   //
   //
   //
   //
   //
   //
   //
   //

   //
   //
   //
   //

   //
   //
   //
   //
   //

   //
   //
   //

   //
   //

   //

   //

}
// ===== MAIN LOOP ======
function mainLoop() {
  try{
    switch(state) {
      case "title": drawTitle(); break;
      case "highscore": drawHighScoreScreen(); break;
      case "charselect": drawCharSelect(); break;
      case "levelselect": drawLevelSelect(); break;
      case "playing": drawGame(); break;
      default:
          ctx.clearRect(0,0,canvas.width,canvas.height);
          ctx.font="30px serif";ctx.textAlign='left';ctx.fillStyle="#fff";
          ctx.fillText("Unknown state!",50,50);break;
    }
 }catch(e){console.error(e);}
 requestAnimationFrame(mainLoop);
}
mainLoop();
// END OF FILE -- minimal playable vertical loop + full menu flow!
</script>
</body>
</html>