<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <style>
    html, body { margin:0; padding:0; background:#18121a;}
    canvas { display:block; margin:0 auto; background:#18121a;}
    body { overflow:hidden; }
    #lorePopup {
      position:absolute; left:50%; top:30%; transform:translate(-50%,-30%);
      background:#232e35; border:4px solid #ffb347; color:#fff; z-index:2;
      padding:32px; display:none; font-family:"Segoe UI",sans-serif; border-radius:20px;
      min-width:340px; min-height:120px;
      box-shadow:0 8px 32px #000a;
      text-align:center;
    }
  </style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="600"></canvas>
<div id="lorePopup"></div>
<script>
// ====== GAME DATA ======
const CHARACTERS = [
  { name: "Korok", color: "#ff7200", hp:120, speed:4.5, atk:14, unlockedAt:0 },
  { name: "Oros", color: "#18d860", hp:80, speed:6.3, atk:10, unlockedAt:10000 },
  { name: "Cercee", color: "#bc3cff", hp:90, speed:6.2, atk:11, unlockedAt:25000 },
  { name: "Ironbeard", color: "#88c6ff", hp:130, speed:3.9, atk:15, unlockedAt:50000 },
  { name: "Ignir", color: "#ff1a1a", hp:70, speed:7.2, atk:8, unlockedAt:100000 },
  { name: "Voss", color: "#9300c2", hp:100, speed:5.8, atk:18, unlockedAt:200000 }
];

const LEVELS = [
  { name:"Frozen Wastes", scenes:[
    { bg:"frozen_wastes_1.png", color:"#2e3a5a", lore:"The open tundra of Solis." },
    { bg:"frozen_wastes_2.png", color:"#273548", lore:"Ice fissures cut through the wastes." },
    { bg:"frozen_wastes_3.png", color:"#222831", lore:"Ruined gates of the Ice Cave—miniboss awaits within." }
  ], unlockedAt:0 },
  { name:"Rootrealms", scenes:[
    { bg:"rootrealms_1.png", color:"#234a33", lore:"Lush jungle beneath the ice—Uterra's last refuge." },
    { bg:"rootrealms_2.png", color:"#133f22", lore:"Twisted roots block your path... corrupted life pulses here." }
  ], unlockedAt:25000 }
];

// ====== CANVAS & STATE ======
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

let gameState = "title"; // title -> charselect -> levelselect -> playing -> gameover
let charIdx = 0, levelIdx = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let currentScore = 0;

// Gameplay objects
let player = null;
let enemies = [];
let keys = {};
let verticalScrollY = 0;
let currentSceneIdx = 0;

// ====== DRAW HELPERS ======
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 22px Segoe UI";
  ctx.textAlign="center";ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}

// ====== SCREENS ======
function drawTitle() {
  ctx.fillStyle="#191723";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  // Animated SolForge
  ctx.save();
  let t=Date.now()/800;
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#9d2cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();

  ctx.font="bold 46px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.font="bold italic 36px Segoe UI";
  ctx.fillStyle="#fff";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
  ctx.shadowBlur=0;

  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

  let blink=(Math.floor(Date.now()/500)%2)==0;
  if(blink){
      ctx.font="bold italic 28px Segoe UI";
      ctx.fillStyle="#fff";
      ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }
}

function drawCharSelect() {
  ctx.fillStyle="#262335";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing=110,x0=canvas.width/2-(CHARACTERS.length-1)*spacing/2;

  for(let i=0;i<CHARACTERS.length;++i){
    let x=x0+i*spacing,y=200,r=48;
    let isUnlocked = highScore >= CHARACTERS[i].unlockedAt;
    // Portrait
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.12;
    ctx.strokeStyle="#fff";ctx.lineWidth=(i==charIdx)?7:3;ctx.stroke();

    // Faction color
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
    ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    // Char initial
    ctx.globalAlpha=isUnlocked?1:.38;ctx.font="bold italic 38px Segoe UI";
    ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);

    // Info
    if(i==charIdx){
      if(!isUnlocked){
        ctx.font="italic bold 18px Segoe UI";ctx.fillStyle="#ffb347";
        ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt+" pts",x,y+r+44);
      } else {
        ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
        ctx.fillText(CHARACTERS[i].name,x,y+r+44);
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
      }
    }
    ctx.restore();
  }
}

function drawLevelSelect() {
  ctx.fillStyle="#232e35";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Select Level",canvas.width/2,64);

  let spacing=70,y0=140;

  for(let i=0;i<LEVELS.length;++i){
    let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
    let isUnlocked = highScore >= LEVELS[i].unlockedAt;

    // BG box
    ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
    ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==levelIdx)?4:2;
    ctx.strokeRect(x,y,w,h);

    // Preview BG color block for demo
    if(isUnlocked){
      ctx.fillStyle=LEVELS[i].scenes[0].color || "#222";
      ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
    }

    // Level name
    ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
    ctx.fillStyle=isUnlocked?"#fff":"#888";
    ctx.fillText(LEVELS[i].name,x+18,y+33);

    // Lock info
    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
      ctx.textAlign="center";
      ctx.fillText("Unlocks @ "+LEVELS[i].unlockedAt,x+w/2,y+h+23);
    }

    // Select button if unlocked & selected
    if(isUnlocked && i==levelIdx){
      drawButton(x+w+14,y+6,92,38,"PLAY",true);
    }
    ctx.restore();
  }
}

function drawGameplay() {
   // Scene setup
   let scene = LEVELS[levelIdx].scenes[currentSceneIdx];
   // BG (solid color for demo)
   ctx.fillStyle = scene.color || "#444";
   ctx.fillRect(0,0,canvas.width,canvas.height);

   // Camera scroll (vertical)
   let camY = Math.max(0, player.y - canvas.height/2 + player.h/2);
   verticalScrollY = camY;

   // Draw enemies
   enemies.forEach(e=>{
     let ey = e.y - verticalScrollY;
     // Only draw on screen
     if(ey > -40 && ey < canvas.height +40) {
       // Enemy body
       ctx.save();
       ctx.beginPath();
       ctx.arc(e.x+e.w/2, ey+e.h/2, e.w/2+5,0,Math.PI*2); 
       ctx.closePath();
       ctx.globalAlpha=.09; 
       ctx.fillStyle="#980e33"; 
       ctx.fill(); 
       ctx.globalAlpha=1;

       // Main body
       ctx.fillStyle=e.color||"#b93c59"; 
       ctx.beginPath(); 
       ctx.arc(e.x+e.w/2, ey+e.h/2,e.w/2-3,0,Math.PI*2); 
       ctx.closePath(); 
       ctx.fill();

       // Eye
       ctx.beginPath(); 
       ctx.arc(e.x+e.w/2, ey+e.h/2-8,7,0,Math.PI*2); 
       ctx.closePath(); 
       ctx.fillStyle="#fff"; 
       ctx.globalAlpha=.95;
       ctx.fill();

       // Health bar
       if(e.hp<e.maxhp) {
         let per=e.hp/e.maxhp;
         let bx=e.x+e.w/4; 
         let by=ey-13;
         let bw=e.w/2; 
         let bh=7;
         ctx.globalAlpha=.72;
         ctx.strokeStyle="#fff"; 
         ctx.lineWidth=1;
         ctx.strokeRect(bx-1,by-1,bw+2,bh+2);
         ctx.globalAlpha=.92; 
         ctx.fillStyle="#f55"; 
         ctx.fillRect(bx,by,bw*per,bh);
         ctx.globalAlpha=1;
       }

       // Aggro
       if(e.aggro){
         let bx=e.x+e.w/2;
         let by=ey-22;
         for(let j=0;j<3;++j){
           let ang=Math.PI*2*(j/3)+(Date.now()/400)%Math.PI*2;
           let px=bx+Math.cos(ang)*13;
           let py=by+Math.sin(ang)*6;
           ctx.beginPath();ctx.arc(px,py,3,0,Math.PI*2);ctx.closePath();
           ctx.globalAlpha=.66;ctx.fillStyle="#f7e17c";ctx.fill();
         }
         ctx.globalAlpha=1;
       }
       ctx.restore();
     }
   });

   // Player
   let px = player.x,
       py = player.y - verticalScrollY,
       pw = player.w,
       ph = player.h;

   // Shadow
   if(py<canvas.height){
     ctx.save();
     let shw=pw*.7,
         shh=10,
         shy=Math.min(canvas.height-30,py+ph-.18*ph);
     for(let l=3;l>=1;l--){
        let sga=.08*l+.11;
        let sx=px+(pw-shw)/2-l*3,
            sy=shy+l*4,
            sw=shw+l*7,
            sh=shh+l*3;
        if(sga>1)sga=.8; 
        if(sw>pw*1.7)sw=pw*1.7;
        if(sh>20)sh=20;

        if(sga>.15){
          ctx.globalAlpha=sga*.6; 
          ctx.beginPath(); 
          ellipse(ctx,sx+(sw)/2,sy+(sh)/2,(sw)/2,(sh)/2); 
          if(l==1)ctx.globalAlpha*=.7; 
          if(l==3)ctx.globalAlpha*=.8;
          if(l==2)ctx.globalAlpha*=.6;
          ctx.closePath(); 
          ctx.fillStyle="#000"; 
          ctx.fill();
        }
     }
     ctx.restore();
   }

   // Main body
   if(py<canvas.height){
     // Body
     roundRect(ctx, px, py,pw,ph,pw/4,"#fff");
     roundRect(ctx, px+4, py+6,pw-8,ph-12,pw/5,"#222");
     roundRect(ctx, px+12, py+12,pw-24,pw-20,pw/7,"#bbb");

     // Faction aura
     for(let k=4;k>=1;k--){
       ellipse(ctx,
               px + pw/2,
               py + ph/3 + k*k,
               pw*.23 + k*4,
               pw*.11 + k*6,
               CHARACTERS[charIdx].color,
               .08+.07*k);
     }

     // Name tag
     if(py>-30 && py<canvas.height-10){
        let nm = CHARACTERS[charIdx].name[0];
        ellipse(ctx,
                px+pw/2,
                py+ph-pw*.22,
                pw*.29,pw*.19,"#333",.55);
        ellipse(ctx,
                px+pw/2,
                py+ph-pw*.23,
                pw*.21,pw*.13,"#f7e17c",.41);
        ellipse(ctx,
                px+pw/2,
                py+ph-pw*.21,
                pw*.15,pw*.09,"#fff",1);
        // Initial
        if(py>10){
          drawCharInitial(nm,
                          px+pw/2,
                          py+ph-pw*.18,
                          "#222");
        }
     }
   }

   // HUD BAR
   hudBar();

   // Combo/display etc.
}

/** Utility Drawing Functions **/
function roundRect(ctx,x,y,w,h,r,c){
   if(r>w/2)r=w/2;if(r>h/2)r=h/2;
   if(c){ctx.save();ctx.beginPath();}
   else{ctx.save();}
   if(r)ctx.moveTo(x+r,y);
   else{ctx.moveTo(x,y);}
   if(r)ctx.arcTo(x+w,y,x+w,y+h,r);else{ctx.lineTo(x+w,y);}
   if(r)ctx.arcTo(x+w,y+h,x,y+h,r);else{ctx.lineTo(x+w,y+h);}
   if(r)ctx.arcTo(x,y+h,x,y,r);else{ctx.lineTo(x,y);}
   if(r)ctx.arcTo(x,y,x+w,y,r);else{ctx.lineTo(x,y);}
   if(c){ctx.closePath();ctx.globalAlpha=.88;ctx.fillStyle=c;ctx.fill();}
   else{ctx.closePath();}
   ctx.restore();
}
function ellipse(ctx,x,y,w,h,c,a){
   a=a||1;ctx.save();ctx.beginPath();
   for(let i=0;i<6;++i)
     {let ang=i*Math.PI/3;
      let ex=x+w*Math.cos(ang),
          ey=y+h*Math.sin(ang);
      if(i==0)ctx.moveTo(ex,ey);else{ctx.lineTo(ex,ey);}
     }
   for(let t=0;t<=Math.PI*2;t+=Math.PI/24)
      {let ex=x+w*Math.cos(t),ey=y+h*Math.sin(t);ctx.lineTo(ex,ey);}
   if(c){ctx.globalAlpha=a||1;ctx.fillStyle=c;}
   else{ctx.globalAlpha=a||1;}
   if(c){ctx.closePath();ctx.fill();}
   else{ctx.closePath();}
   ctx.restore();
}
function drawCharInitial(txt,x,y,c){
   c=c||"#222";
   for(let i=-1;i<=1;i++)
     for(let j=-1;j<=1;j++)
        {if(i!==0||j!==0){
          let a=.11+(Math.abs(i)+Math.abs(j))/11; 
          let cx=x+i*1.5,
              cy=y+j*1.5;
          ellipse(ctx,cx-6+i*1.5,
                  cy-7+j*1.5,
                  Math.abs(i)+5,
                  Math.abs(j)+5,c,a);}
        }
   ellipse(ctx,x-6,y-7,18,13,"#fff",.34);
   ellipse(ctx,x-6,y-6.5,.9,.9,"#222",.67);
   ellipse(ctx,x-6,y-8,.9,.9,"#222",.67);
   ellipse(ctx,x-7.5,y-6,.9,.9,"#222",.67);
   ellipse(ctx,x-5.5,y-6,.9,.9,"#222",.67);

   // Letter
   ctx.save();ctx.font="bold italic 22px Segoe UI";
   ctx.textAlign="center";ctx.textBaseline="middle";
   ctx.shadowColor=c;ctx.shadowBlur=4;
   ellipse(ctx,x,y,.001,.001,c,.01);//dummy for reset path
   if(c)ctx.globalAlpha=.9;else{ctx.globalAlpha=.85;}
   if(!c)c="#222";
   else c=c||"#222";
   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path
   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path
   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.001,.001,c,.01);//dummy for reset path

   ellipse(ctx,x-.5,y-.5,.

// ...truncated after drawing helper...
// See full code in next message due to length.