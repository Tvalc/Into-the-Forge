<!-- index.html - FORGEBORN: SOLSTICE BREAK vertical slice -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <style>
    html, body { margin:0; padding:0; background:#18121a; overflow:hidden; }
    canvas { display:block; margin:0 auto; background:#18121a; }
    #lorePopup {
      position:absolute; left:50%; top:30%; transform:translate(-50%,-30%);
      background:#232e35; border:4px solid #ffb347; color:#fff; z-index:2;
      padding:32px; display:none; font-family:"Segoe UI",sans-serif; border-radius:20px;
      min-width:340px; min-height:120px;
      box-shadow:0 8px 32px #000a;
      text-align:center;
    }
  </style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="600"></canvas>
<div id="lorePopup"></div>
<script>
// --- DATA & CONSTANTS ---
const CHARACTERS = [
  { name: "Korok", color: "#ff7200", hp:120, speed:4.5, atk:14, unlockedAt:0 },
  { name: "Oros", color: "#18d860", hp:80, speed:6.3, atk:10, unlockedAt:10000 },
  { name: "Cercee", color: "#bc3cff", hp:90, speed:6.2, atk:11, unlockedAt:25000 },
  { name: "Ironbeard", color: "#88c6ff", hp:130, speed:3.9, atk:15, unlockedAt:50000 },
  { name: "Ignir", color: "#ff1a1a", hp:70, speed:7.2, atk:8, unlockedAt:100000 },
  { name: "Voss", color: "#9300c2", hp:100, speed:5.8, atk:18, unlockedAt:200000 }
];

const LEVELS = [
  { name:"Frozen Wastes", scenes:[
    { bg:"frozen_wastes_1.png", color:"#2e3a5a", lore:"The open tundra of Solis, home to the wandering Tempys tribes." },
    { bg:"frozen_wastes_2.png", color:"#273548", lore:"Ice fissures cut through the wastes—ancient magic stirs below." },
    { bg:"frozen_wastes_3.png", color:"#222831", lore:"Ruined gates of the Ice Cave—miniboss awaits within." }
  ], unlockedAt:0 },
  { name:"Rootrealms", scenes:[
    { bg:"rootrealms_1.png", color:"#234a33", lore:"Lush jungle beneath the ice—Uterra's last refuge." },
    { bg:"rootrealms_2.png", color:"#133f22", lore:"Twisted roots block your path... corrupted life pulses here." }
  ], unlockedAt:25000 }
];

// --- CANVAS & GAME STATE ---
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
let gameState = "title"; // title, charselect, levelselect, playing
let charIdx = 0, levelIdx = 0;
let player = null;
let sceneIdx = 0;
let score = 0;
let highScore = 0;
try {
  highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
} catch(e) { highScore = 0; }
let enemies = [];
let spawnTimer = 0;
let sceneY = 0; // vertical scroll offset
let comboCounter = 0;
let comboTimer = 0;
let lorePopup = document.getElementById("lorePopup");

// --- INPUT ---
const KEYS = {};
window.addEventListener("keydown",e=>{
  KEYS[e.key]=true;
  if(gameState==="title") {
    gameState="charselect";
    return;
  }
});
window.addEventListener("keyup",e=>{ KEYS[e.key]=false; });

// --- DRAW HELPERS ---
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha=isActive?1:.5;
  ctx.fillStyle=isActive?"#ff9200":"#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";ctx.lineWidth=2;ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}

// --- TITLE SCREEN ---
function drawTitle() {
  ctx.fillStyle="#191723";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  // Animated SolForge
  ctx.save();
  let t=Date.now()/800;
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#9d2cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();

  ctx.font="bold 46px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.font="bold italic 36px Segoe UI";ctx.fillStyle="#fff";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);ctx.shadowBlur=0;

  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

  let blink=(Math.floor(Date.now()/500)%2)==0;
  if(blink){
      ctx.font="bold italic 28px Segoe UI";
      ctx.fillStyle="#fff";
      ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }
}

// --- CHARACTER SELECT ---
function drawCharSelect() {
  ctx.fillStyle="#262335";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing=110,x0=canvas.width/2-(CHARACTERS.length-1)*spacing/2;

  for(let i=0;i<CHARACTERS.length;++i){
    let x=x0+i*spacing,y=200,r=48;
    let isUnlocked = highScore >= CHARACTERS[i].unlockedAt;
    // Portrait
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.12;
    ctx.strokeStyle="#fff";ctx.lineWidth=(i==charIdx)?7:3;ctx.stroke();
    // Faction color
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
    ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    // Char initial
    ctx.globalAlpha=isUnlocked?1:.38;ctx.font="bold italic 38px Segoe UI";
    ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);
    // Info
    if(i==charIdx){
      if(!isUnlocked){
        ctx.font="italic bold 18px Segoe UI";ctx.fillStyle="#ffb347";
        ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt+" pts",x,y+r+44);
      } else {
        ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
        ctx.fillText(CHARACTERS[i].name,x,y+r+44);
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
      }
    }
    ctx.restore();
  }
}

// --- LEVEL SELECT ---
function drawLevelSelect() {
  ctx.fillStyle="#232e35";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Select Level",canvas.width/2,64);

  let spacing=70,y0=140;

  for(let i=0;i<LEVELS.length;++i){
    let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
    let isUnlocked = highScore >= LEVELS[i].unlockedAt;

    // BG box
    ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
    ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==levelIdx)?4:2;
    ctx.strokeRect(x,y,w,h);

    // Preview BG color block for demo
    if(isUnlocked){
      ctx.fillStyle=LEVELS[i].scenes[0].color || "#222";
      ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
    }

    // Level name
    ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
    ctx.fillStyle=isUnlocked?"#fff":"#888";
    ctx.fillText(LEVELS[i].name,x+18,y+33);

    // Lock info
    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
      ctx.textAlign="center";
      ctx.fillText("Unlocks @ "+LEVELS[i].unlockedAt,x+w/2,y+h+23);
    }

    // Select button if unlocked & selected
    if(isUnlocked && i==levelIdx){
      drawButton(x+w+14,y+6,92,38,"PLAY",true);
    }
    ctx.restore();
  }
}

// --- GAMEPLAY SCENE ---
function startGame() {
  let charObj = CHARACTERS[charIdx];
  player = {
    ...charObj,
    x:canvas.width/2,
    y:60,
    vx:0,
    vy:0,
    w:42,h:68,
    onGround:false,
    facingRight:true,
    jumping:false,
    attackTimer:0,
    invulnTimer:0,
    hpCur:charObj.hp
  };
  sceneIdx = 0; score = 0; enemies = []; spawnTimer = Date.now(); sceneY = -40;
}

function drawGameplay() {
   // Scene background
   let scene = LEVELS[levelIdx].scenes[sceneIdx];
   // BG
   ctx.fillStyle = scene.color || "#222";
   ctx.fillRect(0,0,canvas.width,canvas.height);

   // LORE BAR
   ctx.save();
   ctx.globalAlpha=.25;
   ctx.fillStyle="#222";
   ctx.fillRect(50,30,700,36);
   ctx.globalAlpha=1;ctx.font="18px Segoe UI";
   ctx.fillStyle="#ffeebb";ctx.textAlign="center";
   ctx.fillText(scene.lore||"",canvas.width/2,58);
   ctx.restore();

   // Draw player
   if(player) {
     // shadow
     ctx.save();
     ctx.globalAlpha=.22;
     ctx.beginPath();ctx.ellipse(player.x,(player.y+player.h-10),20,6,0,0,Math.PI*2);ctx.fillStyle="#000";ctx.fill();ctx.restore();
     // body
     ctx.save();
     ctx.beginPath();ctx.ellipse(player.x,(player.y+15),24,player.h/1.7,0,0,Math.PI*2);ctx.closePath();
     ctx.fillStyle=player.color||"#fff";ctx.globalAlpha=.92;ctx.shadowColor="#fff7";
     if(player.invulnTimer>0) {if(Math.floor(Date.now()/80)%2)ctx.globalAlpha=.33;}
     ctx.shadowBlur=14;ctx.fill();ctx.restore();
     // head
     ctx.beginPath();ctx.arc(player.x,(player.y-18),22,0,Math.PI*2);ctx.closePath();
     ctx.globalAlpha=.97;ctx.fillStyle="#fff";
     ctx.lineWidth=3;ctx.strokeStyle=player.color||"#fff";ctx.stroke();ctx.globalAlpha=.96;
     ctx.fill();
     // face/detail
     ctx.font="bold italic 24px Segoe UI";ctx.textAlign="center";ctx.globalAlpha=.96;
     ctx.fillStyle=player.color||"#fff";
     let initials=(player.name||"")[0];
     if(initials)ctx.fillText(initials.toUpperCase(),player.x,(player.y-9));
   }

   // HUD Bar
   drawHUD();

   // TODO add enemies/progress etc.
}

// --- HUD ---
function drawHUD(){
   // Top bar - Score & Health
   let hpFrac = Math.max(0,(player.hpCur/player.hp));
   // Score
   ctx.save();
   ctx.font="bold italic 28px Segoe UI";ctx.textAlign="left";
   ctx.shadowColor="#000b";ctx.shadowBlur=4;
   ctx.fillStyle="#eee";
   ctx.fillText("Score "+score.toLocaleString(),24,42);
   // Health bar
   let x=210,y=22,w=220,h=28;
   // bg
   ctx.globalAlpha=.25;ctx.fillStyle="#888";
   roundRect(ctx,x,y,w,h,h/2,true,false);
   // value
   let fgcol=(hpFrac>.5)?"#18d860":((hpFrac>.25)?"#ffc934":"#ff4138");
   ctx.globalAlpha=.84;roundRect(ctx,x,y,w*hpFrac,h,h/2,true,false);ctx.globalAlpha=1;
   // border
   roundRect(ctx,x,y,w,h,h/2,false,true,"#fff");
   // text
   ctx.font="bold italic 18px Segoe UI";ctx.textAlign="center";
   ctx.fillStyle="#333";
   ctx.fillText(Math.round(player.hpCur)+"/"+player.hp,x+w/2,y+h/2+4);
   // Combo Counter (placeholder)
   if(comboCounter>1){
     let mult = Math.floor(comboCounter/5)+1;
     let txt = comboCounter+"x! ("+(mult)+"x)";
     ctx.font="bold italic 20px Segoe UI";ctx.textAlign="right";
     ctx.fillStyle="#f7e17c";
     ctx.fillText(txt,canvas.width-30,y+h/2+5);
   }
   // Pause button (top right)
   roundRect(ctx,canvas.width-66,y-4,48,h+8,(h+8)/2,true,true,"#ffb347");
   ctx.font="bold italic 20px Segoe UI";ctx.textAlign="center";ctx.fillStyle="#232e35";
   ctx.fillText("II",canvas.width-42,y+h/2+4);
   ctx.restore();
}
function roundRect(ctx,x,y,w,h,r,fS,sS,scol){
   if(w<2*r)r=w/2;if(h<2*r)r=h/2;
   ctx.beginPath();
   ctx.moveTo(x+r,y);ctx.lineTo(x+w-r,y);ctx.quadraticCurveTo(x+w,y,x+w,y+r);
   ctx.lineTo(x+w,y+h-r);ctx.quadraticCurveTo(x+w,y+h,x+w-r,y+h);
   ctx.lineTo(x+r,y+h);ctx.quadraticCurveTo(x,y+h,x,y+h-r);
   ctx.lineTo(x,y+r);ctx.quadraticCurveTo(x,y,x+r,y);ctx.closePath();
   if(fS)ctx.fillStyle=scol||"#333",ctx.fill();
   if(sS) {ctx.strokeStyle=scol||"#fff";ctx.lineWidth=3;ctx.stroke();}
}

// --- MAIN LOOP ---
function gameLoop(){
 try{
   if(gameState==="title") drawTitle();
   else if(gameState==="charselect") drawCharSelect();
   else if(gameState==="levelselect") drawLevelSelect();
   else if(gameState==="playing") drawGameplay();

 }catch(e){
     // Render error to screen
     console.error(e);
     try{
       ctx.clearRect(0,0,canvas.width,canvas.height);
       ctx.font="28px monospace";ctx.textAlign="center";ctx.fillStyle="#f00";
       ctx.fillText("Game Error!",canvas.width/2,120);
       let msg=e.message||"";if(msg.length>60)msg=msg.slice(0,60)+"...";
       ctx.font="18px monospace";ctx.fillText(msg,canvas.width/2,160);
     }catch(_){}
 }
 requestAnimationFrame(gameLoop);
}

// --- UI INPUT HANDLING ---
canvas.addEventListener("click",(e)=>{
 let mx=e.offsetX,my=e.offsetY;
 if(gameState==="charselect"){
     // Only allow select for unlocked chars
     let spacing=110,x0=canvas.width/2-(CHARACTERS.length-1)*spacing/2;
     for(let i=0;i<CHARACTERS.length;++i){
         let x=x0+i*spacing,y=200,r=48;
         let isUnlocked = highScore >= CHARACTERS[i].unlockedAt;
         if(isUnlocked && mx>=x-48 && mx<=x+48 && my>=y+r+56 && my<=y+r+56+36){
             charIdx=i; gameState="levelselect"; break;
         }
         if(mx>x-r && mx<x+r && my>y-r && my<y+r) charIdx=i;
     }
 } else if(gameState==="levelselect") {
     let spacing=70,y0=140;
     for(let i=0;i<LEVELS.length;++i){
         let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52,isUnlocked = highScore >= LEVELS[i].unlockedAt;
         if(isUnlocked && mx>=x+w+14 && mx<=x+w+14+92 && my>=y+6 && my<=y+44){
             levelIdx=i; startGame(); gameState="playing"; break;
         }
         if(mx>x && mx<x+w && my>y && my<y+h) levelIdx=i;
     }
 } else if(gameState==="playing"){
     // Pause button?
     let y=22,h=28,xp=canvas.width-66;
     if(mx>=xp && mx<=xp+48 && my>=y-4 && my<=y-4+h+8){
         alert("Pause menu coming soon!"); // Replace with proper pause later
     }
 }
});

// --- KEYBOARD NAVIGATION ---
window.addEventListener("keydown",(e)=>{
 if(gameState==="charselect"){
   if(e.key==="ArrowRight")charIdx=Math.min(charIdx+1,CHARACTERS.length-1);
   else if(e.key==="ArrowLeft")charIdx=Math.max(charIdx-1,0);
 } else if(gameState==="levelselect"){
   if(e.key==="ArrowDown")levelIdx=Math.min(levelIdx+1,LEVELS.length-1);
   else if(e.key==="ArrowUp")levelIdx=Math.max(levelIdx-1,0);
 } else if(gameState==="playing"){
     // Handle player movement later...
 }
 if(gameState==="charselect" && e.key==="Enter"){
     if(highScore>=CHARACTERS[charIdx].unlockedAt){gameState="levelselect";}
 }
 if(gameState==="levelselect" && e.key==="Enter"){
     if(highScore>=LEVELS[levelIdx].unlockedAt){startGame();gameState="playing";}
 }
});

// --- INIT ---
gameLoop();

</script>
</body>
</html>