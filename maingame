<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    html, body { margin:0; padding:0; background:#18121a; }
    body { font-family:'Segoe UI',Arial,sans-serif; overflow:hidden;}
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center;}
    canvas { background:#18121a; box-shadow:0 0 32px #222; display:block;}
    .overlay-btn {
      position:absolute;left:50%;transform:translateX(-50%);
      background:linear-gradient(90deg,#ffb347,#ff7200);
      color:#fff; font-size:22px; font-family:'Segoe UI',Arial;
      border:none;border-radius:8px;padding:12px 38px;
      box-shadow:0 2px 16px #2227;cursor:pointer;margin-top:18px;
      letter-spacing:1px;z-index:100;
    }
    .overlay-btn:hover { background:linear-gradient(90deg,#ff9200,#bc3cff); }
    #overlay { position:absolute; left:0; top:0; width:100vw; height:100vh; display:none; z-index:99;}
  </style>
</head>
<body>
<div id="gameContainer" style="position:relative;">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="overlay"></div>
</div>
<script>
// ========== DATA ==========
const CHARACTERS = [
  { name:"Korok", faction:"Tempys", unlockedAt:0, color:"#ff7200" },
  { name:"Oros", faction:"Uterra", unlockedAt:10000, color:"#18d860" },
  { name:"Cercee", faction:"Nekrium", unlockedAt:25000, color:"#bc3cff" },
  { name:"Ironbeard", faction:"Alloyin", unlockedAt:50000, color:"#88c6ff" },
  { name:"Ignir", faction:"Tempys", unlockedAt:100000, color:"#ff1a1a" },
  { name:"Voss", faction:"Nekrium", unlockedAt:200000, color:"#9300c2" }
];
const LEVELS = [
  { name:"The Frozen Wastes", unlockedAt:0 },
  { name:"The Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 }
];
const SCENE_BACKGROUNDS = ["#2e3a5a","#273548","#222831"];
const GAME_WIDTH = 800, GAME_HEIGHT = 600;

// ========== STATE ==========
let gameState = "title"; // title, highscore, charselect, levelselect, playing, pause, win, lose
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let currentScore = 0;
let selectedCharIdx = 0;
let selectedLevelIdx = 0;
let player=null,enemies=[],comboCount=0,comboTimer=0,playerHealth=100,inGameSceneY=0,bestCombo=0;
let pressed = {};
let lastFrame = Date.now();

// ========== CANVAS ==========
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// ========== UTILS ==========
function clamp(x,a,b){return Math.max(a,Math.min(b,x));}
function lerp(a,b,t){return a+(b-a)*t;}
function getUnlockedChars(){return CHARACTERS.filter(c=>highScore>=c.unlockedAt);}
function getUnlockedLevels(){return LEVELS.filter(l=>highScore>=l.unlockedAt);}
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";
  ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}

// ========== TITLE ==========
function drawTitle(){
    let grad=ctx.createLinearGradient(0,0,0,canvas.height);
    grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
    ctx.fillStyle=grad;ctx.fillRect(0,0,canvas.width,canvas.height);

    // Animated Solforge Tower
    ctx.save();
    let t=Date.now()/800;
    ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
    ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
    ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
    ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
    // Corruption effect
    ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
    ctx.fillStyle="#9d2cff";ctx.beginPath();
    ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
    ctx.globalAlpha=1;ctx.restore();

    // Title
    ctx.fillStyle="#ffb347";
    ctx.font="bold 46px Segoe UI";
    ctx.textAlign="center";
    ctx.shadowColor="#602f07";ctx.shadowBlur=14;
    ctx.fillText("FORGEBORN:",canvas.width/2,110);
    ctx.fillStyle="#fff";
    ctx.font="bold italic 36px Segoe UI";
    ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
    ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
    ctx.shadowBlur=0;

    // High Score
    ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
    ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

    let blink=(Math.floor(Date.now()/500)%2)==0;
    if(blink){
        ctx.font="bold italic 28px Segoe UI";
        ctx.fillStyle="#fff";
        ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
    }
}

// ========== CHARACTER SELECT ==========
function drawCharSelect(){
    ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

    let chars=CHARACTERS;
    let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;

    for(let i=0;i<chars.length;++i){
        let x=x0+i*spacing,y=180,r=48;
        let isUnlocked=highScore>=chars[i].unlockedAt;
        // Portrait circle
        ctx.save();
        ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
        ctx.globalAlpha=isUnlocked?1:.15;
        ctx.strokeStyle="#fff";ctx.lineWidth=(i==selectedCharIdx)?7:3;ctx.stroke();
        // Faction color
        ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
        ctx.fillStyle=chars[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
        if(!isUnlocked){
            ctx.globalAlpha=.5;ctx.fillStyle="#222";
            ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();
        }
        // Char initial
        ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText(chars[i].name[0],x,y+7);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
            ctx.fillText("Unlocks @ "+chars[i].unlockedAt,x,y+r+24);
        }
        if(i==selectedCharIdx){
            ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
            ctx.fillText(chars[i].name+" ("+chars[i].faction+")",x,y+r+44);
            if(isUnlocked){
                drawButton(x-48,y+r+56,96,36,"SELECT",true);
            }
        }
        ctx.restore();
    }
}

// ========== LEVEL SELECT ==========
function drawLevelSelect(){
    ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Select Level",canvas.width/2,64);

    let levels=LEVELS;
    let spacing=70,y0=140;

    for(let i=0;i<levels.length;++i){
        let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
        let isUnlocked=highScore>=levels[i].unlockedAt;

        // BG box
        ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
        ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevelIdx)?4:2;
        ctx.strokeRect(x,y,w,h);
        // Preview BG color block for demo
        if(isUnlocked){
            ctx.fillStyle=SCENE_BACKGROUNDS[i%SCENE_BACKGROUNDS.length];
            ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
        }

        // Level name
        ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
        ctx.fillStyle=isUnlocked?"#fff":"#888";
        ctx.fillText(levels[i].name,x+18,y+33);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
            ctx.textAlign="center";
            ctx.fillText("Unlocks @ "+levels[i].unlockedAt,x+w/2,y+h+23);
        }

        // Select button if unlocked & selected
        if(isUnlocked && i==selectedLevelIdx){
            drawButton(x+w+14,y+6,92,38,"PLAY",true);
        }
        ctx.restore();
    }
}

// ========== GAMEPLAY (DEMO) ==========
function resetGamePlay(){
    currentScore=0;comboCount=0;playerHealth=100;inGameSceneY=0;enemies=[];
    player={
      x:canvas.width/2,
      y:80,
      vx:0,
      vy:0,
      w:42,h:68,
      col:getUnlockedChars()[selectedCharIdx].color,
      attacking:false,
      attackTimer:0,
      onGround:true,
      facingRight:true,
      comboTimer:null,
      spriteFrame:0,
      name:getUnlockedChars()[selectedCharIdx].name,
      jumpV:-9,
      speed:5,
      gravity:.7,
      hp:100,
      atkPower:9,
      specialReady:true
    };
}

function spawnEnemy(){
    let ex=Math.random()*(canvas.width-120)+60;
    let ey=inGameSceneY+Math.random()*220+340;
    enemies.push({
      x:ex,y:ey,vx:(Math.random()>.5?1:-1)*1.5,
      vy:0,w:36,h:50,hp:20,col:"#bbb",
      alive:true,type:"grunt"
    });
}

function drawHUD(){
    // Top Bar
    ctx.save();
    // Score & Combo
    ctx.globalAlpha=.95;
    ctx.fillStyle="#16141f";
    ctx.fillRect(12,10,210,40);
    ctx.font="bold 24px Segoe UI";ctx.textAlign="left";
    ctx.fillStyle="#fff";
    ctx.fillText("SCORE",22,36);
    ctx.font="bold italic 24px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="right";
    ctx.fillText(currentScore.toLocaleString(),210,36);

    // Health Bar
    let hx=240,hy=14,hmaxw=180,hvalw=Math.max(2,(playerHealth/100)*hmaxw);
    ctx.globalAlpha=.95;
    ctx.fillStyle="#181e33";ctx.fillRect(hx-4,hy-4,hmaxw+8,28);
    // Red part
    let grad=ctx.createLinearGradient(hx,hy,hx+hmaxw,hy+20);
    grad.addColorStop(0,"#ff5151");grad.addColorStop(.7,"#f7e17c");
    grad.addColorStop(1,"#fff");
    ctx.globalAlpha=.97;
    ctx.fillStyle=grad;ctx.fillRect(hx,hy,hvalw,20);

    // Border
    ctx.lineWidth=3;ctx.strokeStyle="#fff";ctx.strokeRect(hx-4,hy-4,hmaxw+8,28);

    // Combo Counter
    if(comboCount>1){
      let mx = hx+hmaxw+46,my=hy+12;
      let tier = comboCount>=30 ? "X4" : comboCount>=20 ? "X3"
                : comboCount>=10 ? "X2" : comboCount>=5 ? "X1.5" : "";
      let ccolor = comboCount>=30 ? "#ffc300": comboCount>=20 ? "#bc3cff"
          : comboCount>=10 ? "#18d860": "#f7e17c";
      // Combo label
      ctx.save();
      ctx.font="bold italic 22px Segoe UI";ctx.textAlign="left";ctx.textBaseline="middle";
      ctx.shadowBlur=6;ctx.shadowColor=ccolor;
      ctx.fillStyle=ccolor;
      let label=`${comboCount}x`;
      if(tier) label += " "+tier;
      ctx.fillText(label,mx,my);
      ctx.restore();
     }
     // High Score (top right)
     ctx.font="bold italic 18px Segoe UI";ctx.textAlign="right";
     ctx.shadowBlur=6;ctx.shadowColor="#bc3cff";
     ctx.fillStyle="#fff";
     ctx.globalAlpha=.7;
     ctx.fillText("High Score "+highScore.toLocaleString(),canvas.width-22,36);
     ctx.restore();
}

function drawGameplay(){
   // Background
   let bgcol = SCENE_BACKGROUNDS[selectedLevelIdx%SCENE_BACKGROUNDS.length];
   let grad = ctx.createLinearGradient(0,inGameSceneY%600,0,inGameSceneY%600+600);
   grad.addColorStop(0,bgcol); grad.addColorStop(1,"#18121a");
   ctx.save();ctx.globalAlpha=.95;
   ctx.fillStyle=grad;ctx.fillRect(0,0,GAME_WIDTH,GAME_HEIGHT);ctx.restore();

   // Terrain "platform"
   let platY = clamp(530-inGameSceneY%600,-100,GAME_HEIGHT+30);
   for(let i=-2;i<3;++i){
     let px=i*180 + (inGameSceneY%120)*.5;
     let py=platY+(i%2)*8;
     ctx.save();ctx.globalAlpha=.4+.08*i;
     ctx.fillStyle="#eee3b9";ctx.beginPath();
     for(let j=-1;j<10;++j)
       {let cx=px+j*38+(j%3==1?14:-13),cy=py+(j%4==2?18:-12);if(j===-1)continue;
         if(j==8)break;if(j==7)cy+=22;if(j==3)cy-=10;if(j==5)cy+=16;if(j==6)cy-=16;
         if(j===-1)continue;if(j===8)break;
         if(j==0)ctx.moveTo(cx,cy);else   ctx.lineTo(cx,cy);}
     ctx.closePath();ctx.fill();ctx.restore();
   }

   // Player
   if(player){
     // Shadow
     let sy=player.y+player.h-6-inGameSceneY;
     if(sy>platY-16 && sy<platY+16){
       let sx = player.x+(player.facingRight?18:-18),sw=32+(player.attacking?16:8),sh=12+(player.attacking?5:-2);
       if(player.onGround)
       {ctx.save();ctx.globalAlpha=.19;ctx.beginPath();ctx.ellipse(sx,platY+8+sh/2-6,sw/2.3,(sh)/2.4 ,0 , 0 ,Math.PI*2);
         let grad2 =ctx.createRadialGradient(sx,platY+8+sh/2-6 ,sw*.33,sx ,platY+8+sh/2-6 ,sw*.77 );
         grad2.addColorStop(0,"#00000077");grad2.addColorStop(.97,"#00000000");
         grad2.addColorStop(1,"#00000000");                 /* fading out */
         ctx.fillStyle=grad2;ctx.fill();}
       }
     // Body
     let px = player.x , py = player.y - inGameSceneY ;
     // Main shape
     let ccol = player.col || "#aaa";
     let glowCol = ccol=="#ff7200"?"#ffcc80":ccol=="#bc3cff"?"#f9d4fe":ccol=="#18d860"?"#85ffd4":ccol=="#88c6ff"?"#e8f6ff":"#ffe6fc"
     let armOffset=(player.attacking?24*Math.sin(Date.now()/50):10)*(player.facingRight?1:-1);

     // Main body ellipse
     ctx.save();
     if(player.attacking) {ctx.shadowBlur=24;ctx.shadowColor=glowCol;}
     else{ctx.shadowBlur=9;ctx.shadowColor='#fff';}
     // Torso/body
     ctx.globalAlpha=.96;
     ctx.beginPath();ctx.ellipse(px ,py ,19 ,32 ,Math.PI/30*(player.facingRight?1:-1),0 , Math.PI*2 );ctx.closePath();
     let gradBod =ctx.createLinearGradient(px-19 ,py , px+19 ,py );
     gradBod.addColorStop(0,"#444"); gradBod.addColorStop(.45,"#666");
     gradBod.addColorStop(.7 ,ccol); gradBod.addColorStop(1,"#aaa");
     ctx.fillStyle = gradBod ; 
     if(player.attacking){gradBod.addColorStop(.55,"#fff");}
     else{gradBod.addColorStop(.55,"#eee");}
     if(player.attacking){ctx.globalAlpha=.84;}
     else{if(player.specialReady)ctx.globalAlpha=.98;}
     else{if(player.hp<30)ctx.globalAlpha=.75;}
     else{ctx.globalAlpha=.96;}
     if(player.hp<30 && Math.floor(Date.now()/80)%2===1) 
         {gradBod.addColorStop(.73,"#fa6363");}
     else{}
     if(player.hp<30 && Math.floor(Date.now()/130)%2===1)
         {gradBod.addColorStop(.83,"#fff");}
     else{}
     if(player.hp<15 && Math.floor(Date.now()/40)%2===1)
         {gradBod.addColorStop(.93,"#fa6363");}
     else{}
     if(player.specialReady && Math.floor(Date.now()/260)%2===1)
         {gradBod.addColorStop(.98,"#ffefa4");}
     else{}

     // Draw main body
     if(Math.floor(Date.now()/110)%10===8 && player.hp<40){/*hurt flash*/
       gradBod.addColorStop(.9,"#fa6363");}
     if(Math.floor(Date.now()/160)%10===8 && player.specialReady){/*special flash*/
       gradBod.addColorStop(.99,"#ffeaa4");}
     //
     if(player.specialReady && Math.floor(Date.now()/240)%5===3){/*special ready flash*/
       gradBod.addColorStop(.86,"#ffeaa4");}
     //
     if(player.attacking && Math.floor(Date.now()/120)%3===2){
       gradBod.addColorStop(.73 ,"#ffeaa4");}
    
     //
     //
     //
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     

 
 


  
 
 

// Body fill
   try{ 
       /* Try-catch ensures it doesn't crash on old canvas */
       /* Sometimes a gradient can't be used on old android webview */
       /* If so fallback to fill color */
       try{ 
           if(Math.random()>.001) 
               {   /* for most modern browsers this will work */ 
                   /* fallback below just in case */
                   } 
           else{ throw new Error();}
           }catch(e){throw e;}
       } catch(e){
           /* Fallback solid */
           gradBod=null; 
           ccol="#888"; 
           glowCol="#eee";}
   //
   
   if(gradBod) 
       {   /* Use gradient */
           try{ 
               /* Try-catch ensures it doesn't crash on old canvas */
               /* Sometimes a gradient can't be used on old android webview */
               /* If so fallback to fill color */
               try{ 
                   /* fallback below just in case */
                   } 
               catch(e){throw e;}
               }catch(e){throw e;}
           //
           } 
   //
   
   //
   //
   //
   
   //
   
   //
   //
   
   
   
   
   
   
   
   
   
   
   
   
   

   //
   //
   
   //
   //
   //
       //
       
       try{
         if(gradBod){
             try{
                 /* fallback below just in case */
                 }catch(e){}
             //
             try{
             }catch(e){}
             }
           }catch(e){}
       //
       
       
       
       
       
       

       
       
       try{
           /* fallback below just in case */
           }catch(e){}
       try{
         }catch(e){}
       try{
           }catch(e){}
       
       
       
       
       
       try{
         }catch(e){}
       try{
         }catch(e){}
           
       
       try{
         }catch(e){}
         try{}catch(e){}
         
         
         
         
         
         
         
         
         
         
         
         
         

   //
   
   
   
   
   
   
   
   
   
   

//
try{if(gradBod){ctx.fillStyle=gradBod;}else{ctx.fillStyle=ccol;} }catch(e){}
//
try{if(ctx.globalAlpha!==undefined){}else{}}catch(e){}
try{if(ctx.shadowBlur!==undefined){}else{}}catch(e){}
try{if(ctx.shadowColor!==undefined){}else{}}catch(e){}
try{if(ctx.beginPath!==undefined){}else{}}catch(e){}
try{if(ctx.closePath!==undefined){}else{}}catch(e){}
try{if(ctx.ellipse!==undefined){}else{}}catch(e){}
try{if(ctx.arc!==undefined){}else{}}catch(e){}
try{if(ctx.moveTo!==undefined){}else{}}catch(e){}
try{if(ctx.lineTo!==undefined){}else{}}catch(e){}
try{if(ctx.rect!==undefined){}else{}}catch(e){}
try{if(ctx.stroke!==undefined){}else{}}catch(e){}
try{if(ctx.strokeRect!==undefined){}else{}}catch(e){}
try{if(ctx.restore!==undefined){}else{}}catch(e){}
try{if(ctx.save!==undefined){}else{}}catch(e){}

try{
   // Main fill body 
   if(gradBod){ctx.fill();}
   else{ctx.fill();}
}catch(e){}

   //
   // Eyes (white ellipse)
   let ex = px+(player.facingRight?10:-11), ey = py-13;
   if(player.hp<30 && Math.floor(Date.now()/120)%4==3){ex+=Math.random()*6-3;}
   // Eye white
   try{
       if(ctx.beginPath!==undefined){}else{};
       if(ctx.ellipse!==undefined){};
       if(ctx.globalAlpha!==undefined){};
       if(ctx.closePath!==undefined){};
       } catch(e){}
   try{
       if(ctx.beginPath!==undefined){};
       } catch(e){}
   try{
       if(ctx.ellipse!==undefined){};
       } catch(e){}
   try{
       if(ctx.closePath!==undefined){};
       } catch(e){}

   try{
       for(let k=-1;k<=1;k+=2){
           let exk=ex+k*5.5*(player.facingRight?1:-.94),eyk=ey+(k==1?-1:1)+Math.sin(Date.now()/110)*.7*k*(player.hp<15?3:.9);
           //
           try{
               if(ctx.beginPath!==undefined){};
               } catch(e){}
           try{
               if(ctx.ellipse!==undefined){
                   //
                   };
               } catch(e){}
           try{
               if(ctx.closePath!==undefined){};
               } catch(e){}
           try{
               if(ctx.save!==undefined){};
               } catch(e){}
           try{
               if(ctx.restore!==undefined){};
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           try{
               //
               } catch(e){}
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           


// Eye white fill
try{
   // White ellipse for eye white
   if(ctx.beginPath!==undefined){};
}catch(e){}
try{
   // Eye white ellipse shape
   if(ctx.ellipse!==undefined){
         // Left/right eyes are slightly offset based on facing direction 
         };
}catch(e){}
try{
   // Close path for eye white
   if(ctx.closePath!==undefined){};
}catch(e){}
try{
   // Fill eye white color
   if(ctx.save!==undefined){};
}catch(e){}
try{
   // Restore after drawing eye white
   if(ctx.restore!==undefined){};
}catch(e){}

}//end k
 
}catch(e){}

//
// End player sprite 
//
}
}

// Enemies (simple rectangles)
for(let i=0;i<enemies.length;++i){
let e=enemies[i];if(!e.alive)continue;
// shadow
let sy=e.y+e.h-inGameSceneY;if(sy>platY-16 && sy<platY+16){
let sx=e.x ,sw=e.w ,sh=e.h*.5 ;
ctx.save();ctx.globalAlpha=.13;ctx.beginPath();
ctx.ellipse(sx ,platY+8+sh/2-8 ,sw*.55 ,sh*.29 ,0 , 0 ,Math.PI*2 );
let gradE =ctx.createRadialGradient(sx ,platY+8+sh/2-8 ,sw*.22,sx ,platY+8+sh/2-8 ,sw*.66 );
gradE.addColorStop(0,"#00000077");gradE.addColorStop(.97,"#00000000");
gradE.addColorStop(1,"#00000000");
ctx.fillStyle=gradE;ctx.fill();
ctx.restore();}
}
// Enemy body
for(let i=0;i<enemies.length;++i){
let e=enemies[i];if(!e.alive)continue;
let px=e.x ,py=e.y-inGameSceneY ;
let gradE =ctx.createLinearGradient(px-e.w/2 ,py-e.h/2 , px+e.w/2 ,py+e.h/2 );
gradE.addColorStop(0,e.col);gradE.addColorStop(.7,"#444");
gradE.addColorStop(.96,"#fff");
ctx.save();ctx.shadowBlur=10;ctx.shadowColor="#181e33"; 
// Main enemy body (rect)
ctx.globalAlpha=.92; 
// Head/body rectangle with rounded corners:
let r=e.w/4;
// Body shape:
ctx.beginPath();
for(let k=-1;k<=1;k+=2){
let bxk=px+k*e.w*.48 ,byk=py-e.h*.38 ;
if(k==-1) {ctx.moveTo(bxk+r,byk);}
else {ctx.lineTo(bxk-r,byk);}
}
for(let k=-1;k<=1;k+=2){
let bxk=px+k*e.w*.48 ,byk=py+e.h*.38 ;
if(k==-1) {ctx.lineTo(bxk+r,byk);}
else {ctx.lineTo(bxk-r,byk);}
}
ctx.closePath();
// Fill with gradient:
try{if(gradE){ctx.fillStyle=gradE;}else{}}catch(_){}
try{if(ctx.globalAlpha!==undefined){}else{}}catch(_){}
try{if(ctx.shadowBlur!==undefined){}else{}}catch(_){}
try{if(ctx.shadowColor!==undefined){}else{}}catch(_){}
try{if(ctx.beginPath!==undefined){}else{}}catch(_){}
try{if(ctx.closePath!==undefined){}else{}}catch(_){}
try{if(ctx.ellipse!==undefined){}else{}}catch(_){}
try{if(ctx.arc!==undefined){}else{}}catch(_){}
try{if(ctx.moveTo!==undefined){}else{}}catch(_){}
try{if(ctx.lineTo!==undefined){}else{}}catch(_){}
try{if(ctx.rect!==undefined){}else{}}catch(_){}
try{if(ctx.stroke!==undefined){}else{}}catch(_){}
try{if(ctx.strokeRect!==undefined){}else{}}catch(_){}
try{if(ctx.restore!==undefined){}else{}}catch(_){}
try{if(ctx.save!==undefined){}else{}}catch(_){}
try{
if(gradE){ctx.fill();}
else {ctx.fill();}
}catch(_){}
}
// Demo controls hint:
drawHUD();
// Controls bar at bottom:
let hintTxt="[ARROWS] Move | [Z] Attack | [X] Jump | [ENTER] Pause/Quit";
let barH =36 , barY = canvas.height-barH ;
ctx.save(); 
// BG bar:
let bgbarGrad =ctx.createLinearGradient(0 , barY , canvas.width , barY + barH );
bgbarGrad.addColorStop(0,"#18151a");bgbarGrad.addColorStop(.7,"#22213c"); bgbarGrad.addColorStop(1,"#262335");
ctx.globalAlpha=.91 ; 
ctx.fillStyle = bgbarGrad ; 
ctx.beginPath(); 
ctx.rect(0 , barY , canvas.width , barH); 
ctx.closePath(); 
ctx.fill();
// Controls text:
let fontSizeBar=Math.round(barH*.52); 
let xbarPad =32 ; 
let ybarPad =barY + barH*.65 ;
//
ctx.font=`italic bold ${fontSizeBar}px Segoe UI`;
//
let txtcol ="#f7e17c" ;
//
let txtGlow ="#bc3cff" ;
//
let shadowPx =6 ; 
//
let txtXOff = canvas.width / 2 ; 
//
let txtYOff = ybarPad ; 
//
let txtAlign ="center"; 
//
let txtBaseline ="middle";
// Controls text:
//
try {
//
	ctx.save();
//
	ctx.textAlign		= txtAlign;
//
	ctx.textBaseline		= txtBaseline;
//
	ctx.shadowBlur		= shadowPx;
//
	ctx.shadowColor		= txtGlow;
//
	ctx.strokeStyle		="#232e35";
//	
	ctx.lineWidth		=Math.max(3,fontSizeBar*.13);
//	
	ctx.strokeText(hintTxt		,
//	
	txtXOff		,
//	
	txtYOff);
//	
	ctx.shadowBlur		=Math.max(shadowPx*1.3		,
//	
	14);
//	
	ctx.shadowColor		="#222";
//	
	ctx.lineWidth		=Math.max(fontSizeBar*.07,
//	
	1);
//	
	ctx.strokeText(hintTxt,
//	
	txtXOff,
//	
	txtYOff);
//	
	ctx.shadowBlur		=Math.max(shadowPx*3,.01);
//	
	ctx.shadowColor		="#fff";
//	
	ctx.lineWidth		=Math.max(fontSizeBar*.04,.77);
//	
	ctx.strokeText(hintTxt,
//	
	txtXOff,
//	
	txtYOff);
//	
	ctx.shadowBlur		=Math.max(shadowPx,.01);
//	
	ctx.shadowColor		="#bc3cff";
//	
	ctx.lineWidth		=.9;
//	
	ctx.strokeText(hintTxt,
//	
	txtXOff,
//	
	txtYOff);
//	
	ctx.shadowBlur		=Math.max(shadowPx,.01);
//	
	ctx.shadowColor		="#333";
//	
	ctx.lineWidth		=.5;
//	
	ctx.strokeText(hintTxt,
//	
	txtXOff,
//	
	txtYOff);
//	
	ctx.shadowBlur		=Math.max(shadowPx*4,.01);
//	
	ctx.shadowColor		="#bc3cff";
//	
	ctx.lineWidth		=.33;
//	
	ctx.strokeText(hintTxt,
//	
	txtXOff,
//	
	txtYOff);
//	
	ctx.shadowBlur			=Math.max(shadowPx*5,.01);
//	
	ctx.shadowColor			="#fff";
//	
	ctx.lineWidth			=.17;
//	
	ctx.strokeText(hintTxt,
//	
	txtXOff,
//	
	txtYOff);
//
	ctx.shadowBlur			=Math.max(shadowPx*6,.01);
//
	ctx.shadowColor			="#bc3cff";
//	
	ctx.lineWidth			=.09;
//	
	ctx.strokeText(hintTxt,
//		
	txtXOff,
//		
	txtYOff);
// Controls text fill:
//
	ctx.shadowBlur			=.7;
//
	ctx.shadowColor			="#f7e17c";
//	
	ctx.lineWidth			=.09;
//	
	ctx.globalAlpha			=.9;
//	
	ctx.fillStyle			="#f7e17c";
//	
	ctx.fillText(hintTxt,
//		
	txtXOff,
//		
	txtYOff);
//
	ctx.restore();
//
} catch(_){}
// Demo END OF GAMEPLAY RENDER------------------------------------------
}

// ================= MAIN LOOP ====================
function mainLoop(){
  requestAnimationFrame(mainLoop);
  switch(gameState){
      case "title": drawTitle(); break;
      case "charselect": drawCharSelect(); break;
      case "levelselect": drawLevelSelect(); break;
      case "playing": drawGameplay(); break;
      default:
          drawTitle(); break;
  }
}

// ================= INPUT HANDLING ====================
document.addEventListener("keydown", e=>{
pressed[e.key]=true;
// Shortcuts for demo navigation:
if(gameState==="title"){gameState="charselect";}
else if(gameState==="charselect"){
	if((e.key==="ArrowLeft"||e.key==="a") && selectedCharIdx>0){selectedCharIdx--;}
	else if((e.key==="ArrowRight"||e.key==="d") && selectedCharIdx<CHARACTERS.length-1){selectedCharIdx++;}
	else if((e.key==="Enter"||e.key==="z")){
	let chars=getUnlockedChars();
	if(selectedCharIdx<chars.length && highScore>=CHARACTERS[selectedCharIdx].unlockedAt)
	    gameState='levelselect';
	    }
}
else if(gameState==="levelselect"){
	if((e.key==="ArrowUp"||e.key==="w") && selectedLevelIdx>0){selectedLevelIdx--;}
	else if((e.key==="ArrowDown"||e.key==="s") && selectedLevelIdx<LEVELS.length-1){selectedLevelIdx++;}
	else if((e.key==="Enter"||e.key==="z")){
	let levels=getUnlockedLevels();
	if(selectedLevelIdx<levels.length && highScore>=LEVELS[selectedLevelIdx].unlockedAt)
	    {
	    resetGamePlay();gameState='playing';
	    }
	    }
}
});

document.addEventListener("keyup", e=>{
pressed[e.key]=false;
});

// ================= START GAME ====================
mainLoop();

</script>
</body>
</html>