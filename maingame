<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <style>
    html, body { margin:0; padding:0; background:#18121a;}
    canvas { display:block; margin:0 auto; background:#18121a;}
    body { overflow:hidden; }
    #lorePopup {
      position:absolute; left:50%; top:30%; transform:translate(-50%,-30%);
      background:#232e35; border:4px solid #ffb347; color:#fff; z-index:2;
      padding:32px; display:none; font-family:"Segoe UI",sans-serif; border-radius:20px;
      min-width:340px; min-height:120px;
      box-shadow:0 8px 32px #000a;
      text-align:center;
    }
  </style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="600"></canvas>
<div id="lorePopup"></div>
<script>
// ====== GAME DATA ======

const CHARACTERS = [
  { name: "Korok", color: "#ff7200", hp:120, speed:4.5, atk:14, unlockedAt:0 },
  { name: "Oros", color: "#18d860", hp:80, speed:6.3, atk:10, unlockedAt:10000 },
  { name: "Cercee", color: "#bc3cff", hp:90, speed:6.2, atk:11, unlockedAt:25000 },
  { name: "Ironbeard", color: "#88c6ff", hp:130, speed:3.9, atk:15, unlockedAt:50000 },
  { name: "Ignir", color: "#ff1a1a", hp:70, speed:7.2, atk:8, unlockedAt:100000 },
  { name: "Voss", color: "#9300c2", hp:100, speed:5.8, atk:18, unlockedAt:200000 }
];

const LEVELS = [
  { name:"Frozen Wastes", scenes:[
    { bg:"frozen_wastes_1.png", color:"#2e3a5a", lore:"The open tundra of Solis." },
    { bg:"frozen_wastes_2.png", color:"#273548", lore:"Ice fissures cut through the wastes." },
    { bg:"frozen_wastes_3.png", color:"#222831", lore:"Ruined gates of the Ice Cave—miniboss awaits within." }
  ], unlockedAt:0 },
  { name:"Rootrealms", scenes:[
    { bg:"rootrealms_1.png", color:"#234a33", lore:"Lush jungle beneath the ice—Uterra's last refuge." },
    { bg:"rootrealms_2.png", color:"#133f22", lore:"Twisted roots block your path... corrupted life pulses here." }
  ], unlockedAt:25000 }
];

// ====== CANVAS & STATE ======
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

let gameState = "title"; // title -> charselect -> levelselect -> playing
let charIdx = 0, levelIdx = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");

// ====== DRAW HELPERS ======
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 22px Segoe UI";
  ctx.textAlign="center";ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}

// ====== SCREENS ======
function drawTitle() {
  ctx.fillStyle="#191723";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  // Animated SolForge
  ctx.save();
  let t=Date.now()/800;
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#9d2cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();

  ctx.font="bold 46px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.font="bold italic 36px Segoe UI";
  ctx.fillStyle="#fff";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
  ctx.shadowBlur=0;

  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

  let blink=(Math.floor(Date.now()/500)%2)==0;
  if(blink){
      ctx.font="bold italic 28px Segoe UI";
      ctx.fillStyle="#fff";
      ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }
}

function drawCharSelect() {
  ctx.fillStyle="#262335";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing=110,x0=canvas.width/2-(CHARACTERS.length-1)*spacing/2;

  for(let i=0;i<CHARACTERS.length;++i){
    let x=x0+i*spacing,y=200,r=48;
    let isUnlocked = highScore >= CHARACTERS[i].unlockedAt;
    // Portrait
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.12;
    ctx.strokeStyle="#fff";ctx.lineWidth=(i==charIdx)?7:3;ctx.stroke();

    // Faction color
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
    ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    // Char initial
    ctx.globalAlpha=isUnlocked?1:.38;ctx.font="bold italic 38px Segoe UI";
    ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);

    // Info
    if(i==charIdx){
      if(!isUnlocked){
        ctx.font="italic bold 18px Segoe UI";ctx.fillStyle="#ffb347";
        ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt+" pts",x,y+r+44);
      } else {
        ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
        ctx.fillText(CHARACTERS[i].name,x,y+r+44);
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
      }
    }
    ctx.restore();
  }
}

function drawLevelSelect() {
  ctx.fillStyle="#232e35";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Select Level",canvas.width/2,64);

  let spacing=70,y0=140;

  for(let i=0;i<LEVELS.length;++i){
    let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
    let isUnlocked = highScore >= LEVELS[i].unlockedAt;

    // BG box
    ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
    ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==levelIdx)?4:2;
    ctx.strokeRect(x,y,w,h);

    // Preview BG color block for demo
    if(isUnlocked){
      ctx.fillStyle=LEVELS[i].scenes[0].color || "#222";
      ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
    }

    // Level name
    ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
    ctx.fillStyle=isUnlocked?"#fff":"#888";
    ctx.fillText(LEVELS[i].name,x+18,y+33);

    // Lock info
    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
      ctx.textAlign="center";
      ctx.fillText("Unlocks @ "+LEVELS[i].unlockedAt,x+w/2,y+h+23);
    }

    // Select button if unlocked & selected
    if(isUnlocked && i==levelIdx){
      drawButton(x+w+14,y+6,92,38,"PLAY",true);
    }
    ctx.restore();
  }
}

function drawGameplay() {
   // DEMO vertical slice only!
   let scene = LEVELS[levelIdx].scenes[0];
   // Draw BG (placeholder)
   ctx.fillStyle = scene.color || "#444";
   ctx.fillRect(0,0,canvas.width,canvas.height);

   // HUD
   ctx.font = "bold italic 26px Segoe UI";
   ctx.textAlign = "left"; 
   ctx.strokeStyle="#000";ctx.lineWidth=4;
   let playerHP = CHARACTERS[charIdx].hp;
   let score = highScore; // For demo only

   // Top bar (score/health)
   ctx.save();ctx.globalAlpha=.84;
   ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,44);ctx.restore();

   // Score
   ctx.strokeText("SCORE:",20,34);ctx.fillStyle="#ffb347";ctx.fillText("SCORE:",20,34);
   ctx.strokeText(""+score.toLocaleString(),140,34);ctx.fillStyle="#fff";ctx.fillText(""+score.toLocaleString(),140,34);

   // Health bar
   let hpW = Math.max(120 * (playerHP/CHARACTERS[charIdx].hp),1);
   ctx.strokeText("HEALTH:",270,34);ctx.fillStyle="#f7e17c";ctx.fillText("HEALTH:",270,34);
   // Health bar
   ctx.save();ctx.strokeStyle="#602f07";ctx.lineWidth=4;
   ctx.strokeRect(410,16,hpW+8,24);
   ctx.fillStyle="#ff4d35";ctx.globalAlpha=.8;ctx.fillRect(414,20,hpW,16);
   ctx.restore();

   // Player (placeholder)
   let px = canvas.width/2-24;
   let py = canvas.height-120;
   let c = CHARACTERS[charIdx];
   ctx.save();
   // Shadow
   ctx.globalAlpha=.15;ctx.beginPath();ctx.ellipse(px+21,py+68,24,12,0,0,Math.PI*2);ctx.fillStyle="#000";ctx.fill();
   // Body
   ctx.globalAlpha=1;ctx.beginPath();ctx.ellipse(px+21,py+36,22,32,0,0,Math.PI*2);ctx.closePath();
   ctx.fillStyle=c.color||"#fff";ctx.shadowColor="#fff";ctx.shadowBlur=16;ctx.fill();
   // Face
   ctx.shadowBlur=0;ctx.beginPath();ctx.arc(px+21,py+28,12.5,0,Math.PI*2);ctx.closePath();ctx.fillStyle="#fff";ctx.globalAlpha=.8;ctx.fill();
   // Initial
   ctx.globalAlpha=1;ctx.font="bold italic 30px Segoe UI";ctx.textAlign="center";
   ctx.fillStyle=c.color||"#fff";
   ctx.shadowColor="#18121a";ctx.shadowBlur=4;
   ctx.fillText(c.name[0],px+21,py+41);
   ctx.restore();

   // Controls (bottom)
   ctx.font="bold italic 19px Segoe UI";
   let msg="[←][→] Move     [Space] Jump     [X] Attack     [ESC] Pause";
   let w=ctx.measureText(msg).width;
   let y=canvas.height-32;
   ctx.save();ctx.globalAlpha=.7;ctx.fillStyle="#232e35";ctx.fillRect((canvas.width-w)/2-12,y-26,w+24,36);ctx.restore();
   ctx.textAlign="center";ctx.fillStyle="#fff";
   ctx.shadowColor="#000";ctx.shadowBlur=10;
   ctx.fillText(msg,canvas.width/2,y);

}

// ====== MAIN LOOP ======
function mainLoop() {
  switch(gameState){
    case "title": drawTitle(); break;
    case "charselect": drawCharSelect(); break;
    case "levelselect": drawLevelSelect(); break;
    case "playing": drawGameplay(); break;
    default:
      // fallback blank state
      ctx.clearRect(0,0,canvas.width,canvas.height);
      break;
  }
  requestAnimationFrame(mainLoop);
}

// ====== INPUT HANDLING ======
window.addEventListener("keydown", function(e){
 if(gameState==="title"){
     gameState="charselect";
     return;
 }
 if(gameState==="charselect"){
     if(e.key==="ArrowLeft"){ charIdx=Math.max(charIdx-1,0);}
     else if(e.key==="ArrowRight"){ charIdx=Math.min(charIdx+1,CHARACTERS.length-1);}
     else if(e.key==="Enter"||e.key===" "){
       if(highScore>=CHARACTERS[charIdx].unlockedAt){ gameState="levelselect";}
     }
     return;
 }
 if(gameState==="levelselect"){
     if(e.key==="ArrowUp"){ levelIdx=Math.max(levelIdx-1,0);}
     else if(e.key==="ArrowDown"){ levelIdx=Math.min(levelIdx+1,LEVELS.length-1);}
     else if(e.key==="Enter"||e.key===" "){
       if(highScore>=LEVELS[levelIdx].unlockedAt){ gameState="playing";}
     }
     return;
 }
});

// ====== START GAME ======
mainLoop();

</script>
</body>
</html>