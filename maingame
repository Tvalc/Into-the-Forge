<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <style>
    body { margin:0; background: #000; }
    canvas { display:block; margin:0 auto; background:#18151c; }
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center; }
  </style>
</head>
<body>
<div id="gameContainer">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
</div>
<script>
// ====== GAME DATA & DRAWING FUNCTIONS ======

// Characters (expand as needed)
const CHARACTERS = [
  { name: "Korok", faction: "Tempys", unlockedAt: 0, color: "#ff7200" },
  { name: "Oros", faction: "Uterra", unlockedAt: 10000, color: "#18d860" },
  { name: "Cercee", faction: "Nekrium", unlockedAt: 25000, color: "#bc3cff" },
  { name: "Ironbeard", faction: "Alloyin", unlockedAt: 50000, color: "#88c6ff" },
  { name: "Ignir", faction: "Tempys", unlockedAt: 100000, color: "#ff1a1a" },
  { name: "Voss", faction: "Nekrium", unlockedAt: 200000, color: "#9300c2" }
];
const LEVELS = [
  { name:"The Frozen Wastes", unlockedAt:0 },
  { name:"The Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 }
];
const SCENE_BACKGROUNDS = ["#2e3a5a", "#273548", "#222831"];

// ============ GAME STATE ===========
let gameState = "title"; // title, charselect, levelselect, playing, pause, win, lose
let highScore = Number(localStorage.getItem("forgeborn_highscore") || "0");
let currentScore = 0;
let selectedCharIdx = 0;
let selectedLevelIdx = 0;

// Gameplay state
let player = null;
let playerHealth = 100;
let inGameSceneY = 0;

// Controls
const keys = {};
window.addEventListener('keydown', e => { keys[e.code]=true; });
window.addEventListener('keyup',   e => { keys[e.code]=false; });

// ============ CANVAS ============
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// ============ UTILS ===========
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";
  ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}
function getUnlockedChars(){ return CHARACTERS.filter(c=>highScore>=c.unlockedAt); }
function getUnlockedLevels(){ return LEVELS.filter(l=>highScore>=l.unlockedAt); }

// ============ TITLE SCREEN ============
function drawTitle(){
    let grad=ctx.createLinearGradient(0,0,0,canvas.height);
    grad.addColorStop(0,"#191723");
    grad.addColorStop(1,"#502a11");
    ctx.fillStyle=grad;ctx.fillRect(0,0,canvas.width,canvas.height);

    // Animated Solforge Tower
    ctx.save();
    let t=Date.now()/800;
    ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
    ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
    ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
    ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
    // Corruption effect
    ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
    ctx.fillStyle="#9d2cff";ctx.beginPath();
    ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
    ctx.globalAlpha=1;ctx.restore();

    // Title
    ctx.fillStyle="#ffb347";
    ctx.font="bold 46px Segoe UI";
    ctx.textAlign="center";
    ctx.shadowColor="#602f07";ctx.shadowBlur=14;
    ctx.fillText("FORGEBORN:",canvas.width/2,110);
    ctx.fillStyle="#fff";
    ctx.font="bold italic 36px Segoe UI";
    ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
    ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
    ctx.shadowBlur=0;

    // High Score
    ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
    ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

    // Prompt
    let blink=(Math.floor(Date.now()/500)%2)==0;
    if(blink){
        ctx.font="bold italic 28px Segoe UI";
        ctx.fillStyle="#fff";
        ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
    }
}

// ============ CHARACTER SELECT ============
function drawCharSelect(){
    // BG
    ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

    let chars=CHARACTERS;
    let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;

    for(let i=0;i<chars.length;++i){
        let x=x0+i*spacing,y=180,r=48;
        let isUnlocked=highScore>=chars[i].unlockedAt;
        // Portrait circle
        ctx.save();
        ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
        ctx.globalAlpha=isUnlocked?1:.15;
        ctx.strokeStyle="#fff";ctx.lineWidth=(i==selectedCharIdx)?7:3;ctx.stroke();
        // Faction color
        ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
        ctx.fillStyle=chars[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
        if(!isUnlocked){
            ctx.globalAlpha=.5;
            ctx.fillStyle="#222";
            ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();
        }
        // Char initial
        ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText(chars[i].name[0],x,y+7);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
            ctx.fillText("Unlocks @ "+chars[i].unlockedAt,x,y+r+24);
        }
        if(i==selectedCharIdx){
            ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
            ctx.fillText(chars[i].name+" ("+chars[i].faction+")",x,y+r+44);
            if(isUnlocked){
                drawButton(x-48,y+r+56,96,36,"SELECT",true);
            }
        }
        ctx.restore();
    }
}

// ============ LEVEL SELECT ============
function drawLevelSelect(){
    // BG
    ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Select Level",canvas.width/2,64);

    let levels=LEVELS;
    let spacing=70,y0=140;

    for(let i=0;i<levels.length;++i){
        let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
        let isUnlocked=highScore>=levels[i].unlockedAt;

        // BG box
        ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
        ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevelIdx)?4:2;
        ctx.strokeRect(x,y,w,h);
        // Preview BG color block for demo
        if(isUnlocked){
            ctx.fillStyle=SCENE_BACKGROUNDS[i%SCENE_BACKGROUNDS.length];
            ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
        }

        // Level name
        ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
        ctx.fillStyle=isUnlocked?"#fff":"#888";
        ctx.fillText(levels[i].name,x+18,y+33);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
            ctx.textAlign="center";
            ctx.fillText("Unlocks @ "+levels[i].unlockedAt,x+w/2,y+h+23);
        }

        // Select button if unlocked & selected
        if(isUnlocked && i==selectedLevelIdx){
            drawButton(x+w+14,y+6,92,38,"PLAY",true);
        }
        ctx.restore();
    }
}

// ============ GAMEPLAY ============
function startGameplay() {
  const charObj = getUnlockedChars()[selectedCharIdx];
  player = {
      x:canvas.width/2,
      y:120,
      vx:0,
      vy:0,
      w:42,h:68,
      col:charObj.color,
      onGround:false,
      facingRight:true,
      speed:5,
      gravity:.7,
      jumpV:-13,
      hp:100,
      maxhp:100,
      name:charObj.name,
      faction:charObj.faction,
      spriteFrame:0,
      jumpLock:false
  };
  playerHealth = player.hp;
}

function updateGameplay(dt) {
  // Controls
  let left = keys['ArrowLeft']||keys['KeyA'];
  let right = keys['ArrowRight']||keys['KeyD'];
  let jump = keys['Space']||keys['ArrowUp']||keys['KeyW'];

  // Horizontal movement
  let moved=false;
  if(left) { player.vx=-player.speed; player.facingRight=false; moved=true;}
  else if(right) { player.vx=player.speed; player.facingRight=true; moved=true;}
  else player.vx*=.7;

  player.x += player.vx;

  // Vertical physics (jump/gravity/platform)
  if(jump && player.onGround && !player.jumpLock) {
      player.vy = player.jumpV; 
      player.onGround=false; 
      player.jumpLock=true;
  }
  if(!jump) player.jumpLock=false;

  player.vy += player.gravity;
  player.y += player.vy;

  // Simple ground (bottom platform)
  let groundY = canvas.height-80;
  if(player.y+player.h/2 > groundY){
      player.y = groundY-player.h/2;
      player.vy = 0;
      player.onGround=true;
  }else{
      player.onGround=false;
  }

  // Wall boundaries
  if(player.x-player.w/2<40) player.x=40+player.w/2;
  if(player.x+player.w/2>canvas.width-40) player.x=canvas.width-40-player.w/2;

}

function drawGameplay() {
  // BG (scene color)
  let bgcol = SCENE_BACKGROUNDS[selectedLevelIdx%SCENE_BACKGROUNDS.length];
  ctx.fillStyle=bgcol;ctx.fillRect(0,0,canvas.width,canvas.height);

  // Simple snow ground
  ctx.fillStyle="#dde6ff";ctx.fillRect(0,canvas.height-60,canvas.width,60);
  
  // Player
  if(player) {
      // Shadow
      ctx.save();
      ctx.globalAlpha=.28;
      ctx.beginPath();ctx.ellipse(player.x,player.y+player.h/2+12,player.w/2.1,10,0,0,Math.PI*2);ctx.closePath();
      ctx.fillStyle="#000";ctx.fill();
      ctx.restore();

      // Body
      ctx.save();
      ctx.translate(player.x,player.y);
      if(!player.facingRight) {ctx.scale(-1,1);}
      // Torso
      ctx.beginPath();
      ctx.ellipse(0,10,player.w/2.3,player.h/2.1,0,Math.PI*2);
      ctx.closePath();
      ctx.fillStyle=player.col;
      ctx.globalAlpha=.92;
      ctx.shadowColor="#fff";ctx.shadowBlur=10;
      ctx.fill();
      // Head
      ctx.globalAlpha=1;
      ctx.shadowBlur=6;ctx.shadowColor="#ffe3b8";
      ctx.beginPath();ctx.arc(0,-player.h/3.1,player.w/3.4,0,Math.PI*2);ctx.closePath();ctx.fillStyle="#ffe3b8";ctx.fill();
      // Face detail (simple)
      ctx.strokeStyle="#222";ctx.lineWidth=3;ctx.globalAlpha=.45;
      if(player.facingRight) {
          ctx.beginPath();ctx.moveTo(6,-player.h/3.25);ctx.lineTo(10,-player.h/3.05);ctx.stroke();
      } else {
          ctx.beginPath();ctx.moveTo(-6,-player.h/3.25);ctx.lineTo(-10,-player.h/3.05);ctx.stroke();
      }
      // Faction stripe (chest)
      if(player.faction==="Tempys") {
          ctx.globalAlpha=.45;ctx.fillStyle="#ffd180"; 
          ctx.beginPath();ctx.arc(0,+10,(player.w*.27),Math.PI*.25,Math.PI*.85,false);ctx.lineTo(0,+14);ctx.closePath();ctx.fill();
          ctx.globalAlpha=1;
      }
      if(player.faction==="Nekrium") {
          // Purple sash
          ctx.globalAlpha=.35;ctx.strokeStyle="#bc3cff";ctx.lineWidth=7;
          ctx.beginPath();ctx.arc(0,+14,(player.w*.29),Math.PI*.60,-Math.PI*.60,false);ctx.stroke();
          ctx.globalAlpha=1;
      }
      if(player.faction==="Uterra") {
          // Green leaf badge
          ctx.globalAlpha=.7;ctx.beginPath();ctx.arc(-10,+7,(player.w*.11),Math.PI*-.15,Math.PI*.95,false);ctx.strokeStyle="#18d860";ctx.lineWidth=4;ctx.stroke();ctx.globalAlpha=1;
      }
      if(player.faction==="Alloyin") {
          // Blue plate highlight
          ctx.globalAlpha=.30;ctx.beginPath();ctx.arc(12,+8,(player.w*.15),Math.PI*.45,-Math.PI*.45,false);ctx.strokeStyle="#88c6ff";ctx.lineWidth=6;ctx.stroke();ctx.globalAlpha=1;
      }
      
      // Nameplate
      ctx.globalAlpha=.88; 
      ctx.font="bold italic 20px Segoe UI"; 
      let nmw = ctx.measureText(player.name).width;
      let nmy = -player.h/1.7 -16;
      let nmx = -nmw/2-8; 
      let nmh =28;
      if(nmw>30) { 
          // Name BG rect 
          ctx.save(); 
          ctx.globalAlpha=.18; 
          ctx.beginPath(); 
          roundRect(ctx,nmx,nmy,nmw+16,nmh+4,12); 
          ctx.closePath(); 
          if(player.faction==="Tempys")   {ctx.fillStyle="#ffd180";}
          else if(player.faction==="Nekrium"){ctx.fillStyle="#bc3cff";}
          else if(player.faction==="Uterra"){ctx.fillStyle="#18d860";}
          else if(player.faction==="Alloyin"){ctx.fillStyle="#88c6ff";}
          else{ctx.fillStyle="#fff";}
          ctx.fill(); 
          ctx.restore();
      }
      // Name text
      ctx.globalAlpha=1; 
      ctx.font="italic bold 20px Segoe UI";
      if(player.faction==="Tempys")   {ctx.fillStyle="#ffd180";}
      else if(player.faction==="Nekrium"){ctx.fillStyle="#bc3cff";}
      else if(player.faction==="Uterra"){ctx.fillStyle="#18d860";}
      else if(player.faction==="Alloyin"){ctx.fillStyle="#88c6ff";}
      else{ctx.fillStyle="#fff";}
      ctx.textAlign="center"; 
      ctx.textBaseline="top";
      ctx.shadowColor="#000"; 
      ctx.shadowBlur=4;
      ctx.fillText(player.name,0,-player.h/1.7 -8);

      // Restore context
      ctx.restore();
      
  }

  // HUD Top Bar (score/combo/hp)
  drawHUD();

}

// Rounded rectangle helper for nameplates etc.
function roundRect(ctx,x,y,w,h,r) {
    r=Math.min(r,w/2,h/2);
    ctx.moveTo(x+r,y);
    ctx.arcTo(x+w,y,w,y+h,r);
    ctx.arcTo(x+w,y+h,x,y+h,r);
    ctx.arcTo(x,y+h,x,y,r);
    ctx.arcTo(x,y,x+w,y,r);
}

// HUD Drawing (top bar)
function drawHUD() {
   // Bar BG
   let barH =36; 
   let yoff =20;
   // Score and high score left
   let leftX =24,rightX = canvas.width-24;

   // Health bar (bottom)
   let hpPerc = Math.max(0,(playerHealth/player.maxhp));
   let hpW = Math.floor(canvas.width * .32 * hpPerc);
   let hpX = canvas.width * .34;
   let hpY = canvas.height - barH -18;

   // Top bar BG (score/combo)
   ctx.save();
   // Top left (score)
   drawStatBox(leftX,yoff,"SCORE",currentScore,"#ffd180");
   drawStatBox(leftX+168,yoff,"HIGH",highScore,"#f7e17c");
   // Top right (combo placeholder)
   drawStatBox(rightX-185,yoff,"COMBO","-", "#bc3cff");
   drawStatBox(rightX-360,yoff,"LEVEL",LEVELS[selectedLevelIdx].name,"#88c6ff");
   
   // Health bar (bottom center)
   drawHealthBar(hpX,hpY,hpW,barH,hpPerc);

   // Player portrait (bottom left)
   drawPortraitHUD(CHARACTERS[selectedCharIdx],30,hpY);

   // Pause button placeholder (top right)
   drawPauseBtn(canvas.width-barH-12,yoff);

   // Mini-map placeholder (top left)
   drawMiniMap(18,yoff+barH+14);

   // Objective marker placeholder (bottom right)
   drawObjective(canvas.width-barH-10,hpY+barH);

   ctx.restore();
}
// Stat box helper for HUD top bar
function drawStatBox(x,y,label,value,color) {
   let w=160,h=34;
   // Box
   ctx.save();
   roundRect(ctx,x,y,w,h,15);
   ctx.globalAlpha=.18; 
   if(color) { 
       ctx.fillStyle=color; 
       } else { 
       ctx.fillStyle="#fff";
       }
   ctx.fill();
   // Label
   ctx.font="bold italic 13px Segoe UI";
   if(color) { 
       ctx.fillStyle=color; 
       } else { 
       ctx.fillStyle="#fff";
       }
   ; 
   let labY=y+4,valY=y+19;
   let valStr=(typeof value === "number"? value.toLocaleString(): value);
   let valFontSize=(valStr.length>8)? 'bold italic 15px Segoe UI':'bold italic 20px Segoe UI';
   let align='left';
   if(label==="LEVEL") align='right';
   if(label==="COMBO") align='right';
   //
   let valX=x+(align==='right'?w-10:w/2);
   let labX=x+(align==='right'?w-10:w/2);

   //
   //
   
   //
   
   //
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
    
   
   
   
   
   

   
   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
};
drawStatBox(ctx,x,y,w,h,label,value,color) {
     roundRect(ctx,x,y,w,h,r);
     ...
}
// Health bar helper for HUD bottom bar
function drawHealthBar(x,y,w,h,pct){
     ...
}
// Player portrait HUD in bottom left
function drawPortraitHUD(char,x,y){
     ...
}
// Pause button HUD in top right
function drawPauseBtn(x,y){
     ...
}
// Mini-map HUD in top left corner
function drawMiniMap(x,y){
     ...
}
// Objective marker bottom right placeholder
function drawObjective(x,y){
     ...
}

// ===========================
// === MAIN LOOP & INPUT ====
// ===========================
let lastT = performance.now();
function gameloop(t) {
    let dt=Math.min((t-lastT)/16.6666,2.5); lastT=t;

    // Update phase
    switch(gameState) {
        case 'playing':
            updateGameplay(dt);
            break;
    }

    // Draw phase
    switch(gameState) {
        case 'title':       drawTitle(); break;
        case 'charselect':  drawCharSelect(); break;
        case 'levelselect': drawLevelSelect(); break;
        case 'playing':     drawGameplay(); break;
        default:
            break;
    }

    requestAnimationFrame(gameloop);
}
requestAnimationFrame(gameloop);

// ===== INPUT HANDLING FOR NAVIGATION & STARTING GAMEPLAY =====

window.addEventListener('keydown', function(e){
    switch(gameState) {
     case 'title':
       gameState='charselect'; break;

     case 'charselect':
       if(e.code==='ArrowRight' || e.code==='KeyD') selectedCharIdx=Math.min(selectedCharIdx+1,getUnlockedChars().length-1);
       if(e.code==='ArrowLeft' || e.code==='KeyA') selectedCharIdx=Math.max(selectedCharIdx-1,0);
       if(e.code==='Enter' || e.code==='Space') gameState='levelselect';
       break;

     case 'levelselect':
       if(e.code==='ArrowDown' || e.code==='KeyS') selectedLevelIdx=Math.min(selectedLevelIdx+1,getUnlockedLevels().length-1);
       if(e.code==='ArrowUp' || e.code==='KeyW') selectedLevelIdx=Math.max(selectedLevelIdx-1,0);
       if(e.code==='Enter' || e.code==='Space') {
         startGameplay();
         gameState='playing';
       }
       break;

     case 'playing':
       if(e.code==='Escape') gameState='pause';
       break;

     case 'pause':
       if(e.code==='Escape') gameState='playing';
       break;

     default:
       break;
    }
});

// =================

</script>
</body>
</html>