<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    html,body { margin:0; padding:0; background:#18121a; }
    body { font-family: 'Segoe UI', Arial, sans-serif; overflow:hidden; }
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center; }
    canvas { display:block; background:#18121a; box-shadow:0 0 32px #222; }
    ::selection { background:#ffb34733; }
    .overlay-btn {
      position: absolute;
      left:50%; transform:translateX(-50%);
      background:linear-gradient(90deg,#ffb347,#ff7200);
      color:#fff;
      font-size:22px;
      font-family:'Segoe UI',Arial,sans-serif;
      border:none;border-radius:8px;
      padding:12px 38px;
      box-shadow:0 2px 16px #2227;
      cursor:pointer;
      margin-top:18px;
      letter-spacing:1px;
    }
    .overlay-btn:hover { background:linear-gradient(90deg,#ff9200,#bc3cff); }
    #overlay { position:absolute; left:0; top:0; width:100vw; height:100vh; display:none; z-index:99;}
  </style>
</head>
<body>
<div id="gameContainer" style="position:relative;">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="overlay"></div>
</div>
<script>
// =================== CONSTANTS & DATA ===================
const CHARACTERS = [
  { name:"Korok", faction:"Tempys", unlockedAt:0, color:"#ff7200" },
  { name:"Oros", faction:"Uterra", unlockedAt:10000, color:"#18d860" },
  { name:"Cercee", faction:"Nekrium", unlockedAt:25000, color:"#bc3cff" },
  { name:"Ironbeard", faction:"Alloyin", unlockedAt:50000, color:"#88c6ff" },
  { name:"Ignir", faction:"Tempys", unlockedAt:100000, color:"#ff1a1a" },
  { name:"Voss", faction:"Nekrium", unlockedAt:200000, color:"#9300c2" }
];
const LEVELS = [
  { name:"The Frozen Wastes", unlockedAt:0 },
  { name:"The Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 },
];
const SCENE_BACKGROUNDS = ["#2e3a5a", "#273548", "#222831"];
const GAME_WIDTH = 800, GAME_HEIGHT = 600;

// ============ STATE ============
let state = "title"; // title,charselect,levelselect,playing,pause,gameover
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let currentScore = 0;
let selectedCharIdx = 0;
let selectedLevelIdx = 0;
// Gameplay
let player=null,enemies=[],combo=0,comboTimer=0,playerHealth=100,sceneY=0;
let keys = {};
let lastFrame = Date.now();
let gameTimer = 0;
let overlay = document.getElementById("overlay");

// ============ CANVAS ============
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// ============ UTILITIES ============
function clamp(x,a,b){return Math.max(a,Math.min(b,x));}
function lerp(a,b,t){return a+(b-a)*t;}
function getUnlockedChars(){return CHARACTERS.filter(c=>highScore>=c.unlockedAt);}
function getUnlockedLevels(){return LEVELS.filter(l=>highScore>=l.unlockedAt);}
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";
  ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}

// =================== TITLE SCREEN ===================
function drawTitle(){
    // BG
    let grad=ctx.createLinearGradient(0,0,0,canvas.height);
    grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
    ctx.fillStyle=grad;ctx.fillRect(0,0,canvas.width,canvas.height);

    // Animated Solforge Tower
    ctx.save();
    let t=Date.now()/800;
    ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
    ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
    ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
    ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
    // Corruption effect
    ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
    ctx.fillStyle="#9d2cff";ctx.beginPath();
    ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
    ctx.globalAlpha=1;ctx.restore();

    // Title
    ctx.fillStyle="#ffb347";
    ctx.font="bold 46px Segoe UI";
    ctx.textAlign="center";
    ctx.shadowColor="#602f07";ctx.shadowBlur=14;
    ctx.fillText("FORGEBORN:",canvas.width/2,110);
    ctx.fillStyle="#fff";
    ctx.font="bold italic 36px Segoe UI";
    ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
    ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
    ctx.shadowBlur=0;

    // High Score
    ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
    ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

    // Prompt
    let blink=(Math.floor(Date.now()/500)%2)==0;
    if(blink){
        ctx.font="bold italic 28px Segoe UI";
        ctx.fillStyle="#fff";
        ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
    }
}

// =================== CHARACTER SELECT ===================
function drawCharSelect(){
    // BG
    ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

    let chars=CHARACTERS;
    let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;

    for(let i=0;i<chars.length;++i){
        let x=x0+i*spacing,y=180,r=48;
        let isUnlocked=highScore>=chars[i].unlockedAt;
        // Portrait circle
        ctx.save();
        ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
        ctx.globalAlpha=isUnlocked?1:.15;
        ctx.strokeStyle="#fff";ctx.lineWidth=(i==selectedCharIdx)?7:3;ctx.stroke();
        // Faction color
        ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
        ctx.fillStyle=chars[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
        if(!isUnlocked){
            ctx.globalAlpha=.5;ctx.fillStyle="#222";
            ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();
        }
        // Char initial
        ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText(chars[i].name[0],x,y+7);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
            ctx.fillText("Unlocks @ "+chars[i].unlockedAt,x,y+r+24);
        }
        if(i==selectedCharIdx){
            ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
            ctx.fillText(chars[i].name+" ("+chars[i].faction+")",x,y+r+44);
            if(isUnlocked){
                drawButton(x-48,y+r+56,96,36,"SELECT",true);
            }
        }
        ctx.restore();
    }
}

// =================== LEVEL SELECT ===================
function drawLevelSelect(){
    // BG
    ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Select Level",canvas.width/2,64);

    let levels=LEVELS;
    let spacing=70,y0=140;

    for(let i=0;i<levels.length;++i){
        let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
        let isUnlocked=highScore>=levels[i].unlockedAt;

        // BG box
        ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
        ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevelIdx)?4:2;
        ctx.strokeRect(x,y,w,h);
        // Preview BG color block for demo
        if(isUnlocked){
            ctx.fillStyle=SCENE_BACKGROUNDS[i%SCENE_BACKGROUNDS.length];
            ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
        }

        // Level name
        ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
        ctx.fillStyle=isUnlocked?"#fff":"#888";
        ctx.fillText(levels[i].name,x+18,y+33);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
            ctx.textAlign="center";
            ctx.fillText("Unlocks @ "+levels[i].unlockedAt,x+w/2,y+h+23);
        }

        // Select button if unlocked & selected
        if(isUnlocked && i==selectedLevelIdx){
            drawButton(x+w+14,y+6,92,38,"PLAY",true);
        }
        ctx.restore();
    }
}

// ================ GAMEPLAY SCENE (Vertical) ==================
function startGamePlay(){
    state="playing";
    player={
      x:GAME_WIDTH/2,
      y:80,
      vx:0,
      vy:0,
      w:42,h:68,
      col:getUnlockedChars()[selectedCharIdx].color,
      attacking:false,
      attackTimer:0,
      onGround:true,
      facingRight:true,
      comboTimer:null,
      spriteFrame:0,
      name:getUnlockedChars()[selectedCharIdx].name,
      jumpV:-9,
      speed:5,
      gravity:.7,
      hp:100,
      atkPower:9,
      specialReady:true
    };
    enemies=[];
    currentScore=0;
    combo=0;
    comboTimer=0;
    playerHealth=100;
    sceneY=0;
}

function spawnEnemy(){
   let ex=Math.random()*(GAME_WIDTH-120)+60;
   let ey=sceneY+Math.random()*180+320;
   let type=Math.random()<.8?"basic":"elite";
   enemies.push({
     x:ex,y:ey,vx:type==="basic"?Math.random()<.5?1:-1:Math.random()<.5?1.5:-1.5,
     vy:0,w:type==="basic"?38:54,h:type==="basic"?54:66,type:type,hp:type==="basic"?25:60,
     color:type==="basic"?"#d8eafe":"#bc3cff",atk:type==="basic"?6:13,cooldown:60,idleTimer:30,
     alive:true
   });
}

function drawGameplay(){
   // Simple vertical BG
   let bgCol = SCENE_BACKGROUNDS[selectedLevelIdx%SCENE_BACKGROUNDS.length];
   ctx.fillStyle = bgCol;
   ctx.fillRect(0,0,GAME_WIDTH,GAME_HEIGHT);

   // Draw "scene" - scrolling vertical arena
   let offsetY=-sceneY;
   // Draw simple ruins/platforms for flavor
   for(let i=1;i<8;++i){
      let py=i*120-40+offsetY;
      if(py>50 && py<GAME_HEIGHT-20){
         ctx.save();ctx.globalAlpha=.18+i*.03;
         ctx.fillStyle="#fff";ctx.fillRect(150+(i%3)*110,py,150-30*(i%2),12+i*1.6);ctx.restore();
      }
   }

   // Player logic & draw
   if(!player) return;

   // Movement & input
   if(keys["ArrowLeft"]||keys["a"]) player.vx=-player.speed; else if(keys["ArrowRight"]||keys["d"]) player.vx=player.speed; else player.vx*=.7;
   if((keys["ArrowUp"]||keys["w"])&&player.onGround){player.vy=player.jumpV;player.onGround=false;}
   player.x+=player.vx; player.y+=player.vy;

   // Gravity & ground check (bottom is y==GAME_HEIGHT-80+sceneY)
   if(player.y + player.h < sceneY+GAME_HEIGHT-80){player.vy+=player.gravity;}else{
     player.y = sceneY+GAME_HEIGHT-80-player.h; player.vy=0; player.onGround=true;
   }
   player.x = clamp(player.x,24,GAME_WIDTH-24-player.w);

   // Attacking/combat
   if(player.attacking && player.attackTimer>0) player.attackTimer--;
   if(player.attacking && player.attackTimer<=0) player.attacking=false;

   // Camera follows downward progress (vertical)
   sceneY = Math.max(0,player.y-80);

   // Draw player (simple rectangle w/face)
   ctx.save();
   let px = player.x, py = player.y-offsetY;
   ctx.translate(px+player.w/2,py+player.h/2);
   if(!player.facingRight)ctx.scale(-1,1);
   // Body
   ctx.globalAlpha=.94;ctx.shadowColor="#111";ctx.shadowBlur=7;
   ctx.strokeStyle="#fff";ctx.lineWidth=4;
   ctx.beginPath();ctx.arc(0,-16-player.h/8,(player.w+player.h)/5.6,Math.PI*2,0);ctx.stroke();
   // Main body rect
   ctx.globalAlpha=.86;ctx.shadowBlur=18;ctx.shadowColor=player.col;
   ctx.fillStyle=player.col;ctx.beginPath();ctx.ellipse(0,8-player.h/8,player.w/2.3,(player.h)/2.05,0,0,Math.PI*2);ctx.closePath();ctx.fill();
   // Eyes
   if(player.attacking){ctx.globalAlpha=.97;ctx.fillStyle="#f7e17c";}
   else{ctx.globalAlpha=.81;ctx.fillStyle="#fff";}
   ctx.beginPath();ctx.arc(-10,-6-player.h/8 ,4 ,0 ,Math.PI*2);ctx.arc(10,-6-player.h/8 ,4 ,0 ,Math.PI*2);ctx.closePath();ctx.fill();
   // Weapon swing (if attacking)
   if(player.attacking){
     ctx.save();ctx.rotate(Math.sin(Date.now()/60)*.4);
     ctx.strokeStyle="#f7e17c";ctx.lineWidth=9+(Math.random()-.5)*2.8;
     ctx.beginPath();ctx.moveTo(22,-12);ctx.lineTo(38,-32);ctx.stroke();ctx.restore();
   }
   // Name label
   ctx.globalAlpha=.65;ctx.font="bold italic 13px Segoe UI";
   ctx.rotate(0);ctx.textAlign="center";ctx.textBaseline='top';
   ctx.fillText(player.name+" ("+getUnlockedChars()[selectedCharIdx].faction+")",0,(player.h/2)-5);
   ctx.restore();

   // Enemies logic & draw
   for(let e of enemies){
     if(!e.alive) continue;

     // Move towards player unless attacking/cooldown/idle
     if(Math.abs(e.x-player.x)>15) e.x+=e.vx*(e.type==="basic"?1:.65);
     else e.idleTimer--;
     e.x = clamp(e.x,10,GAME_WIDTH-10-e.w);

     // Jump randomly sometimes or simulate simple AI jump over platforms (not real platforming yet)
     if(Math.random()<.003 && e.onGround){e.vy=-7;}

     // Gravity & ground check
     if(e.y + e.h < sceneY+GAME_HEIGHT-80){e.vy+=.6;}else{e.y = sceneY+GAME_HEIGHT-80-e.h;e.vy=0;e.onGround=true;}
     e.y+=e.vy;

     // If in melee range and cooldown done -> "attack"
     if(Math.abs(e.x-player.x)<36 && Math.abs(e.y-player.y)<44 && e.cooldown<=0){
       if(Math.random()<.34){
         playerHealth-=e.atk*(e.type==="elite"?1.12:.97)|0; e.cooldown=90+(Math.random()*30)|0;
         combo=0; comboTimer=20;
       }
     }else{
       e.cooldown--;
     }

     // Draw enemy (ellipse with eyes)
     let ex=e.x-eyOffset(),ey=e.y-eyOffset();
     function eyOffset(){return offsetY;}
     ctx.save();
     if(e.type==="elite"){ctx.shadowColor="#bc3cff";ctx.shadowBlur=19;}
     else{ctx.shadowColor="#fff";ctx.shadowBlur=7;}
     ctx.globalAlpha=.93+(e.type==="elite"?-.08:.08);
     ctx.beginPath();ctx.ellipse(ex+e.w/2 ,ey+e.h/2 ,e.w/2 ,e.h/2 ,0 ,0 ,Math.PI*2);ctx.closePath();
     ctx.fillStyle=e.color;ctx.fill();
     // Eyes
     if(e.type==="elite"){ctx.globalAlpha=.91;}
     else{ctx.globalAlpha=.82;}
     ctx.beginPath();ctx.arc(ex+e.w/3 ,ey+e.h/3 ,4 ,0 ,Math.PI*2);
     ctx.arc(ex+e.w*2/3 ,ey+e.h/3 ,4 ,0 ,Math.PI*2);ctx.closePath();ctx.fillStyle="#fff";ctx.fill();
     // Health bar (if elite)
     if(e.type==="elite"){
         let healthPct=e.hp/(e.type==="elite"?60:25);
         let barw=e.w*healthPct;
         ctx.globalAlpha=.8;ctx.strokeStyle="#222";ctx.lineWidth=7;
         ctx.beginPath();ctx.moveTo(ex+4 ,ey-6);ctx.lineTo(ex+e.w-4 ,ey-6);ctx.stroke();
         ctx.globalAlpha=.95;ctx.strokeStyle="#bc3cff";ctx.lineWidth=5;
         ctx.beginPath();ctx.moveTo(ex+4 ,ey-6);ctx.lineTo(ex+4+barw ,ey-6);ctx.stroke();
     }
     // Name label (for demo)
     if(e.type==="elite"){
       ctx.font="italic bold 11px Segoe UI";ctx.globalAlpha=.68;ctx.textAlign='center';
       ctx.fillText("Elite",ex+e.w/2 ,ey-19 );
     }
     else{
       if(Math.random()<.05){}// sparkle effect placeholder
     }
     // End enemy draw
     ctx.restore();

     // Player attack collision & hit logic
     if(player.attacking && Math.abs((ex+e.w/2)-(player.x+player.w/2))<38 && Math.abs((ey+e.h/2)-(player.y+player.h/2))<44 && e.hp>0){
         e.hp-=player.atkPower+(Math.random()*3)|0;
         if(e.hp<=0){ 
           e.alive=false; 
           currentScore+=(e.type==="elite"?500:100)*(comboMultiplier());
           combo++; comboTimer=60;
         }else{
           combo++; comboTimer=60;
         }
       }
   }

   // Remove dead enemies after short time (simulate fade)
   enemies=enemies.filter(e=>e.alive||Math.random()>.08);

   // Occasionally spawn enemies as you descend
   if(enemies.length<4 && Math.random()<.022)spawnEnemy();

   // HUD (top bar): score, health bar, combo meter
   drawHUD();

   // Win/Lose conditions for demo (reach bottom or run out of HP)
   if(playerHealth<=0){
      state="gameover";
      if(currentScore>highScore){highScore=currentScore;}
      localStorage.setItem("forgeborn_highscore",highScore+"");
      setTimeout(()=>{overlay.innerHTML='<button class="overlay-btn" onclick="restartGame()">Restart</button>';overlay.style.display='block';},500);
   }
}

function drawHUD(){
  // Top bar bg
  ctx.save();
  ctx.globalAlpha=.92;
  ctx.fillStyle="#262335";
  ctx.fillRect(0,0,GAME_WIDTH,48);
  
  // Score display
  ctx.font="bold 26px Segoe UI";
  ctx.textAlign='left';
  ctx.fillStyle="#ffb347";
  ctx.fillText("Score:",32,32);
  ctx.font="bold italic 30px Segoe UI";
  ctx.fillStyle='#fff';
  let scoreTxt=currentScore.toLocaleString();
  let hiTxt=("Hi:"+highScore.toLocaleString());
  ctx.fillText(scoreTxt+" ",128,32);
  
  // Combo display/multiplier:
  let multTxt=(comboMultiplier()>1?comboMultiplier()+"x":"");
  if(combo>1){
    let col=["#fff","#ffe572","#ffd700","#f086ff","#bc3cff"];
    let idx=Math.min(col.length-1,(combo/5)|0);
    let txt=(combo+" Combo "+multTxt).toUpperCase();
    ctx.font='bold italic '+(22+Math.min(combo*1.4,26))+'px Segoe UI';
    ctx.shadowColor="#bc3cff";ctx.shadowBlur=Math.min(combo*1.5,19);
    ctx.globalAlpha=.76+.14*Math.sin(Date.now()/170);
    ctx.fillStyle=col[idx];
    if(comboTimer>10) {
      for(let i=-1;i<=1;i+=2){
         for(let j=-1;j<=1;j+=2){
           let xx=260+i*comboTimer*.8*j+j*i*combo*.16;let yy=32+j*comboTimer*.4*i-i*j*combo*.11;
           if(xx!=260||yy!=32) {
             ctx.globalAlpha*=.65;.fillText(txt+" ",xx,yy); 
           }
         }
       }
      }
      .fillText(txt+" ",260+(comboTimer%6),32-(comboTimer%4));
      .globalAlpha=.86;.shadowBlur=7;.fillText(txt+" ",260+(comboTimer%3),32-(comboTimer%3));
      .shadowBlur=4;.globalAlpha=.68;.fillText(txt+" ",260-(comboTimer%3),32+(comboTimer%3));
      .shadowBlur=14;.fillText(txt+" ",260+(comboTimer%6),32+(comboTimer%3));
      
      //.shadowBlur=Math.min(combo*1.14,11);
      //.globalAlpha=.93;.fillText(txt+" ",260-(comboTimer%6),32+(comboTimer%4));
      
      //.globalAlpha=.83;.shadowBlur=Math.min(combo*1.25,.14*(Date.now()%12)); 
      
      
      //.fillText(txt+" ",260+(comboTimer%8),32-(comboTimer%6));
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
     
        
    
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
        
    
   
    
    
    
    
    
        
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   
    
   

    
  
  




    
    
  
  
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  




    
    
  


  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  




    
  
  


  
    
  
  
  


}

function comboMultiplier(){
if(combo>=30)return 4;if(combo>=20)return 3;if(combo>=15)return 2.5;if(combo>=10)return 2;if(combo>=5)return 1.5;return 1;}

function restartGame(){
overlay.style.display='none';state='title';}

// ================= MAIN LOOP & INPUT ===================
function render(){
requestAnimationFrame(render);

if(state=="title")drawTitle();
else if(state=="charselect")drawCharSelect();
else if(state=="levelselect")drawLevelSelect();
else if(state=="playing")drawGameplay();

if(comboTimer>0){comboTimer--;if(comboTimer<=0)combo=0;}
}
render();

// Keyboard/gamepad input handling:
window.addEventListener('keydown',function(e){
if(state=="title"){state='charselect';return;}
if(state=="charselect"){
if(e.key=="ArrowLeft"||e.key=="a")selectedCharIdx=Math.max(0,selectedCharIdx-1);
if(e.key=="ArrowRight"||e.key=="d")selectedCharIdx=Math.min(CHARACTERS.length-1,selectedCharIdx+1);
// Only allow select for unlocked chars:
if((e.key=="Enter"||e.key==" ")){
if(highScore>=CHARACTERS[selectedCharIdx].unlockedAt){state='levelselect';}
}
return;}
if(state=="levelselect"){
if(e.key=="ArrowUp"||e.key=="w")selectedLevelIdx=Math.max(0,selectedLevelIdx-1);
if(e.key=="ArrowDown"||e.key=="s")selectedLevelIdx=Math.min(LEVELS.length-1,selectedLevelIdx+1);
// Play button triggers:
if((e.key=="Enter"||e.key==" ")){
if(highScore>=LEVELS[selectedLevelIdx].unlockedAt){startGamePlay();}
}
return;}
if(state=="playing"){
keys[e.key]=true;
// Attack (J / Z / left click)
if(e.key=="j"||e.key=="z"||e.key==" "){
if(!player.attacking&&player.onGround){player.attacking=true;player.attackTimer=16;}
}
}
});
window.addEventListener('keyup',function(e){delete keys[e.key];});

// Mouse support for buttons:
canvas.addEventListener('click',function(evt){
let mx = evt.offsetX,my = evt.offsetY;
// On charselect/select button:
if(state=="charselect"){
let chars = CHARACTERS,len=chars.length,s=110,xo=(GAME_WIDTH/2)-(len-1)*s/2;
for(let i=0;i<len;++i){
let x=xo+i*s,y=180,r=48;
if(mx>x-48&&mx<x+48&&my>y+r+56&&my<y+r+56+36&&highScore>=chars[i].unlockedAt&&i==selectedCharIdx){
state='levelselect';break;}
}
}
// On levelselect/play button:
if(state=="levelselect"){
let levels = LEVELS,s=70,yoff=140,xo=(GAME_WIDTH/2)-120,wid=240,hgt=52;
for(let i=0;i<levels.length;++i){
let y=yoff+i*s,x=xo,w=wid,h=hgt;
if(mx>x+w+14&&mx<x+w+14+92&&my>y+6&&my<y+44&&highScore>=levels[i].unlockedAt&&i==selectedLevelIdx){startGamePlay();}
}
}
});

// Restart button overlay:
window.restartGame = restartGame;

</script>
</body>
</html>