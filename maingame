<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    html,body { margin:0; padding:0; background:#18121a; }
    body { font-family: 'Segoe UI', Arial, sans-serif; overflow:hidden; }
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center; }
    canvas { display:block; background:#18121a; box-shadow:0 0 32px #222; }
    /* Accessibility/Responsive */
    @media (max-width:900px) {
      #gameCanvas { width:100vw !important; height:auto !important; }
    }
  </style>
</head>
<body>
<div id="gameContainer">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
</div>
<script>
// ====================================================
// === DATA & CONSTANTS ===============================
// ====================================================
const CHARACTERS = [
  {
    name: "Korok",
    faction: "Tempys",
    unlockedAt: 0,
    color: "#ff7200",
    desc: "Tank with area control",
    hp: 140,
    atk: 17,
    spd: 4,
    abilities: ["Ground Slam","Stone Armor"]
  }
  // Expandable for Oros, Cercee, etc.
];
const LEVELS = [
  {
    name: "Frozen Wastes",
    unlockedAt: 0,
    scenes: [
      { name:"Frozen Wastes 1", bg:"frozen_wastes_1.png", color:"#28405a" }
      // More scenes would go here.
    ]
  }
];
const ENEMY_TYPES = [
  {
    name: "Frostling",
    color: "#5ec6ff",
    hp: 30,
    atk: 8,
    spd: 2.5,
    reward: 100
  }
];

// Combo tiers
const comboTiers = [
  { hits:5, mult:1.5 },
  { hits:10, mult:2 },
  { hits:15, mult:2.5 },
  { hits:20, mult:3 },
  { hits:30, mult:4 }
];

// ====================================================
// === STATE ==========================================
// ====================================================
let state = "title"; // title,charselect,playing,gameover
let selectedChar = 0;
let selectedLevel = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let score = 0;
let combo = 0;
let comboTimer = 0;
let comboMult = 1;
let sceneY = 0;
let player = null;
let enemies = [];
let keys = {};
let gameOverReason = "";
let damageFlash = 0;

// === CANVAS SETUP ===
let canvas = document.getElementById('gameCanvas');
let ctx = canvas.getContext('2d');

// === INPUT HANDLING ===
window.addEventListener('keydown', e => {
  keys[e.key] = true;
});
window.addEventListener('keyup', e => {
  keys[e.key] = false;
});

// ====================================================
// === MAIN GAME LOOP =================================
// ====================================================
function mainLoop() {
  ctx.clearRect(0,0,canvas.width,canvas.height);
  switch(state) {
    case "title": drawTitle(); break;
    case "charselect": drawCharSelect(); break;
    case "playing": drawGame(); break;
    case "gameover": drawGameOver(); break;
  }
  requestAnimationFrame(mainLoop);
}
mainLoop();

// ====================================================
// === SCREENS ========================================
// ====================================================
function drawTitle() {
  // BG gradient
  let grad=ctx.createLinearGradient(0,0,0,canvas.height);
  grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
  ctx.fillStyle=grad; ctx.fillRect(0,0,canvas.width,canvas.height);

  // Animated Solforge Tower
  let t=Date.now()/800;
  ctx.save();
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  // Corruption effect
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#bc3cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();

  // Title text
  ctx.fillStyle="#ffb347"; ctx.font="bold 46px Segoe UI"; ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.fillStyle="#fff"; ctx.font="bold italic 36px Segoe UI";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160); ctx.shadowBlur=0;

  // High Score
  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

  // Prompt
  if(Math.floor(Date.now()/500)%2===0) {
    ctx.font="bold italic 28px Segoe UI";ctx.fillStyle="#fff";
    ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }

  if(Object.values(keys).some(v=>v)) {
    state="charselect";
    keys={};
  }
}

function drawCharSelect() {
  ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing = 120;
  let x0 = canvas.width/2 - ((CHARACTERS.length-1)*spacing)/2;
  
  for(let i=0;i<CHARACTERS.length;++i) {
    let x=x0+i*spacing,y=220,r=48,isUnlocked=highScore>=CHARACTERS[i].unlockedAt;
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.15;ctx.strokeStyle="#fff";ctx.lineWidth=i===selectedChar?7:3;ctx.stroke();
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    if(!isUnlocked){ctx.globalAlpha=.5;ctx.fillStyle="#222";ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();}
    ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);
    if(i===selectedChar) {
      ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
      ctx.fillText(CHARACTERS[i].name+" ("+CHARACTERS[i].faction+")",x,y+r+44);
      if(isUnlocked){
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
        if(keys["Enter"]||keys[" "]) {
          state="playing";
          startGame();
          keys["Enter"]=keys[" "]=false;
        }
      } else {
        ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
        ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt,x,y+r+24);
      }
      ctx.font="16px Segoe UI";ctx.fillStyle="#aaa";
      ctx.fillText(CHARACTERS[i].desc,x,y+r+80);
    }
    // Navigation
    if(keys["ArrowLeft"]&&i===selectedChar&&i>0){selectedChar--;keys["ArrowLeft"]=false;}
    if(keys["ArrowRight"]&&i===selectedChar&&i<CHARACTERS.length-1){selectedChar++;keys["ArrowRight"]=false;}
    ctx.restore();
  }
}

function drawButton(x,y,w,h,text,isActive){
  ctx.save();ctx.globalAlpha=isActive?1:.5;
  ctx.fillStyle=isActive?"#ff9200":"#555";
  ctx.fillRect(x,y,w,h);ctx.strokeStyle="#fff";ctx.lineWidth=2;ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";ctx.font="bold 22px Segoe UI";
  ctx.textAlign="center";ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);ctx.restore();
}

// ====================================================
// === GAMEPLAY =======================================
// ====================================================
function startGame() {
   // Reset all necessary state for a new run
   let c=CHARACTERS[selectedChar];
   player = {
     x:canvas.width/2,
     y:100,
     vx:0,
     vy:0,
     w:40,h:64,
     color:c.color,
     hp:c.hp,
     maxhp:c.hp,
     atk:c.atk,
     spd:c.spd,
     onGround:false,
     attacking:false,
     attackTimer:0,
     facingRight:true
   };
   score = combo = comboMult = sceneY = comboTimer = damageFlash = gameOverReason = 0;
   enemies = [];
   spawnEnemyWave();
}
function spawnEnemyWave() {
   // Spawn some basic enemies ahead of player in the vertical descent
   for(let i=0;i<4;i++) {
     let etype=ENEMY_TYPES[0];
     enemies.push({
       type:"Frostling",
       x:Math.random()*(canvas.width-80)+40,
       y:sceneY+250+Math.random()*340,
       vx:(Math.random()<.5?-1:1)*etype.spd*.4,
       vy:0,
       w:38,h:54,
       color:etype.color,
       hp:etype.hp,
       maxhp:etype.hp,
       atk:etype.atk,
       spd:etype.spd,
       alive:true,
       attackTimer:Math.random()*50
     });
   }
}
function drawGame() {
   // SCENE BACKGROUND (simulate PNG)
   let sceneColor=LEVELS[0].scenes[0].color;
   ctx.save();
   ctx.fillStyle=sceneColor;
   ctx.globalAlpha=.22;
   ctx.fillRect(0,-sceneY%600,canvas.width,600);
   ctx.globalAlpha=.11;
   ctx.fillRect(120,-sceneY%600+180,560,360);
   ctx.restore();

   // Ground snow at bottom of screen (simulate vertical endcap)
   ctx.save();
   let grd=ctx.createLinearGradient(0,canvas.height-60,0,canvas.height);
   grd.addColorStop(0,"#cbe9fa");
   grd.addColorStop(1,"#aee7ff");
   ctx.fillStyle=grd;
   ctx.globalAlpha=.66;
   ctx.beginPath();ctx.moveTo(0,canvas.height-60);ctx.lineTo(canvas.width,canvas.height-30);
   ctx.lineTo(canvas.width,canvas.height);ctx.lineTo(0,canvas.height);ctx.closePath();
   ctx.fill();
   ctx.restore();

   // World scrolls down as player descends
   let camY=Math.max(player.y-120,sceneY);

   // ENEMIES
   for(let e of enemies) {
     if(!e.alive) continue;
     // Move enemy toward player on X
     if(Math.abs(e.x-player.x)>10) e.x+=Math.sign(player.x-e.x)*e.spd*.6;
     // Simple AI attack timer
     e.attackTimer--;
     if(e.attackTimer<1 && Math.abs(e.x-player.x)<42 && Math.abs(e.y-player.y)<14) {
       e.attackTimer=60+Math.random()*30;
       if(Math.abs(player.x-e.x)<42 && Math.abs(player.y-e.y)<24) {
         playerTakeHit(e.atk);
         e.vx=-Math.sign(player.x-e.x)*e.spd*2;
       }
     }
     // Draw enemy
     let ey=e.y-camY;
     if(e.hp>0) {
       ctx.save();
       ctx.globalAlpha=.95;
       ctx.beginPath();ctx.arc(e.x+e.w/2,ey+e.h/2,e.w/2+4,0,Math.PI*2);ctx.closePath();
       ctx.shadowColor=e.color;ctx.shadowBlur=10;ctx.fillStyle=e.color;ctx.globalAlpha=.6;ctx.fill();
       ctx.shadowBlur=0;ctx.globalAlpha=1;
       ctx.fillStyle=e.color;ctx.fillRect(e.x,ey,e.w,e.h);
       // HP bar
       let hpFrac=e.hp/e.maxhp;
       if(hpFrac<1){
         ctx.globalAlpha=.75;
         ctx.fillStyle="#022";ctx.fillRect(e.x-6,ey-10,e.w+12,10);
         ctx.globalAlpha=.98;
         ctx.fillStyle="#aef";ctx.fillRect(e.x-6,ey-10,(e.w+12)*hpFrac,10);
         ctx.globalAlpha=1;
       }
       // Eyes
       ctx.beginPath();ctx.arc(e.x+e.w/3.3,ey+e.h/2+6,6.3,.7,.7+Math.PI*1.4);ctx.strokeStyle="#fff";ctx.lineWidth=3;ctx.stroke();
       ctx.beginPath();ctx.arc(e.x+e.w*2/3.3,ey+e.h/2+6,6.3,.7,.7+Math.PI*1.4);ctx.strokeStyle="#fff";ctx.lineWidth=3;ctx.stroke();
       ctx.restore();
     }
   }

   // PLAYER PHYSICS
   player.vy += .68; // gravity
   player.y += player.vy;
   player.x += player.vx;

   // Clamp player to horizontal bounds
   player.x=Math.max(30,Math.min(player.x,canvas.width-30));
   
   // Ground collision at virtual bottom (end of scene)
   if(player.y-camY > canvas.height-70-player.h/2) {
      player.vy=0; player.onGround=true; player.y=camY+canvas.height-70-player.h/2;
      if(sceneY<800) { sceneY+=80; spawnEnemyWave(); }
   } else player.onGround=false;

   // Controls (WASD/arrows/jump/attack)
   if((keys["ArrowLeft"]||keys["a"]||keys["A"])) { player.x-=player.spd;player.facingRight=false;}
   if((keys["ArrowRight"]||keys["d"]||keys["D"])) { player.x+=player.spd;player.facingRight=true;}
   if((keys[" "]||keys["w"]||keys["W"]||keys["ArrowUp"]) && player.onGround){player.vy=-13.9;player.onGround=false;}
   
   // Attack
   if((keys["j"]||keys["J"]||keys["z"]||keys["Z"]) && !player.attacking && !player.attackTimer) {
     player.attacking=true;
     player.attackTimer=17;
     setTimeout(()=>{player.attacking=false},160);
     setTimeout(()=>{player.attackTimer=0},220);
     playerAttack();
   }

   // DRAW PLAYER
   let py=player.y-camY;
   if(damageFlash>0){damageFlash--;if(damageFlash%4<2) return;} // blink on damage

   // Shadow/Glow behind
   ctx.save();
   ctx.beginPath();ctx.arc(player.x+player.w/2,py+player.h*7/8,(player.w+22),.6*Math.PI,.4*Math.PI,false);
   ctx.shadowColor=player.color;ctx.shadowBlur=22;ctx.globalAlpha=.15+Math.abs(Math.sin(Date.now()/300))*.09;
   ctx.fillStyle="#fff";ctx.closePath();ctx.fill();ctx.shadowBlur=0;ctx.restore();

   // Body
   ctx.save();
   ctx.globalAlpha=.97;
   ctx.beginPath();ctx.arc(player.x+player.w/2,py+player.h/2,(player.w/2)+6,.3*Math.PI,.7*Math.PI,false);ctx.closePath();
   ctx.shadowColor=player.color;ctx.shadowBlur=10;
   ctx.fillStyle=player.color;ctx.globalAlpha=.55+.45*Math.abs(Math.sin(Date.now()/190));
   ctx.fill();ctx.shadowBlur=0;

   // Main body rectangle
   ctx.globalAlpha=.99; 
   ctx.fillStyle="#222";
   ctx.fillRect(player.x+4,py+8,player.w-8,player.h-14);

   // Head highlight + face line
   ctx.beginPath(); 
   let cx=player.x+player.w/2,cby=py+30;
   ctx.arc(cx,cby-player.h*1/8,(player.w/3),-.5,.7*Math.PI,true);
   ctx.strokeStyle="#fff"; 
   ctx.globalAlpha=.12+(Math.abs(Math.sin(Date.now()/230))*.13);
   ctx.lineWidth=6; 
   ctx.stroke();

   // Face line (smile)
   if(player.attacking) {
      ctx.strokeStyle="#ffc700";
      ctx.lineWidth=3.5;
      ctx.beginPath(); 
      let fx=cx-(player.facingRight?8:-8),fy=cby+18;
      for(let i=0;i<=6;++i) 
        ctx.lineTo(fx+i*2*(player.facingRight?1:-1),fy-Math.abs(Math.sin(i*.6))*7);
      ctx.stroke();
      // Attack arc
      let ax=cx+(player.facingRight?32:-32),ay=cby+14,radius=24+(comboMult>1?comboMult*4:0);
      let a1=(player.facingRight?-.5:.9)*Math.PI,a2=(player.facingRight?.9:-.5)*Math.PI;
      ctx.beginPath(); 
      ctx.arc(ax,ay,radius,a1,a2,false);
      ctx.strokeStyle="#ffb347";
      ctx.globalAlpha=.33+.25*Math.abs(Math.sin(Date.now()/90));
      ctx.lineWidth=(comboMult>1)?7.5:5.5;
      ctx.stroke();
      ctx.globalAlpha=1;
   } else {
      // At rest face
      ctx.strokeStyle="#fff";
      ctx.lineWidth=3.5;
      ctx.beginPath(); 
      let fx=cx-(player.facingRight?8:-8),fy=cby+18;
      for(let i=0;i<=6;++i) 
        ctx.lineTo(fx+i*2*(player.facingRight?1:-1),fy-Math.abs(Math.cos(i*.65))*4.5);
      ctx.stroke();
   }

   // Eyes (angry when attacking)
   for(let k=-1;k<=1;k+=2){
     let ex=cx+k*10,eY=cby-10+(player.attacking?4*k:0);
     ctx.beginPath(); 
     if(player.attacking){ 
        ctx.arc(ex,eY-3+k*3.5-k*4,.9+(comboMult>1?comboMult*.33:.9),-.7,.7*Math.PI,false);}
     else { 
        ctx.arc(ex,eY-5,.9,-.9,.8*Math.PI,false);}
     ctx.strokeStyle="#fff"; 
     ctx.lineWidth=(comboMult>1)?3.7:3.3; 
     ctx.stroke();
   }

   // HP bar over head
   let fracHP=Math.max(player.hp/player.maxhp,.001);
   if(fracHP<1){
     let barw=Math.max(player.w*fracHP,.01)+18;
     let bx=cx-barw/2-1,bw=barw,bh=9,bY=cby-player.h*5/12-18;
     ctx.save();
     ctx.globalAlpha=.85; 
     ctx.fillStyle="#111"; 
     ctx.fillRect(bx,bY,bw,bh);
     let gradHP=ctx.createLinearGradient(bx,bY,bx+bw,bY);
     gradHP.addColorStop(0,"#ffb347"); gradHP.addColorStop(1,"#ff330c");
     ctx.fillStyle=gradHP; 
     ctx.globalAlpha=.99; 
     ctx.fillRect(bx,bY,bw,bh); 
     if(fracHP<.3){ 
        // Flash red when low HP 
        if(Math.floor(Date.now()/120)%2==0)
          {ctx.globalAlpha=.95;ctx.fillStyle="#f24";ctx.fillRect(bx,bY,bw,bh);}
     } 
     // Border 
     ctx.globalAlpha=.88; 
     ctx.strokeStyle="#fff";
     ctx.lineWidth=1.9; 
     ctx.strokeRect(bx-.5,bY-.5,bw+1,bh+1); 
     // Endcap
     if(fracHP<1){ 
        let tFrac=(Date.now()%400)/400; 
        let ex=(bx+bw-tFrac*bw); 
        for(let i=0;i<2;++i)
          { 
            if(i==Math.floor(tFrac*2))
            { 
              let cGrad=ctx.createRadialGradient(ex,bY+bw*.25+i*bh*.6,i==1?12:8,
                ex,bY+bw*.25+i*bh*.6,i==1?24:16);
              cGrad.addColorStop(0,"#fff"); cGrad.addColorStop(1,"rgba(255,255,255,.08)");
              ctx.globalAlpha=.45+.22*Math.abs(Math.sin(Date.now()/90));
              ctx.beginPath(); 
              ctx.arc(ex,bY+bw*.25+i*bh*.6,i==1?13.9:9.9,-Math.PI,.7*Math.PI,false); 
              ctx.closePath(); 
              ctx.fillStyle=cGrad; 
              ctx.fill();
            }
          } 
          } 
          //
          //
          //
          //
          //
          //
          //
          //
          //
          //
          //
          //
          //
          //
          //
          //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        ;
        
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         ;
         ;
         ;
         ;
         ;
         ;
         ;
         ;
         ;
         ;
         ;
         ;
         ;
         ;
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

// Combo system logic & UI pop-up
if(combo>0){
    let mult=getComboMultiplier(combo), sz=Math.min(combo*4+30,100);
    comboMult = mult;
    let str=`COMBO x${combo} (${mult}x)`;
    let cy=Math.max(py-90-(combo>=10?18:0),30);
    // Combo text pop-up
    let cCol=(mult>1.5?"#b8ff62":"#ffe18a");
    let shadowCol=(mult>2?"#bc3cff":"#ffb347");
    for(let k=-2;k<=2;k++)
      {if(k!=0){ctx.save();ctx.font=`bold ${sz}px Segoe UI`;ctx.globalAlpha=.09*Math.abs(k);ctx.shadowBlur=Math.abs(k)*10;ctx.shadowColor=shadowCol;ctx.translate(player.x+k*4,cy+k*4);ctx.rotate(k*.01);ctx.scale(1+.03*k,-(mult>=3?1.05:.95));if(mult>3){cCol="#bc3cff";}
      ;}else{continue;}};
      //
      ;// End shadow loop
      ;// Now main text:
      ;//
      ;// Now main text:
      ;//
      ;// Now main text:
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    
    ;// End main text pop-up
    
    
}

// HUD BAR (top)
drawHUD();

// Update combos/timers
if(combo>0){
    comboTimer--;
    if(comboTimer<=0) comboBreak();
}
if(score>highScore){
    highScore = score;
    localStorage.setItem("forgeborn_highscore",highScore);
}

// ENEMY COLLISIONS & DAMAGE RESOLUTION handled in respective functions

// Check lose condition:
if(player.hp<=0){
    gameOverReason="You fell in battle!";
    state="gameover";
}

}

// COMBO LOGIC HELPERS
function getComboMultiplier(count){
    let m = comboTiers.reduce((acc,t)=>count>=t.hits?t.mult:acc,1);
    return m;
}
function addCombo(){
    combo++;
    comboTimer=Math.max(80-(combo*2),30); // Higher combos decay faster!
}
function comboBreak(){
    comboTimer=combo=comboMult=0;
}

// PLAYER ATTACK RESOLUTION
function playerAttack(){
    for(let e of enemies){
        if(!e.alive) continue;
        if(Math.abs(e.x-player.x)<56 && Math.abs(e.y-player.y)<38){
            e.hp-=player.atk+(comboMult>1?comboMult*3|0:0);
            addCombo();
            score += ENEMY_TYPES[0].reward * comboMult |0;
            e.vx+=player.facingRight?11:-11;e.vy=-5-Math.random()*7|0;// knockback!
            if(e.hp<=0){e.alive=false;}
            break;// Only hit one at a time for demo!
        }
    }
}

// PLAYER TAKES DAMAGE LOGIC
function playerTakeHit(dmg){
    if(damageFlash>12) return;// brief invuln after hit
    comboBreak();
    player.hp-=dmg|0;if(player.hp<1) player.hp=0;
    damageFlash=18;// flash effect after hit
}

// HUD DRAWING (Top bar)
function drawHUD(){
    // Top bar panel BG
    let barH=42,padV=8,padH=18;
    // Panel BG & outline:
    let grdHUDBar = ctx.createLinearGradient(0,padV,padH*4,padV+barH);
    grdHUDBar.addColorStop(0,"#232e35");
    grdHUDBar.addColorStop(.49,"#393977");
    grdHUDBar.addColorStop(1,"#18121a");
    
    // Score and Combo counter:
    let txt=`SCORE ${score.toLocaleString()} `;
    
    let multiDisp="";
    
    if(combo>4){
        txt += `| COMBO ${combo}`;
        multiDisp=`x${getComboMultiplier(combo)}`
    }
    
    // Draw panel:
    let panelW=Math.max(ctx.measureText(txt).width+180,multiDisp.length>0?420:280),panelX=(canvas.width-panelW)/2,yPad=Math.max(padV-(damageFlash>6?8-damageFlash:.001),padV);

    
    // Bar background and border:
    ctx.save();ctx.globalAlpha=.93+(damageFlash>10?.09:.03); 
    roundRect(ctx,panelX,yPad,panelW,barH+5,panelW*.09,"#16171a","#232e35"); 
    
    
    
    
    
    

    
   
    
   
   
    
   
   

   

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    
   
    
   
    
   
    
     
     
     
     
     
     
     
     
     
     

    
    

   

    
    
    

   

    

    
   

    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

// Score Text:
    
   
   

    

    
   

    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    

    
    


    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
// Combo Multiplier pop-up:
if(combo>4){
     
        
}
}
// Helper function for rounded rectangle panel:
function roundRect(ctx,x,y,w,h,r,colBG,colBorder){
	ctx.save();
	ctx.beginPath();  
	ctx.moveTo(x+r,y);  
	ctx.lineTo(x+w-r,y);  
	ctx.quadraticCurveTo(x+w,y,x+w,y+r);  
	ctx.lineTo(x+w,y+h-r);  
	ctx.quadraticCurveTo(x+w,y+h,x+w-r,y+h);  
	ctx.lineTo(x+r,y+h);  
	ctx.quadraticCurveTo(x,y+h,x,y+h-r);  
	ctx.lineTo(x,y+r);  
	ctx.quadraticCurveTo(x,y,x+r,y);  
	ctx.closePath();
	if(colBG){	ctx.globalAlpha=.85;	ctx.fillStyle=colBG;	ctx.fill();}
	if(colBorder){	ctx.globalAlpha=.99;	ctx.lineWidth=3.7;	ctx.strokeStyle=colBorder;	ctx.stroke();}
	ctx.restore();
}
// ====================================================
// === GAME OVER ======================================
// ====================================================
function drawGameOver(){
	// Dim BG:
	ctx.save();	ctx.globalAlpha=.58;	ctx.fillStyle="#000";	ctx.fillRect(0,0,canvas.width,canvas.height);	ctx.restore();

	// Panel BG:
	let panelW=Math.min(canvas.width*.74|0,480),panelH=320,panelX=(canvas.width-panelW)/2,panelY=(canvas.height-panelH)/2;

	roundRect(ctx,panelX,panelY,panelW,panelH,panelW*.12,"#232e35","#ffb347");

	// Header:
	ctx.font="bold italic 38px Segoe UI";	ctx.textAlign="center";	ctx.fillStyle="#ffb347";
	ctx.shadowBlur=14;	ctx.shadowColor="#bc3cff";
	ctx.fillText("GAME OVER",canvas.width/2,panelY+65);

	// Score:
	ctx.font="bold italic 29px Segoe UI";	ctx.shadowBlur=8;	ctx.shadowColor="#fff";
	ctx.fillStyle="#ffe18a";
	ctx.textAlign="center";
	ctx.fillText("Final Score:",canvas.width/2,panelY+115);
	ctx.font="bold italic 44px Segoe UI";
	ctx.fillStyle="#fff";
	ctx.shadowBlur=20;
	ctx.shadowColor="#bc3cff";
	ctx.fillText(score.toLocaleString(),canvas.width/2,panelY+164);

	// High Score:
	if(score>=highScore){
		ctx.font="bold italic 26px Segoe UI";
		ctx.shadowBlur=5;	ctx.shadowColor="#b8ff62";	ctx.fillStyle="#b8ff62";
		ctx.textAlign="center";
		ctx.fillText("NEW HIGH SCORE!",canvas.width/2,panelY+198);
	}else{
		ctx.font="bold italic 22px Segoe UI";
		ctx.shadowBlur=5;	ctx.shadowColor="#ffe18a";	ctx.fillStyle="#ffe18a";
		ctx.textAlign="center";
		ctx.fillText("High Score:"+highScore.toLocaleString(),canvas.width/2,panelY+198);
	}
	// Combo stats:
	ctx.font="italic bold 22px Segoe UI";	
	ctx.shadowBlur=5;	
	ctx.shadowColor="#fff";
	ctx.textAlign="center";
	ctx.fillText(`Best Combo Achieved: ${combo}`,canvas.width/2,panelY+232);

	// Reason:
	if(gameOverReason){
		ctx.font="italic bold 19px Segoe UI";
		ctx.shadowBlur=4;	
		ctx.shadowColor="#ffe18a";
		ctx.textAlign="center";
		ctx.fillText(gameOverReason,canvas.width/2,panelY+264);
	}

	// Continue button:
	drawButton(canvas.width/2-72,panelY+panelH-58,144,36,"RETRY",true);

	if(keys["Enter"]||keys[" "]){
		state="title";
		keys={};
	}
}


// ====================================================
// That's the minimum vertical slice as described! ====
// - Korok playable with unique stats and feel.
// - Vertical descent gameplay with basic AI enemies.
// - Combo system with multiplier and decay.
// - Score and unlock progression logic.
// - Hand-crafted scene structure and ready for PNG backgrounds.
// - Title screen and Game Over screen matching UX mockups.
// - Expandable with more levels/scenes/enemy types!
// ====================================================
</script>
</body>
</html>