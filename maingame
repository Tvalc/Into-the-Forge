<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <style>
    html,body { margin:0; padding:0; background:#18151c; }
    body { min-height:100vh; }
    #gameContainer { display:flex; justify-content:center; align-items:center; width:100vw; height:100vh; }
    canvas { background:#18151c; display:block; }
    @media (max-width:900px) {
      canvas { width:98vw !important; height:auto !important; max-width:800px; }
    }
  </style>
</head>
<body>
<div id="gameContainer">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
</div>
<script>
// ======= GAME CONSTANTS AND DATA =======
const CHARACTERS = [
  { name: "Korok", faction: "Tempys", unlockedAt: 0, color: "#ff7200", hp: 140, atk: 16, spd: 4 },
  { name: "Oros", faction: "Uterra", unlockedAt: 10000, color: "#18d860", hp: 90, atk: 11, spd: 6 },
  { name: "Cercee", faction: "Nekrium", unlockedAt: 25000, color: "#bc3cff", hp: 115, atk: 12, spd: 5 },
  { name: "Ironbeard", faction: "Alloyin", unlockedAt: 50000, color: "#88c6ff", hp: 160, atk: 18, spd: 3 },
  { name: "Ignir", faction: "Tempys", unlockedAt: 100000, color: "#ff1a1a", hp: 80, atk: 9, spd: 8 },
  { name: "Voss", faction: "Nekrium", unlockedAt: 200000, color: "#9300c2", hp: 120, atk: 22, spd: 6 }
];
const LEVELS = [
  { name:"Frozen Wastes", unlockedAt:0,
    scenes:[
      {bg:"#2e3a5a",desc:"Open tundra, snow drifts."},
      {bg:"#273548",desc:"Ice fissures, howling wind."},
      {bg:"#222831",desc:"Approaching the ice cave entrance."}
    ]
  },
  { name:"Ice Cave", unlockedAt:25000,
    scenes:[
      {bg:"#37496d",desc:"Crystal caverns, slippery floors."},
      {bg:"#486ea6",desc:"Underground river, falling icicles."}
    ]
  },
  { name:"Frozen Forest", unlockedAt:50000,
    scenes:[
      {bg:"#2b3c2d",desc:"Frost-covered trees, lurking enemies."},
      {bg:"#30472e",desc:"Ancient monoliths, magical traps."},
      {bg:"#416b3c",desc:"Sacred grove, level boss."}
    ]
  }
];
// ======= GAME STATE =======
let gameState = "title"; // title, charselect, levelselect, playing, pause, win, lose
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let currentScore = 0;
let selectedCharIdx = 0;
let selectedLevelIdx = 0;
let unlockedChars = () => CHARACTERS.filter(c=>highScore>=c.unlockedAt);
let unlockedLevels = () => LEVELS.filter(l=>highScore>=l.unlockedAt);
// Gameplay
let player = null;
let enemies = [];
let comboCount = 0;
let comboTimer = null;
let comboActive = false;
let playerHealth = 100;
let inGameSceneY = 0;
let currentSceneIdx = 0;
let currentLevelScenes = [];
let sceneTransitioning = false;

// ======= CANVAS SETUP =======
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// ======= INPUT HANDLING =======
const keys = {};
window.addEventListener('keydown', e => keys[e.code]=true );
window.addEventListener('keyup',   e => keys[e.code]=false );

// ======= UTILITIES =======
function drawButton(x,y,w,h,text,isActive) {
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";
  ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}
function clamp(x,a,b){ return Math.max(a,Math.min(x,b)); }
function getComboMultiplier(n){
    if(n>=30) return 4;
    if(n>=20) return 3;
    if(n>=15) return 2.5;
    if(n>=10) return 2;
    if(n>=5) return 1.5;
    return 1;
}
// ======= SCREENS =======
function drawTitle(){
    let grad=ctx.createLinearGradient(0,0,0,canvas.height);
    grad.addColorStop(0,"#191723");
    grad.addColorStop(1,"#502a11");
    ctx.fillStyle=grad;ctx.fillRect(0,0,canvas.width,canvas.height);
    // Animated SolForge
    ctx.save();
    let t=Date.now()/800;
    ctx.translate(canvas.width/2,canvas.height/2-90+Math.sin(t)*8);
    ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
    ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
    ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
    ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
    ctx.fillStyle="#9d2cff";ctx.beginPath();
    ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
    ctx.globalAlpha=1;ctx.restore();
    // Title
    ctx.fillStyle="#ffb347";
    ctx.font="bold 46px Segoe UI";
    ctx.textAlign="center";
    ctx.shadowColor="#602f07";ctx.shadowBlur=14;
    ctx.fillText("FORGEBORN:",canvas.width/2,110);
    ctx.fillStyle="#fff";
    ctx.font="bold italic 36px Segoe UI";
    ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
    ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
    ctx.shadowBlur=0;
    // High score
    ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
    ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);
    // Prompt
    let blink=(Math.floor(Date.now()/500)%2)==0;
    if(blink){
        ctx.font="bold italic 28px Segoe UI";
        ctx.fillStyle="#fff";
        ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
    }
}

function drawCharSelect(){
    ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);
    let chars=CHARACTERS;
    let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;
    for(let i=0;i<chars.length;++i){
        let x=x0+i*spacing,y=180,r=48;
        let isUnlocked=highScore>=chars[i].unlockedAt;
        ctx.save();
        ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
        ctx.globalAlpha=isUnlocked?1:.15;
        ctx.strokeStyle="#fff";ctx.lineWidth=(i==selectedCharIdx)?7:3;ctx.stroke();
        ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
        ctx.fillStyle=chars[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
        if(!isUnlocked){
            ctx.globalAlpha=.5;
            ctx.fillStyle="#222";
            ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();
        }
        ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText(chars[i].name[0],x,y+7);
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
            ctx.fillText("Unlocks @ "+chars[i].unlockedAt,x,y+r+24);
        }
        if(i==selectedCharIdx){
            ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
            ctx.fillText(chars[i].name+" ("+chars[i].faction+")",x,y+r+44);
            if(isUnlocked){
                drawButton(x-48,y+r+56,96,36,"SELECT",true);
            }
        }
        ctx.restore();
    }
}
function drawLevelSelect(){
    ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Select Level",canvas.width/2,64);
    let levels=LEVELS;
    let spacing=70,y0=140;
    for(let i=0;i<levels.length;++i){
        let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
        let isUnlocked=highScore>=levels[i].unlockedAt;
        ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
        ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevelIdx)?4:2;
        ctx.strokeRect(x,y,w,h);
        if(isUnlocked){
            // Use first scene's bg color as preview
            let bgcol = levels[i].scenes[0].bg;
            ctx.fillStyle=bgcol;ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
        }
        // Level name
        ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
        ctx.fillStyle=isUnlocked?"#fff":"#888";
        ctx.fillText(levels[i].name,x+18,y+33);
        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
            ctx.textAlign="center";
            ctx.fillText("Unlocks @ "+levels[i].unlockedAt,x+w/2,y+h+23);
        }
        // Select button if unlocked & selected
        if(isUnlocked && i==selectedLevelIdx){
            drawButton(x+w+14,y+6,92,38,"PLAY",true);
        }
        ctx.restore();
    }
}

// ======= GAMEPLAY/SCENE FUNCTIONS =======
function resetGamePlay(){
   comboCount = comboTimer = comboActive = sceneTransitioning = false;
   currentScore = inGameSceneY = currentSceneIdx = 0;
   currentLevelScenes = LEVELS[selectedLevelIdx].scenes.slice();
   player = {
     ...CHARACTERS[selectedCharIdx],
     x : canvas.width/2,
     y : 120,
     vy : 0,
     width :38,
     height :66,
     onGround:true,
     facingRight:true,
     attackTimer :0,
     attacking : false,
     color : CHARACTERS[selectedCharIdx].color,
     hp : CHARACTERS[selectedCharIdx].hp,
     spd : CHARACTERS[selectedCharIdx].spd,
   };
   playerHealth = player.hp;
   enemies=[];
   spawnEnemiesForScene(currentSceneIdx);
}
function spawnEnemiesForScene(si) {
   enemies=[];
   let baseY=inGameSceneY+240,minX=80,maxX=canvas.width-80,sn=Math.max(3,(si+1)*2);
   for(let i=0;i<sn;++i){
      let ex=Math.random()*(maxX-minX)+minX,
          ey=inGameSceneY + Math.random()*380 +180,
          isElite=Math.random()>.8;
      enemies.push({
         x:ex,y:ey,vx:isElite?(Math.random()-.5)*1.5:(Math.random()-.5),
         vy:.7,
         w:isElite?44:36,
         h:isElite?60:46,
         hp:isElite?42+si*4:20+si*3,
         elite:isElite,
         color:isElite?"#b9eaff":"#e6e6e6",
         aiTmr:(Math.random()*90)|0,
         dead:false,
         dmg:isElite?14+si*3:7+si*2
      });
   }
}
// PLAYER & ENEMY ACTIONS
function updateGameplay(){
   // Controls
   if(player.attackTimer>0) player.attackTimer-=1;
   if(player.y<inGameSceneY+80) player.y+=player.spd; // always descend gently
   if(keys["ArrowLeft"]||keys["KeyA"]){player.x-=player.spd;player.facingRight=false;}
   if(keys["ArrowRight"]||keys["KeyD"]){player.x+=player.spd;player.facingRight=true;}
   player.x=clamp(player.x,36,canvas.width-36);
   if(player.onGround && ((keys["Space"]||keys["ArrowUp"]||keys["KeyW"]))){
     player.vy=-11-(player.spd*.5);player.onGround=false;
   }
   player.y+=player.vy; player.vy+=.7; // gravity
   // Floor/collision
   let floorY=inGameSceneY + canvas.height-70;
   if(player.y>floorY-player.height){ player.y=floorY-player.height;player.vy=0;player.onGround=true;}
   // Attack
   if((keys["KeyJ"]||keys["KeyZ"]||keys["Numpad1"]) && player.attackTimer<=0){
      player.attacking=true;player.attackTimer=22;setTimeout(()=>{player.attacking=false},130);
      // Hit check (melee cone)
      for(let e of enemies) {
          if(e.dead)continue;
          let dx=e.x-player.x,d=Math.abs(dx),dy=Math.abs(e.y-player.y);
          if(d<player.width+e.w && dy<40 && ((dx>0)==player.facingRight)){
              // Damage enemy
              e.hp-=player.atk;
              comboCount++;comboActive=true;if(comboTimer) clearTimeout(comboTimer);
              comboTimer=setTimeout(()=>{comboCount=comboActive=false},1200);
              if(e.hp<=0){ e.dead=true; 
                currentScore+= (e.elite?500:100)*getComboMultiplier(comboCount)|0;}
              else currentScore+=(e.elite?50:20)*getComboMultiplier(comboCount)|0;
          }
      }
   }
   // Enemies AI
   for(let e of enemies){
       if(e.dead) continue;
       e.aiTmr--; if(e.aiTmr<=0){ e.aiTmr=(40+Math.random()*60)|0;e.vx=(Math.random()-.5)*1.7;}
       e.x+=e.vx;e.x=clamp(e.x,e.w/2+28,canvas.width-e.w/2-28);
       // Move towards player vertically
       if(Math.abs(player.y-e.y)>10) e.y+=(player.y>e.y?.7:-.7)*(e.elite?1.27:.93);
       // Attack player?
       if(Math.abs(player.x-e.x)<34 && Math.abs(player.y-e.y)<44 && Math.random()<.02){
           playerHealth-=e.dmg|0;if(comboCount>0){comboCount=comboActive=false;}
       }
   }
   // Combo decay
   if(comboActive && comboTimer && comboCount>0){
      clearTimeout(comboTimer);comboTimer=setTimeout(()=>{comboCount=comboActive=false},1200);
   } else if(comboCount>0 && !comboActive) comboCount--;
   // Remove dead enemies
   enemies=enemies.filter(e=>!e.dead||Math.random()>.06);

   // Scene progression
   let allDead=enemies.every(e=>e.dead)||enemies.length==0;
   let sceneEndY=inGameSceneY + canvas.height-110-player.height-6;

   if(allDead && player.y>sceneEndY && !sceneTransitioning){
     sceneTransitioning=true; setTimeout(()=>{
         nextSceneOrLevel();
         sceneTransitioning=false
     },900)
   }
}
function nextSceneOrLevel(){
   currentSceneIdx++;
   if(currentSceneIdx<currentLevelScenes.length){
       // Next scene in this level
       inGameSceneY+=canvas.height-90;player.y=inGameSceneY+110;spawnEnemiesForScene(currentSceneIdx);
   } else {
       // Level Complete!
       gameState="win";
       // Highscore update
       if(currentScore>highScore){ highScore=currentScore;localStorage.setItem("forgeborn_highscore",highScore);}
   }
}

// DRAW HUD & GAMEPLAY
function drawGameplay(){
   // BG - current scene
   let sc=currentLevelScenes[currentSceneIdx];
   for(let i=0;i<=currentSceneIdx;++i){
     let y=inGameSceneY-(currentSceneIdx-i)*(canvas.height-90);
     let bgc=currentLevelScenes[i].bg||"#222";
     ctx.fillStyle=bgc;ctx.globalAlpha=.98-(currentSceneIdx-i)*.13||.97;ctx.fillRect(0,y,canvas.width,canvas.height-90);
     // Desc label
     if(i==currentSceneIdx){ 
         ctx.globalAlpha=.15;ctx.font="bold italic 39px Segoe UI";ctx.textAlign="center";
         ctx.fillStyle="#fff";ctx.fillText(currentLevelScenes[i].desc||"",canvas.width/2,y+86);}
     ctx.globalAlpha=1;
   }

   // Enemies
   for(let e of enemies){
     if(e.dead){ctx.globalAlpha=.32;}
     else{ctx.globalAlpha=e.elite?.99:.85;}
     ctx.save();
     ctx.beginPath();ctx.arc(e.x,e.y,e.w/2+.4*(!!e.elite),0,Math.PI*2);ctx.closePath();
     ctx.fillStyle=e.color||"#fff";ctx.shadowColor=e.elite?"#b9eaff":"#888";ctx.shadowBlur=e.elite?17:4;ctx.fill();
     // HP bar:
     if(!e.dead){
         let pct=e.hp/(e.elite?42+currentSceneIdx*4:20+currentSceneIdx*3);
         ctx.globalAlpha=.92;
         ctx.fillStyle=e.elite?"#124c9a":"#222";
         ctx.fillRect(e.x-e.w/2,e.y-e.h/2-10,e.w*pct,.11*e.h+7)
     }
     ctx.restore();ctx.globalAlpha=1;}
     
   // Player
   ctx.save();
   let px=player.x,pw=player.width,pcol=player.color||"#fff";
   // Player shadow
   ctx.globalAlpha=.22;ctx.beginPath();ctx.ellipse(px,inGameSceneY+canvas.height-66,pw*.66,pw*.23*Math.abs(Math.sin(Date.now()/330)),0,Math.PI*2);ctx.closePath();ctx.fillStyle="#000";ctx.fill();
   // Body
   ctx.globalAlpha=.93;ctx.beginPath();ctx.rect(px-pw/2,player.y,pw,player.height);ctx.closePath();ctx.strokeStyle="#fff";ctx.lineWidth=3.4;ctx.stroke();
   let gradP=ctx.createLinearGradient(px-pw/2,player.y+pcol.length*3.7|10 ,px+pw/2,(player.y+player.height));
   gradP.addColorStop(0,pcol);gradP.addColorStop(.8,"#fff");gradP.addColorStop(1,"#f3f3f3");
   ctx.globalAlpha=.86;ctx.fillStyle=gradP;ctx.fillRect(px-pw/2+1.5,player.y+3,pw-3.5,player.height-8);

   // Attack arc (simple)
   if(player.attacking){
       ctx.save();ctx.globalAlpha=.32;ctx.strokeStyle="#ffeadf";ctx.lineWidth=7.5;
       let arcX=px+(player.facingRight?pw*.5:-pw*.5),arcY=player.y+33,rw=pw*1.45,rh=pw*.94+aMod(arcX,.41)*6|6,aMod=(a,b)=>Math.abs(Math.sin(Date.now()*b));
       if(player.facingRight)
          {ctx.beginPath();ctx.arc(arcX+12*aMod(arcX,.33),arcY,rw,.7,.05*Math.PI);ctx.stroke();}
       else{ctx.beginPath();ctx.arc(arcX-12*aMod(arcX,.41),arcY,rw,.95*Math.PI,.35*Math.PI,true);ctx.stroke();}
       ctx.restore();
   }
   // Head (face)
   ctx.globalAlpha=.96;ctx.beginPath();ctx.arc(px,(player.y)+21,pw*.29,0,Math.PI*2);ctx.closePath();ctx.fillStyle="#111";ctx.strokeStyle="#fff";ctx.lineWidth=.8;ctx.stroke();ctx.globalAlpha=.97;ctx.fill();

   // Eyes (direction)
   let exoff=(player.facingRight?.13:-.13)*pw;
   for(let i=-1;i<=1;i+=2)
      {ctx.beginPath();ctx.arc(px+i*pw*.12,(player.y)+23,pw*.04,.09,.91*Math.PI);ctx.closePath();ctx.globalAlpha=.7;ctx.fillStyle="#fff";ctx.fill();
       ctx.beginPath();ctx.arc(px+i*pw*.12+exoff,(player.y)+23,pw*.015,.09,.91*Math.PI);ctx.closePath();ctx.globalAlpha=.79;ctx.fillStyle="#222";ctx.fill();}
   
   // Faction icon (mini)
   let factCol={Tempys:"#ff7200",Uterra:"#18d860",Nekrium:"#bc3cff",Alloyin:"#88c6ff"};
   let fcol=factCol[player.faction]||"#fff";
   ctx.beginPath();for(let a=-90;a<270;a+=60){let rad=a*Math.PI/180,rp=Math.cos(rad),rq=Math.sin(rad);let xx=px+rp*pw*.37-offX(),yy=player.y+10+rq*pw*.17-offX();if(a===-90)ctx.moveTo(xx,yy);else ctx.lineTo(xx,yy);}
      function offX(){return Math.sin(Date.now()/480)*2;}
      ctx.closePath();ctx.globalAlpha=.85;ctx.strokeStyle=fcol;ctx.lineWidth=2.5;ctx.stroke();

   // Health bar (above head)
   let pctH=Math.max(0,(playerHealth/player.hp));
   let hx=px-pw*.44,hW=pw*.87,hY=(player.y)-14,hH=pw*.16|7;
   ctx.globalAlpha=.85;ctx.strokeStyle="#fff";ctx.lineWidth=hH*.21|1.8;ctx.strokeRect(hx,hY,hW,hH);
   let gradH=ctx.createLinearGradient(hx,hY,hx+hW,hY+hH);gradH.addColorStop(0,"#eb4646");gradH.addColorStop(pctH,"#9fd650");gradH.addColorStop(1,"#151");
   if(pctH>0){ 
      ctx.globalAlpha=.82+(pctH>.99?.08:-.05); 
      if(playerHealth/player.hp<.35&&Math.floor(Date.now()/180)%2===1) gradH.addColorStop(.99,"#ffe7a7");
      ctx.fillStyle=gradH; 
      let fillW=hW*pctH|3;
      fillW=Math.max(fillW,hW*.08|3); 
      ctx.fillRect(hx,hY,(fillW),hH);}
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

   
   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      

      
      

      

      

      

      

      

      
            
      
      
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
                                
        
        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
        

        
        
        
        
        
                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
               
                
             
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              

                 
                 
                 
              

                 

                 
                 

                 

                 

                 

                 

                 

                 

                 

                 

                 

                 

                 

                 

                 
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                   

                   
                
                
               
        
        
                
            
            
            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            




// HUD bar (top)
let hudGrad=ctx.createLinearGradient(20,18,790,(18));
hudGrad.addColorStop(0,"#262335");hudGrad.addColorStop(.65,"#191723");hudGrad.addColorStop(1,"#502a11");
ctx.globalAlpha=.93;ctx.fillStyle=hudGrad;
ctx.fillRect(12,inGameSceneY+12,776,44); 
// Score/combo on HUD:
let mult=getComboMultiplier(comboCount),hudTxt=`SCORE ${currentScore|0} | COMBO ${comboCount>1?comboCount+'x (×'+mult+')':''} | HIGH SCORE ${highScore}`;
if(comboCount>1){ hudTxt+=" | Keep Hitting!";}
if(playerHealth<=0){ gameState="lose";}
if(gameState==="lose"){ hudTxt+=" | YOU DIED!";}
if(gameState==="win"){ hudTxt+=" | LEVEL COMPLETE!";}
 
// HUD text:
ctx.font="bold italic 21px Segoe UI"; 
// Glow effect:
for(let j=-1;j<=1;j++){for(let k=-1;k<=1;k++){
if(j!=0||k!=0){ 
	ctx.save();
	ctx.shadowColor="#ffb347";
	ctx.shadowBlur=8;
	ctx.globalAlpha=.22;.fillText(hudTxt,(canvas.width/2)+j,(inGameSceneY+38)+k);}
}}
	ctx.shadowBlur=0; 
	ctx.globalAlpha=.99;.fillText(hudTxt,(canvas.width/2),(inGameSceneY+38));
	ctx.restore();

}

// WIN / LOSE / PAUSE SCREENS
function drawWin(){
	ctx.save();
	ctx.globalAlpha=.89; 
	ctx.fillStyle="#16151a"; 
	ctx.fillRect(60,190,680,220); 
	ctx.strokeStyle="#ffb347"; 
	ctx.lineWidth=4; 
	ctx.strokeRect(62,192,676,216); 
	ctx.globalAlpha=.98;
	ctx.font="bold italic 44px Segoe UI"; 
	ctx.textAlign="center"; 
	ctx.fillStyle="#fff"; 
	ctx.fillText("LEVEL COMPLETE!",canvas.width/2,260); 
	ctx.font="bold italic 26px Segoe UI";
	ctx.fillText("Score this run:",canvas.width/2-110 ,320); 
	ctx.font="bold italic 34px Segoe UI"; 
	ctx.fillStyle="#f7e17c"; 
	ctx.textAlign="left";
	ctx.fillText(currentScore.toLocaleString(),canvas.width/2-25 ,320); 
	let unlockMsg="";
	let nextUnlock=null,minThresh=null,maxThresh=null,nextType="";
	// Show next unlock
	for(let c of CHARACTERS)if(currentScore<c.unlockedAt&&(minThresh==null || c.unlockedAt<minThresh)){minThresh=c.unlockedAt;nextUnlock=c.name,nextType='Character';}
	for(let l of LEVELS)if(currentScore<l.unlockedAt&&(minThresh==null || l.unlockedAt<minThresh)){minThresh=l.unlockedAt,nextUnlock=l.name,nextType='Level';}
	if(nextUnlock)
		unlockMsg=`Next unlock (${nextType}): ${nextUnlock} at ${minThresh.toLocaleString()} points`;
	else unlockMsg=`All characters and levels unlocked!`;
	ctx.font="italic bold 22px Segoe UI"; 
	ctx.textAlign="center";
	ctx.fillStyle="#bc3cff";
	ctx.fillText(unlockMsg ,canvas.width/2 ,370);  
	drawButton(canvas.width/2-60 ,405 ,120 ,44 ,"CONTINUE" ,true );
	ctx.restore();
}

function drawLose(){
	ctx.save();
	ctx.globalAlpha=.92; 
	ctx.fillStyle="#16151a"; 
	ctx.fillRect(60 ,190 ,680 ,220 ); 
	ctx.strokeStyle="#bc3cff "; 
	ctx.lineWidth=4 ; 
	ctx.strokeRect(62 ,192 ,676 ,216 );  
	ctx.globalAlpha=.98 ;
	ctx.font="bold italic 44px Segoe UI "; 
	ctx.textAlign="center "; 
	ctx.fillStyle="#fff "; 
	ctx.fillText("YOU HAVE FALLEN ",canvas.width /2 ,260 );  
	ctx.font="bold italic 26px Segoe UI ";
	ctx.textAlign="center ";
	ctx.font="bold italic 26px Segoe UI ";  
	ctx.fillText("Final Score:",canvas.width /2 -110 ,320 );  
	ctx.font="bold italic 34px Segoe UI ";
	ctx.textAlign="left ";
	ctx.fillStyle="#f7e17c ";
	ctx.fillText(currentScore.toLocaleString(),canvas.width /2 -25 ,320 );  
	let unlockMsg="";
	let nextUnlock=null,minThresh=null,maxThresh=null,nextType="";
	for(let c of CHARACTERS )if(currentScore <c.unlockedAt &&(minThresh ==null || c.unlockedAt <minThresh )){minThresh =c.unlockedAt ;nextUnlock =c.name ;nextType ='Character';}
	for(let l of LEVELS )if(currentScore <l.unlockedAt &&(minThresh ==null || l.unlockedAt <minThresh )){minThresh =l.unlockedAt ;nextUnlock =l.name ;nextType ='Level';}
	if(nextUnlock )
		unlockMsg=`Next unlock (${nextType}): ${nextUnlock} at ${minThresh.toLocaleString()} points`;
	else unlockMsg=`All characters and levels unlocked!`;
	ctx.font="italic bold 22px Segoe UI ";
	ctx.textAlign="center ";
	ctx.fillStyle ="#bc3cff ";
	ctx.fillText(unlockMsg ,canvas.width /2 ,370 );  
	drawButton(canvas.width /2 -60 ,405 ,120 ,44 ,"RETRY" ,true );
	ctx.restore();
}
//======= MAIN LOOP =======
function mainLoop(){
	if(gameState==="title"){ drawTitle();}
	else if(gameState==="charselect"){ drawCharSelect();}
	else if(gameState==="levelselect"){ drawLevelSelect();}
	else if(gameState==="playing"){
		updateGameplay();
		drawGameplay();
	}
	else if(gameState==="win"){drawGameplay();drawWin();}
	else if(gameState==="lose"){drawGameplay();drawLose();}
	requestAnimationFrame(mainLoop);
}
mainLoop();

//======= INPUT EVENTS FOR SCREENS =======
window.addEventListener('mousedown', e=>{
	let mx=e.offsetX,my=e.offsetY;

	if(gameState==="charselect"){
		let chars=CHARACTERS,len=chars.length,x0=canvas.width/2-(len-1)*110/2,yCen=180,rCen=48;
		for(let i=0;i<len;++i){
			let x=x0+i*110,y=yCen,r=rCen,isUnlocked=highScore>=chars[i].unlockedAt;
			if(Math.hypot(mx-x,my-y)<rCen+24){ selectedCharIdx=i;}
			// Click select button?
			if(i==selectedCharIdx && isUnlocked && mx>x-48&&mx<x+48&&my>y+rCen+56&&my<y+rCen+92 ){
				gameState="levelselect";
			}
		}
	}
	else if(gameState==="levelselect"){
		let levels=LEVELS,len=levels.length,xCenL=canvas.width/2-120,yStartL=140,wL=240,hL=52,sL=70;
		for(let i=0;i<len;++i){
			let y=yStartL+i*sL,x=xCenL,isUnlocked=highScore>=levels[i].unlockedAt;
			if(mx>x&&mx<x+wL&&my>y&&my<y+hL){ selectedLevelIdx=i;}
			if(isUnlocked&&i==selectedLevelIdx&&mx>x+wL+14&&mx<x+wL+106&&my>y+6&&my<y+44){
				resetGamePlay();gameState="playing";
			}
		}
	}
	else if(gameState==="win"){
		if(mx>canvas.width/2-60&&mx<canvas.width/2+60&&my>405&&my<449){gameState="title";}
	}
	else if(gameState==="lose"){
		if(mx>canvas.width/2-60&&mx<canvas.width/2+60&&my>405&&my<449){resetGamePlay();gameState="playing";}
	}
});

window.addEventListener('keydown', e=>{
	if(gameState==="title"){gameState="charselect";}
	else if(gameState==="charselect"){
		if(e.code=="ArrowLeft"||e.code=="KeyA"){ selectedCharIdx=Math.max(0,--selectedCharIdx);}
		else if(e.code=="ArrowRight"||e.code=="KeyD"){ selectedCharIdx=Math.min(CHARACTERS.length-1,++selectedCharIdx);}
		else if(e.code=="Enter"||e.code=="Space"){
			if(highScore>=CHARACTERS[selectedCharIdx].unlockedAt){gameState="levelselect";}
		}
	}
	else if(gameState==="levelselect"){
		if(e.code=="ArrowUp"||e.code=="KeyW"){ selectedLevelIdx=Math.max(0,--selectedLevelIdx);}
		else if(e.code=="ArrowDown"||e.code=="KeyS"){ selectedLevelIdx=Math.min(LEVELS.length-1,++selectedLevelIdx);}
		else if(e.code=="Enter"||e.code=="Space"){
			if(highScore>=LEVELS[selectedLevelIdx].unlockedAt){resetGamePlay();gameState="playing";}
		}
	}
	else if(gameState==="win"){gameState="title";}
	else if(gameState==="lose"){resetGamePlay();gameState="playing";}
});
</script>
</body>
</html>