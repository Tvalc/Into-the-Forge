<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    body { margin:0; background:#000; font-family:Arial,Segoe UI,sans-serif; overflow:hidden; }
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center; }
    canvas { display:block; background:#18121a; box-shadow:0 0 32px #222; }
  </style>
</head>
<body>
<div id="gameContainer">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
</div>
<script>
// === DATA ===
const CHARACTERS = [
  { name:"Korok", faction:"Tempys", unlockedAt:0, color:"#ff7200", desc:"Tank with area control", hp:140, atk:15, spd:4 },
  { name:"Oros", faction:"Alloyin", unlockedAt:10000, color:"#18d860", desc:"Ranged combat, defensive", hp:90, atk:11, spd:6 },
  { name:"Cercee", faction:"Uterra", unlockedAt:25000, color:"#bc3cff", desc:"Support/crowd control", hp:110, atk:12, spd:6 },
  { name:"Ironbeard", faction:"Alloyin", unlockedAt:50000, color:"#88c6ff", desc:"Heavy damage, slow", hp:160, atk:19, spd:2 },
  { name:"Ignir", faction:"Tempys", unlockedAt:100000, color:"#ff1a1a", desc:"Fast-paced combo fighter", hp:70, atk:9, spd:8 },
  { name:"Voss", faction:"Nekrium", unlockedAt:200000, color:"#9300c2", desc:"Secret Nekrium powers", hp:120, atk:25, spd:5 }
];
const LEVELS = [
  { name:"Frozen Wastes", unlockedAt:0 },
  { name:"Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 },
];
const SCENE_BACKGROUNDS = ["#283040","#21273A","#153855"];

// === STATE ===
let state = "title"; // title,charselect,levelselect,playing,win
let selectedChar = 0;
let selectedLevel = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore") || "0");
let score = 0;
let combo = 0;
let comboTimer = 0;
let canvas = document.getElementById('gameCanvas');
let ctx = canvas.getContext('2d');
let keys = {};
window.addEventListener('keydown', e => {
  keys[e.key] = true;
  // Only allow state change on keydown for these screens:
  if(state==="title") { state="charselect"; keys={}; }
});
window.addEventListener('keyup', e => { keys[e.key] = false; });

let player = null;
let enemies = [];
let playerInvuln = 0;
let sceneY = 0;

// === MAIN LOOP ===
function loop() {
  ctx.clearRect(0,0,canvas.width,canvas.height);
  switch(state) {
    case "title": drawTitle(); break;
    case "charselect": drawCharSelect(); break;
    case "levelselect": drawLevelSelect(); break;
    case "playing": drawGame(); break;
    case "win": drawWin(); break;
  }
  requestAnimationFrame(loop);
}
loop();

// === SCREENS ===
function drawTitle() {
  let grad=ctx.createLinearGradient(0,0,0,canvas.height);
  grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
  ctx.fillStyle=grad; ctx.fillRect(0,0,canvas.width,canvas.height);
  let t=Date.now()/800;
  ctx.save();
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#bc3cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();
  ctx.fillStyle="#ffb347"; ctx.font="bold 46px Segoe UI"; ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.fillStyle="#fff"; ctx.font="bold italic 36px Segoe UI";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160); ctx.shadowBlur=0;
  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);
  if(Math.floor(Date.now()/500)%2===0) {
    ctx.font="bold italic 28px Segoe UI";ctx.fillStyle="#fff";
    ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }
}
function drawCharSelect() {
  ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing = 120;
  let x0 = canvas.width/2 - ((CHARACTERS.length-1)*spacing)/2;
  for(let i=0;i<CHARACTERS.length;++i) {
    let x=x0+i*spacing,y=220,r=48,isUnlocked=highScore>=CHARACTERS[i].unlockedAt;
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.15;ctx.strokeStyle="#fff";ctx.lineWidth=i===selectedChar?7:3;ctx.stroke();
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    if(!isUnlocked){ctx.globalAlpha=.5;ctx.fillStyle="#222";ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();}
    ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);
    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
      ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt,x,y+r+24);
    }
    if(i===selectedChar) {
      ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
      ctx.fillText(CHARACTERS[i].name+" ("+CHARACTERS[i].faction+")",x,y+r+44);
      if(isUnlocked){
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
        if(keys["Enter"]||keys[" "]) {
          state="levelselect";
          keys["Enter"]=keys[" "]=false;
        }
      }
      ctx.font="16px Segoe UI";ctx.fillStyle="#aaa";
      ctx.fillText(CHARACTERS[i].desc,x,y+r+80);
    }
    ctx.restore();
    // Navigation
    if(keys["ArrowLeft"]&&i===selectedChar&&i>0){selectedChar--;keys["ArrowLeft"]=false;}
    if(keys["ArrowRight"]&&i===selectedChar&&i<CHARACTERS.length-1){selectedChar++;keys["ArrowRight"]=false;}
  }
}
function drawButton(x,y,w,h,text,isActive){
  ctx.save();ctx.globalAlpha=isActive?1:.5;
  ctx.fillStyle=isActive?"#ff9200":"#555";
  ctx.fillRect(x,y,w,h);ctx.strokeStyle="#fff";ctx.lineWidth=2;ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";ctx.font="bold 22px Segoe UI";
  ctx.textAlign="center";ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);ctx.restore();
}
function drawLevelSelect() {
  ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Select Level",canvas.width/2,64);

  let spacing=70,y0=140;
  for(let i=0;i<LEVELS.length;++i){
    let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
    let isUnlocked=highScore>=LEVELS[i].unlockedAt;
    ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
    ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevel)?4:2;
    ctx.strokeRect(x,y,w,h);
    if(isUnlocked){
      ctx.fillStyle=SCENE_BACKGROUNDS[i%SCENE_BACKGROUNDS.length];
      ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
    }
    ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
    ctx.fillStyle=isUnlocked?"#fff":"#888";
    ctx.fillText(LEVELS[i].name,x+18,y+33);

    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;ctx.textAlign="center";
      ctx.fillText("Unlocks @ "+LEVELS[i].unlockedAt,x+w/2,y+h+23);
    }
    if(isUnlocked && i==selectedLevel){
      drawButton(x+w+14,y+6,92,38,"PLAY",true);
      if(keys["Enter"]||keys[" "]){ startGame(); keys["Enter"]=keys[" "]=false;}
    }
    ctx.restore();
    if(keys["ArrowUp"]&&i===selectedLevel&&i>0){selectedLevel--;keys["ArrowUp"]=false;}
    if(keys["ArrowDown"]&&i===selectedLevel&&i<LEVELS.length-1){selectedLevel++;keys["ArrowDown"]=false;}
  }
}

// ==== GAMEPLAY IMPLEMENTATION (vertical descent demo) ====
function startGame() {
   // Setup player and state for selected char/level
   let c=CHARACTERS[selectedChar];
   player = {
     x:canvas.width/2,
     y:80,
     vx:0,
     vy:0,
     w:44,h:68,
     col:c.color,
     onGround:false,
     hp:c.hp,
     maxhp:c.hp,
     atk:c.atk,
     spd:c.spd,
     facingRight:true,
     canJump:true
   };
   score = 0;
   combo = 0;
   sceneY = 0;
   enemies = [];
   state = "playing";
}
function drawGame() {
   // BG
   let bgCol=SCENE_BACKGROUNDS[selectedLevel%SCENE_BACKGROUNDS.length];
   ctx.fillStyle=bgCol;
   ctx.fillRect(0,sceneY*-1,canvas.width,canvas.height*2);

   // HUD
   drawHUD();

   // Player controls
   let moveX = (keys["ArrowLeft"]?-1:0)+(keys["ArrowRight"]?1:0);
   player.x += moveX*player.spd;
   player.x = Math.max(player.w/2, Math.min(canvas.width-player.w/2,player.x));
   if((keys["ArrowUp"]||keys[" "]) && player.canJump && player.onGround){
     player.vy=-13; player.onGround=false; player.canJump=false;
   }
   if(!keys["ArrowUp"]&&!keys[" "]) player.canJump=true;

   // Gravity and vertical movement:
   player.vy += .7;
   player.y += player.vy;
   if(player.y > canvas.height-40) {
     player.y = canvas.height-40; player.vy=0; player.onGround=true;
   } else { player.onGround=false;}
   // Scene scroll follows player downwards:
   if(player.y > canvas.height/2 && sceneY < canvas.height) {
     sceneY += (player.y-canvas.height/2)*.3;
     player.y -= (player.y-canvas.height/2)*.3;
   }

   // Player render
   ctx.save();
   ctx.translate(player.x,player.y-sceneY);
   ctx.globalAlpha=.93;
   // Body
   ctx.fillStyle=player.col; 
   ctx.beginPath(); 
   ctx.ellipse(0,15,player.w/2.3,player.h/2.1,0,0,Math.PI*2); 
   ctx.closePath(); 
   ctx.shadowBlur=18; 
   ctx.shadowColor="#fff";
   ctx.fill();
   // Face
   ctx.shadowBlur=0; 
   ctx.strokeStyle="#fff";
   ctx.lineWidth=3;
   ctx.beginPath();
   ctx.arc(0,-10,19,.2,.9*Math.PI,false); 
   ctx.stroke();
   // Eyes
   ctx.beginPath();
   ctx.arc(-7,-18,4,.1,.9*Math.PI,false); 
   ctx.stroke();
   ctx.beginPath();
   ctx.arc(7,-18,4,.1,.9*Math.PI,false); 
   ctx.stroke();
   // Name
   ctx.font="bold italic 16px Segoe UI";
   ctx.textAlign="center";
   ctx.textBaseline="bottom";
   ctx.globalAlpha=.77;
   ctx.fillStyle="#fff";
   ctx.fillText(CHARACTERS[selectedChar].name+" ("+CHARACTERS[selectedChar].faction+")",0,-player.h/2-8);
   // Health bar
   let hpw=Math.max(44*(player.hp/player.maxhp),4);
   ctx.globalAlpha=.9;
   ctx.fillStyle="#ffb347";
   ctx.fillRect(-22,-player.h/2-22,hpw,7);
   ctx.restore();

   // Win condition (reaching bottom)
   if(sceneY >= canvas.height-20) {
     score += Math.floor(Math.random()*200)+800; // Award random score per run!
     if(score > highScore) {
       highScore = score; localStorage.setItem("forgeborn_highscore",score);
     }
     setTimeout(()=>{ state="win"; },500);
     return;
   }

}

function drawHUD() {
 // Top Bar
 let barH =36;
 // BG
 let grad=ctx.createLinearGradient(0,0,canvas.width*1.5,barH);
 grad.addColorStop(0,"#262335");grad.addColorStop(1,"#191723");
 ctx.globalAlpha=.98;ctx.fillStyle=grad;ctx.fillRect(0,0,canvas.width*1.5,barH);
 // Score
 ctx.font="bold italic 22px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=1.00;ctx.fillStyle="#ffc447";
 ctx.fillText("SCORE "+score.toLocaleString(),24,26);
 // Health
 let hpPct = Math.max(0,(player.hp/player.maxhp));
 let barW = clamp(hpPct*140+4,4,144);
 let hpColor = hpPct>.5?"#18d860":hpPct>.25?"#ffb347":"#ff2147";
 // Health bar frame
 let yb=12;
 ctx.strokeStyle="#fff";ctx.lineWidth=3;ctx.globalAlpha=.75; 
 ctx.strokeRect(canvas.width-170,yb-4,144+6,barH-10);
 // Health fill
 ctx.globalAlpha=.92;
 ctx.fillStyle=hpColor; 
 ctx.fillRect(canvas.width-166,yb-1.5,barW,(barH-15));
 // Label
 ctx.font="bold italic 19px Segoe UI";
 ctx.globalAlpha=.95; 
 ctx.textAlign="right";
 ctx.fillStyle="#fff";
 ctx.fillText("HEALTH",canvas.width-24,yb+19);

}

function drawWin() {
   // Level Complete Screen
   let c=CHARACTERS[selectedChar], l=LEVELS[selectedLevel];
   let boxw=424,bh=260,x=(canvas.width-boxw)/2,y=(canvas.height-bh)/2;
   // BG panel
   ctx.globalAlpha=.97; 
   let grad=ctx.createLinearGradient(x,y,x+boxw,y+bh);
   grad.addColorStop(0,"#232e35");
   grad.addColorStop(1,"#191723");
   ctx.fillStyle=grad; 
   roundRect(x,y,boxw,bh,22,true,false);

   // Texts
   let yy=y+44;
   ctx.globalAlpha=1.00; 
   ctx.font="bold italic 42px Segoe UI";
   ctx.textAlign="center"; 
   ctx.fillStyle="#ffc447";
   ctx.fillText("LEVEL COMPLETE!",canvas.width/2,y+60);

   yy+=38;
   drawStatLine("Level:",l.name,(yy+=32));
   drawStatLine("Character:",c.name+" ("+c.faction+")",(yy+=32));
   drawStatLine("Run Score:",score.toLocaleString(),(yy+=32));
   drawStatLine("High Score:",highScore.toLocaleString(),(yy+=32));
   
   // Continue button
   drawButton(canvas.width/2-70,y+bh-54,140,40,"Continue",true);

   if(keys["Enter"]||keys[" "]) { state="title"; keys={}; }
}
function roundRect(x,y,w,h,r,f,s){
 if(f){ctx.beginPath();ctx.moveTo(x+r,y);ctx.arcTo(x+w,y,x+w,y+h,r);ctx.arcTo(x+w,y+h,x,y+h,r);ctx.arcTo(x,y+h,x,y,r);ctx.arcTo(x,y,x+w,y,r);ctx.closePath();ctx.fill();}
 if(s){ctx.stroke();}
}
function drawStatLine(label,val,y){
 let xl=canvas.width/2-90,xr=canvas.width/2+90;
 ctx.font="22px Segoe UI"; 
 // Label left
 ctx.textAlign="right"; 
 ctx.globalAlpha=.86; 
 ctx.fillStyle="#fff";
 ctx.fillText(label,xl,y);
 // Value right
 ctx.textAlign="left";
 let col=/score/i.test(label)? "#ffc447":"#f7e17c";
 if(/character/i.test(label)) col="#bc3cff";
 if(/level/i.test(label)) col="#18d860";
 ctx.globalAlpha=.97;
 ctx.fillStyle=col;
 ctx.font="bold italic 23px Segoe UI";
 ctx.fillText(val,xr,y);
}

// --- Utilities ---
function clamp(x,a,b){ return Math.max(a,Math.min(x,b)); }

</script>
</body>
</html>