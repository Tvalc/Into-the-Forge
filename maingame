// ============ CONSTANTS & DATA =============

const CHARACTERS = [
  { name: "Korok", faction: "Tempys", unlockedAt: 0, color: "#ff7200" },
  { name: "Oros", faction: "Uterra", unlockedAt: 10000, color: "#18d860" },
  { name: "Cercee", faction: "Nekrium", unlockedAt: 25000, color: "#bc3cff" },
  { name: "Ironbeard", faction: "Alloyin", unlockedAt: 50000, color: "#88c6ff" },
  { name: "Ignir", faction: "Tempys", unlockedAt: 100000, color: "#ff1a1a" },
  { name: "Voss", faction: "Nekrium", unlockedAt: 200000, color: "#9300c2" }
];

const LEVELS = [
  { name:"The Frozen Wastes", unlockedAt:0 },
  { name:"The Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 }
];

const SCENE_BACKGROUNDS = ["#2e3a5a", "#273548", "#222831"];

// ============ GAME STATE ============
let gameState = "title"; // title, highscore, charselect, levelselect, playing, pause, win, lose
let highScore = Number(localStorage.getItem("forgeborn_highscore") || "0");
let currentScore = 0;
let selectedCharIdx = 0;
let selectedLevelIdx = 0;

let player = null;
let enemies = [];
let comboCount = 0;
let comboTimer = null;
let playerHealth = 100;
let inGameSceneY = 0; // vertical scroll

// ============ CANVAS SETUP ============
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// ============ UTILITIES ============
function lerp(a,b,t){ return a+(b-a)*t; }
function clamp(x,a,b){ return Math.max(a,Math.min(x,b)); }
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";
  ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}

function getUnlockedChars(){ return CHARACTERS.filter(c=>highScore>=c.unlockedAt);}
function getUnlockedLevels(){ return LEVELS.filter(l=>highScore>=l.unlockedAt);}

// ============ STATEFUL INPUT ============
let keys = {};
window.addEventListener('keydown', e => { keys[e.key] = true; });
window.addEventListener('keyup', e => { keys[e.key] = false; });

// ============ MAIN LOOP ============
function mainLoop(){
    ctx.clearRect(0,0,canvas.width,canvas.height);
    switch(gameState){
        case "title": drawTitle(); break;
        case "charselect": drawCharSelect(); break;
        case "levelselect": drawLevelSelect(); break;
        case "playing": drawGamePlay(); break;
        case "win": drawWin(); break;
        case "lose": drawLose(); break;
        // Add more as needed
    }
    requestAnimationFrame(mainLoop);
}
mainLoop();

// ============ TITLE SCREEN ============
function drawTitle(){
    // BG
    let grad=ctx.createLinearGradient(0,0,0,canvas.height);
    grad.addColorStop(0,"#191723");
    grad.addColorStop(1,"#502a11");
    ctx.fillStyle=grad;ctx.fillRect(0,0,canvas.width,canvas.height);

    // Animated Solforge Tower
    ctx.save();
    let t=Date.now()/800;
    ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
    ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
    ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
    ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
    // Corruption effect
    ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
    ctx.fillStyle="#9d2cff";ctx.beginPath();
    ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
    ctx.globalAlpha=1;ctx.restore();

    // Title
    ctx.fillStyle="#ffb347";
    ctx.font="bold 46px Segoe UI";
    ctx.textAlign="center";
    ctx.shadowColor="#602f07";ctx.shadowBlur=14;
    ctx.fillText("FORGEBORN:",canvas.width/2,110);
    ctx.fillStyle="#fff";
    ctx.font="bold italic 36px Segoe UI";
    ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
    ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
    ctx.shadowBlur=0;

    // High Score
    ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
    ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

    // Prompt
    let blink=(Math.floor(Date.now()/500)%2)==0;
    if(blink){
        ctx.font="bold italic 28px Segoe UI";
        ctx.fillStyle="#fff";
        ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
    }

    // Input
    if(Object.values(keys).some(v=>v)){
        gameState="charselect"; keys={};
    }
}

// ============ CHARACTER SELECT ============
function drawCharSelect(){
    // BG
    ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

    let chars=CHARACTERS;
    let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;

    for(let i=0;i<chars.length;++i){
        let x=x0+i*spacing,y=180,r=48,isUnlocked=highScore>=chars[i].unlockedAt;
        // Portrait circle
        ctx.save();
        ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
        ctx.globalAlpha=isUnlocked?1:.15;
        ctx.strokeStyle="#fff";ctx.lineWidth=(i==selectedCharIdx)?7:3;ctx.stroke();
        // Faction color
        ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
        ctx.fillStyle=chars[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
        if(!isUnlocked){
            ctx.globalAlpha=.5;ctx.fillStyle="#222";
            ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();
        }
        // Char initial
        ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText(chars[i].name[0],x,y+7);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
            ctx.fillText("Unlocks @ "+chars[i].unlockedAt,x,y+r+24);
        }
        if(i==selectedCharIdx){
            ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
            ctx.fillText(chars[i].name+" ("+chars[i].faction+")",x,y+r+44);
            if(isUnlocked){
                drawButton(x-48,y+r+56,96,36,"SELECT",true);
                if(keys["Enter"]||keys[" "]){
                    gameState="levelselect"; keys={};
                }
            }
        }
        // Navigation
        if(keys["ArrowLeft"]&&i==selectedCharIdx&&i>0){selectedCharIdx--;keys["ArrowLeft"]=false;}
        if(keys["ArrowRight"]&&i==selectedCharIdx&&i<chars.length-1){selectedCharIdx++;keys["ArrowRight"]=false;}
        ctx.restore();
    }
}

// ============ LEVEL SELECT ============
function drawLevelSelect(){
    // BG
    ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Select Level",canvas.width/2,64);

    let levels=LEVELS;
    let spacing=70,y0=140;

    for(let i=0;i<levels.length;++i){
        let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
        let isUnlocked=highScore>=levels[i].unlockedAt;

        // BG box
        ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
        ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevelIdx)?4:2;
        ctx.strokeRect(x,y,w,h);
        // Preview BG color block for demo
        if(isUnlocked){
            ctx.fillStyle=SCENE_BACKGROUNDS[i%SCENE_BACKGROUNDS.length];
            ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
        }

        // Level name
        ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
        ctx.fillStyle=isUnlocked?"#fff":"#888";
        ctx.fillText(levels[i].name,x+18,y+33);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
            ctx.textAlign="center";
            ctx.fillText("Unlocks @ "+levels[i].unlockedAt,x+w/2,y+h+23);
        }

        // Select button if unlocked & selected
        if(isUnlocked && i==selectedLevelIdx){
            drawButton(x+w+14,y+6,92,38,"PLAY",true);
            if(keys["Enter"]||keys[" "]){
                startGamePlay();
                keys={};
            }
        }
        // Navigation
        if(keys["ArrowUp"]&&i==selectedLevelIdx&&i>0){selectedLevelIdx--;keys["ArrowUp"]=false;}
        if(keys["ArrowDown"]&&i==selectedLevelIdx&&i<levels.length-1){selectedLevelIdx++;keys["ArrowDown"]=false;}
        ctx.restore();
    }
}

// ============ GAMEPLAY SCENE ============
function startGamePlay(){
    currentScore=0;comboCount=0;playerHealth=100;inGameSceneY=0;enemies=[];
    let char=getUnlockedChars()[selectedCharIdx];
    player={
      x:canvas.width/2,
      y:80,
      vx:0,
      vy:0,
      w:42,h:68,
      col:char.color,
      attacking:false,
      attackTimer:0,
      onGround:true,
      facingRight:true,
      comboTimer:null,
      spriteFrame:0,
      name:char.name,
      jumpV:-9,
      speed:5,
      gravity:.7,
      hp:100,
      atkPower:9,
      specialReady:true
    };
    spawnEnemyWave();
    gameState="playing";
}

function spawnEnemyWave(){
   for(let i=0;i<4;i++){
     enemies.push({
       type:"Frostling",
       x:Math.random()*(canvas.width-80)+40,
       y:inGameSceneY+250+Math.random()*220,
       w:36,h:54,
       color:"#5ec6ff",
       hp:30,
       maxhp:30,
       atk:8,
       spd:2.5,
       vx:(Math.random()<.5?-1:1)*2.5*.7,
       vy:2.5*.7,
       alive:true
     });
   }
}

function drawGamePlay(){
   // BG (simple color)
   let bgcol = SCENE_BACKGROUNDS[selectedLevelIdx % SCENE_BACKGROUNDS.length];
   ctx.fillStyle=bgcol||"#222";ctx.fillRect(0,0,canvas.width,canvas.height);

   // Player (simple rect)
   if(player){
     // Shadow
     ctx.save();
     ctx.globalAlpha=.22;ctx.beginPath();
     ctx.ellipse(player.x,player.y+player.h-6,player.w*.46,10,0,0,Math.PI*2);ctx.fillStyle="#111";ctx.fill();
     ctx.globalAlpha=1;ctx.restore();

     // Body
     ctx.save();
     ctx.beginPath();ctx.rect(player.x-player.w/2,player.y-player.h/2,player.w,player.h);ctx.closePath();
     ctx.fillStyle=player.col;ctx.globalAlpha=.98;ctx.fill();

     // Face/faction circle (stylized)
     ctx.beginPath();ctx.arc(player.x,player.y-player.h/3.4,player.w/4.3,0,Math.PI*2);ctx.closePath();
     ctx.globalAlpha=.8;ctx.fillStyle="#fff";ctx.fill();

     // Name initial
     ctx.globalAlpha=1;ctx.font="bold italic 28px Segoe UI";
     ctx.textAlign="center";ctx.textBaseline="middle";
     ctx.fillStyle="#333";ctx.fillText(player.name[0],player.x,player.y-player.h/3.6+1);
     ctx.restore();
   }

   // Enemies (simple shapes)
   for(let enemy of enemies){
       if(!enemy.alive) continue;
       // Shadow
       ctx.save();ctx.globalAlpha=.12;ctx.beginPath();
       ctx.ellipse(enemy.x,enemy.y+enemy.h-6,enemy.w*.38,8,0,0,Math.PI*2);ctx.fillStyle="#000";ctx.fill();
       // Body
       ctx.globalAlpha=.95;ctx.beginPath();
       ctx.rect(enemy.x-enemy.w/2,enemy.y-enemy.h/2,enemy.w,enemy.h);ctx.closePath();
       ctx.fillStyle=enemy.color;ctx.fill();

       // Eyes (icy blue)
       ctx.beginPath();ctx.arc(enemy.x-9,enemy.y-enemy.h/4.8+3.5,4.3,0,Math.PI*2);ctx.arc(enemy.x+9,enemy.y-enemy.h/4.8+3.5,4.3,0,Math.PI*2);ctx.closePath();
       ctx.globalAlpha=.58;ctx.fillStyle="#e6f8ff";ctx.fill();

       // Health bar
       let barW=32*clamp(enemy.hp/enemy.maxhp,.05,1),barX=enemy.x-barW/2;
       let barY=enemy.y-enemy.h/1.5-9;
       ctx.globalAlpha=.95;ctx.strokeStyle="#fff";ctx.lineWidth=3;ctx.beginPath();ctx.moveTo(barX-1.5,barY);ctx.lineTo(barX+barW+1.5,barY);ctx.stroke();
       if(enemy.hp<enemy.maxhp) { 
         ctx.globalAlpha=.7; 
         ctx.strokeStyle="#71eaff"; 
         ctx.lineWidth=6; 
         ctx.beginPath(); 
         ctx.moveTo(barX-1.5+barW*(enemy.hp/enemy.maxhp),barY); 
         ctx.lineTo(barX+barW+1.5,barY); 
         ctx.stroke(); 
       } 
       // Main bar 
       ctx.globalAlpha=.92; 
       ctx.strokeStyle="#48c8ff"; 
       ctx.lineWidth=6; 
       ctx.beginPath(); 
       ctx.moveTo(barX-1.5,barY); 
       ctx.lineTo(barX-1.5+barW*(enemy.hp/enemy.maxhp),barY); 
       ctx.stroke(); 

       // Initial
       if(enemy.type) {
         ctx.globalAlpha=.95; 
         ctx.font="bold italic 19px Segoe UI";
         ctx.textAlign="center"; 
         ctx.textBaseline="middle"; 
         ctx.fillStyle="#fff";
         let ty=enemy.y-enemy.h/1.4-22;
         if(enemy.type) 
           ctx.fillText(enemy.type[0],enemy.x-10+(enemy.type.length%10)*3.7 ,ty);
       }
       // Restore state for next enemy
       ctx.restore();
   }

   // HUD
   drawHUD();

   // Input & logic update - minimal demo controls for now!
   updateGameplayLogic();
}

function drawHUD(){
   // Top score/combo bar background
   ctx.save();
   let barH=44; 
   ctx.globalAlpha=.76; 
   ctx.fillStyle="#21212d"; 
   ctx.fillRect(0,0,canvas.width,barH);
   // Score text
   ctx.globalAlpha=1; 
   ctx.font="bold italic 26px Segoe UI"; 
   let padX=28,padY=20;
   let scoreTxt=`SCORE ${currentScore}`;
   let comboTxt=`COMBO ${comboCount}`;
   let hiTxt=`HI ${highScore}`;
   let comboCol=["#fff","#ffe482","#ffd352","#ffa900","#fd6"];
   let cidx=Math.min(comboCount/4|0,comboCol.length-1);
   // Score left
   ctx.textAlign='left'; 
   ctx.textBaseline='middle'; 
   ctx.font="bold italic 27px Segoe UI";
   ctx.shadowColor="#18121a"; 
   if(comboCount>4) { 
     for(let i=-2;i<=2;i++){
         if(i!=0){ 
             let alpha=Math.max(.22-.09*Math.abs(i),.03); 
             if(alpha>0) { 
                 let dx=i*3; 
                 let dy=i*3; 
                 let color="#ffd35299"; 
                 if(i<0) color="#ffe48255"
                 else if(i>1) color="#ffa90099"
                 else color="#ffd35299"
                 ; 
                 if(comboCount>14) color="#f44"
                 ;
                 ; 
                 ; 
                 ; 

                 ; 

                 ; 

                 ;
                 ;
                 ;
                 ; 

                 ;
                 ;
                 ;
                 ; 

                 ;  
             }
         }
     }
   }  
   if(comboCount>=10) { 
     for(let i=-2;i<=2;i++){
         if(i!=0){ 
             let alpha=Math.max(.17-.09*Math.abs(i),.03); 
             if(alpha>0) { 
                 let dx=i*6; let dy=i*3; let color="#ffe48299"
                 ;
             }
         }
     }
   }  
   // Main score text color:
   let scCol=(comboCount>=20)?"#ffa900":(comboCount>=10)?"#ffe482":"#fff";
   ;
   ;
   ;
   ;
   ;
   ;
   ;
   ;
   ;
   ;
   ;

   ;
   ;
   ;



   ;



   ;


   ;




   ;




   ;



   ;


   
   
   
   
   
   
   
   
   
   

   
   
   
   
   
   
   
   
   
   
   
   
   

   

   

   
   
   
   

   

   

   

   

   
   
   

   

   

   

   

   

   

   

   

   

   

   

   

   

   
   
   
   
   
   

   

   

   
   
   
   
   
   
   
   
   
   
   
   
   

   

   

   

   

   

   

   
   
   
   
   
   
   
   
   
   
   

   

   

   

   

   

   

   

    




  




  


  




  
  




  
  




  




  
  




  
  




  




  
  




  
  




  




  
  




  




  
  




  




  
  


  
  


  
  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  
  




  




  
  




  
  




  




  
  




  




  
  




  
  




  




  
  




  




  
  




  




  
  


  
  


  
  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  


  
  




  




  
  




  
  




  




  
  




  




  
  




  
  




  




  
  




  




  
  




  




  
  




  




  
  




  




  
  




  




  
  


  
  


  
    


    


    


    


    


    


    


    


    


    


    


    


    


    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
    


 



 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 


 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

// ============ END OF CODE ============