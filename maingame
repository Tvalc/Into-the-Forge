<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    html,body { margin:0; padding:0; background:#18121a; }
    body { font-family: 'Segoe UI', Arial, sans-serif; overflow:hidden; }
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center; }
    canvas { display:block; background:#18121a; box-shadow:0 0 32px #222; }
    ::selection { background:#ffb34733; }
    .overlay-btn {
      position: absolute;
      left:50%; transform:translateX(-50%);
      background:linear-gradient(90deg,#ffb347,#ff7200);
      color:#fff;
      font-size:22px;
      font-family:'Segoe UI',Arial,sans-serif;
      border:none;border-radius:8px;
      padding:12px 38px;
      box-shadow:0 2px 16px #2227;
      cursor:pointer;
      margin-top:18px;
      letter-spacing:1px;
    }
    .overlay-btn:hover { background:linear-gradient(90deg,#ff9200,#bc3cff); }
    #overlay { position:absolute; left:0; top:0; width:100vw; height:100vh; display:none; z-index:99;}
  </style>
</head>
<body>
<div id="gameContainer" style="position:relative;">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
  <div id="overlay"></div>
</div>
<script>
// =================== CONSTANTS & DATA ===================
const CHARACTERS = [
  { name:"Korok", faction:"Tempys", unlockedAt:0, color:"#ff7200" },
  { name:"Oros", faction:"Uterra", unlockedAt:10000, color:"#18d860" },
  { name:"Cercee", faction:"Nekrium", unlockedAt:25000, color:"#bc3cff" },
  { name:"Ironbeard", faction:"Alloyin", unlockedAt:50000, color:"#88c6ff" },
  { name:"Ignir", faction:"Tempys", unlockedAt:100000, color:"#ff1a1a" },
  { name:"Voss", faction:"Nekrium", unlockedAt:200000, color:"#9300c2" }
];
const LEVELS = [
  { name:"The Frozen Wastes", unlockedAt:0 },
  { name:"The Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 },
];
const SCENE_BACKGROUNDS = ["#2e3a5a", "#273548", "#222831"];
const GAME_WIDTH = 800, GAME_HEIGHT = 600;

// ============ STATE ============
let state = "title"; // title,charselect,levelselect,playing,pause,gameover
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let currentScore = 0;
let selectedCharIdx = 0;
let selectedLevelIdx = 0;
// Gameplay
let player=null,enemies=[],combo=0,comboTimer=0,playerHealth=100,sceneY=0;
let keys = {};
let lastFrame = Date.now();
let gameTimer = 0;
let overlay = document.getElementById("overlay");

// ============ CANVAS ============
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// ============ UTILITIES ============
function clamp(x,a,b){return Math.max(a,Math.min(b,x));}
function lerp(a,b,t){return a+(b-a)*t;}
function getUnlockedChars(){return CHARACTERS.filter(c=>highScore>=c.unlockedAt);}
function getUnlockedLevels(){return LEVELS.filter(l=>highScore>=l.unlockedAt);}
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";
  ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}

// =================== TITLE SCREEN ===================
function drawTitle(){
    // BG
    let grad=ctx.createLinearGradient(0,0,0,canvas.height);
    grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
    ctx.fillStyle=grad;ctx.fillRect(0,0,canvas.width,canvas.height);

    // Animated Solforge Tower
    ctx.save();
    let t=Date.now()/800;
    ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
    ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
    ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
    ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
    // Corruption effect
    ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
    ctx.fillStyle="#9d2cff";ctx.beginPath();
    ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
    ctx.globalAlpha=1;ctx.restore();

    // Title
    ctx.fillStyle="#ffb347";
    ctx.font="bold 46px Segoe UI";
    ctx.textAlign="center";
    ctx.shadowColor="#602f07";ctx.shadowBlur=14;
    ctx.fillText("FORGEBORN:",canvas.width/2,110);
    ctx.fillStyle="#fff";
    ctx.font="bold italic 36px Segoe UI";
    ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
    ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
    ctx.shadowBlur=0;

    // High Score
    ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
    ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

    // Prompt
    let blink=(Math.floor(Date.now()/500)%2)==0;
    if(blink){
        ctx.font="bold italic 28px Segoe UI";
        ctx.fillStyle="#fff";
        ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
    }
}

// =================== CHARACTER SELECT ===================
function drawCharSelect(){
    // BG
    ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

    let chars=CHARACTERS;
    let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;

    for(let i=0;i<chars.length;++i){
        let x=x0+i*spacing,y=180,r=48;
        let isUnlocked=highScore>=chars[i].unlockedAt;
        // Portrait circle
        ctx.save();
        ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
        ctx.globalAlpha=isUnlocked?1:.15;
        ctx.strokeStyle="#fff";ctx.lineWidth=(i==selectedCharIdx)?7:3;ctx.stroke();
        // Faction color
        ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
        ctx.fillStyle=chars[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
        if(!isUnlocked){
            ctx.globalAlpha=.5;ctx.fillStyle="#222";
            ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();
        }
        // Char initial
        ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText(chars[i].name[0],x,y+7);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
            ctx.fillText("Unlocks @ "+chars[i].unlockedAt,x,y+r+24);
        }
        if(i==selectedCharIdx){
            ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
            ctx.fillText(chars[i].name+" ("+chars[i].faction+")",x,y+r+44);
            if(isUnlocked){
                drawButton(x-48,y+r+56,96,36,"SELECT",true);
            }
        }
        ctx.restore();
    }
}

// =================== LEVEL SELECT ===================
function drawLevelSelect(){
    // BG
    ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Select Level",canvas.width/2,64);

    let levels=LEVELS;
    let spacing=70,y0=140;

    for(let i=0;i<levels.length;++i){
        let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
        let isUnlocked=highScore>=levels[i].unlockedAt;

        // BG box
        ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
        ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevelIdx)?4:2;
        ctx.strokeRect(x,y,w,h);
        // Preview BG color block for demo
        if(isUnlocked){
            ctx.fillStyle=SCENE_BACKGROUNDS[i%SCENE_BACKGROUNDS.length];
            ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
        }

        // Level name
        ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
        ctx.fillStyle=isUnlocked?"#fff":"#888";
        ctx.fillText(levels[i].name,x+18,y+33);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
            ctx.textAlign="center";
            ctx.fillText("Unlocks @ "+levels[i].unlockedAt,x+w/2,y+h+23);
        }

        // Select button if unlocked & selected
        if(isUnlocked && i==selectedLevelIdx){
            drawButton(x+w+14,y+6,92,38,"PLAY",true);
        }
        ctx.restore();
    }
}

// =================== GAMEPLAY ===================
function startGameplay(){
  state = "playing";
  currentScore = 0;
  playerHealth = 100;
  combo = 0;
  comboTimer = 0;
  sceneY = 0;
  player = {
     x:GAME_WIDTH/2,
     y:110,
     vx:0,
     vy:0,
     w:42,h:68,
     col:getUnlockedChars()[selectedCharIdx].color,
     attacking:false,
     attackTimer:0,
     onGround:true,
     facingRight:true,
     name:getUnlockedChars()[selectedCharIdx].name,
     speed:5,
     gravity:.7,
     jumpV:-9,
     atkPower:10
   };
   enemies = [];
   spawnEnemy(); spawnEnemy();
}

function spawnEnemy(){
   let ex=Math.random()*(canvas.width-120)+60;
   let ey=sceneY+Math.random()*220+340;
   enemies.push({
     x:ex,y:ey,vx:(Math.random()<.5?-1:1)*1.5+hscoreMod(),vy:0,w:40,h:54,
     hp:18+Math.floor(currentScore/200),
     col:"#bc3cff",
     alive:true,
     attackCD:Math.random()*80+40,
   });
}
function hscoreMod(){ return Math.min(highScore/20000,.6); }

function updateGameplay(dt){
   // Player movement
   if(keys["ArrowLeft"]||keys["a"]){player.x-=player.speed;}
   if(keys["ArrowRight"]||keys["d"]){player.x+=player.speed;}
   if((keys["ArrowUp"]||keys["w"]||keys[" "]) && player.onGround){player.vy=player.jumpV;player.onGround=false;}
   player.vy+=player.gravity;
   player.y+=player.vy;
   player.x=clamp(player.x,28,GAME_WIDTH-28);

   if(player.y+player.h>GAME_HEIGHT-30){ player.y=GAME_HEIGHT-30-player.h; player.vy=0; player.onGround=true;}
   else player.onGround=false;

   // Attack input (space/z)
   if((keys["z"]||keys["x"]) && !player.attacking && player.onGround){player.attacking=true;player.attackTimer=14;}

   if(player.attacking){
      player.attackTimer--;
      if(player.attackTimer<=0) player.attacking=false;
   }

   // Enemies AI & collision
   for(let e of enemies){
      if(!e.alive) continue;
      let dx=e.x-player.x;
      if(Math.abs(dx)>48) e.x+=dx>0?-e.vx:e.vx;

      // Enemy attack (simple contact damage)
      if(Math.abs(dx)<50 && Math.abs(e.y-player.y)<44 && !player.attacking && e.alive && !e.atkHit){
          playerHealth-=12;combo=0;e.atkHit=true;setTimeout(()=>{e.atkHit=false},600);
          if(playerHealth<=0){ endGame(false);}
      }

      // Player attack hitbox
      if(player.attacking && Math.abs(e.x-player.x)<62 && Math.abs(e.y-player.y)<38 && e.alive){
         e.hp-=player.atkPower;if(combo<99) combo++;
         e.col="#f7e17c"; setTimeout(()=>{e.col="#bc3cff"},130);
         if(e.hp<=0){e.alive=false;currentScore+=100*comboMult();comboFlash();}
      }
   }

   // Remove dead enemies & respawn
   for(let i=enemies.length-1;i>=0;i--) {
      if(!enemies[i].alive) {enemies.splice(i,1); setTimeout(spawnEnemy,800);}
   }

   // Combo timer decay
   if(combo>0) comboTimer+=dt; else comboTimer=0;
   if(combo>1 && comboTimer>220){combo=0;comboTimer=0;}
}

function drawGameplay(){
   // BG
   let bgc = SCENE_BACKGROUNDS[selectedLevelIdx%SCENE_BACKGROUNDS.length];
   ctx.fillStyle = bgc;ctx.fillRect(0,0,GAME_WIDTH,GAME_HEIGHT);

   // "Vertical slice": show descent by parallax lines (simulate vertical env)
   for(let i=1;i<7;++i){
       let yy = i*100 - (sceneY%100);
       ctx.globalAlpha=.11*i;
       ctx.strokeStyle=i%2?"#fff":"#ffb347";ctx.beginPath();
       ctx.moveTo(60,yy);ctx.lineTo(GAME_WIDTH-60,yy);ctx.stroke();
       ctx.globalAlpha=1.00;
   }

   // Player
   if(player){
       ctx.save();
       ctx.translate(player.x+Math.sin(Date.now()/233)*1.5, player.y);
       // Body
       ctx.globalAlpha=.97;
       ctx.fillStyle=player.col;
       ctx.beginPath();ctx.ellipse(0,36,22,32,0,0,Math.PI*2);ctx.closePath();ctx.fill();

       // Face/helmet 
       ctx.globalAlpha=.77;ctx.beginPath();ctx.arc(0,22.5,13.5,Math.PI*2,false);ctx.closePath();ctx.fillStyle="#fff";ctx.fill();

       // Arms (attack anim)
       if(player.attacking){
         let arot=(player.attackTimer>8)?-.5:.8;
         drawLimb(17,-9,-18,-14,.17-arot);
         drawLimb(-18,-9,+18,-14,.27+arot);
       } else {
         drawLimb(17,-10,-18,-13,.13);
         drawLimb(-18,-10,+18,-13,.27);
       }
       function drawLimb(xo1,y1,xo2,y2,r){
         ctx.save();ctx.rotate(r);
         ctx.strokeStyle="#fff";ctx.lineWidth=7.3;
         ctx.beginPath();ctx.moveTo(xo1,y1);ctx.lineTo(xo2,y2);ctx.stroke();ctx.restore();
       }
       // Eyes!
       ctx.globalAlpha=.95;ctx.beginPath();
       ctx.arc(-4.5,28.5+(Math.sin(Date.now()/340)*1),3.4,.5,.5+Math.PI);ctx.arc(6.5,28.5+(Math.cos(Date.now()/311)*1),3.4,-.6,-.6+Math.PI);ctx.closePath();
       ctx.fillStyle="#18121a";ctx.fill();
       // Nameplate
       ctx.globalAlpha=.66;ctx.font="italic bold 12px Segoe UI";ctx.textAlign="center";ctx.fillText(player.name.toUpperCase(),3.5,-11);
       ctx.restore();
   }

   // Enemies
   for(let e of enemies){
       if(!e.alive) continue;
       ctx.save();ctx.translate(e.x,e.y);
       // Body
       ctx.globalAlpha=.93;ctx.beginPath();ctx.ellipse(0,e.h/3,e.w/2.3,e.h/2.15,.03,.03+Math.PI*2,false);ctx.closePath();ctx.fillStyle=e.col;ctx.fill();
       // Face
       ctx.globalAlpha=.66-e.hp*.01;ctx.beginPath();ctx.arc(0,e.h/3.6,e.w/3.4,.03,.03+Math.PI*2,false);ctx.closePath();ctx.fillStyle="#fff";ctx.fill();
       // Eyes
       for(let j=-1;j<=1;j+=2){
         ctx.globalAlpha=.73-e.hp*.01;ctx.beginPath();ctx.arc(j*7,e.h/5.8+j*1,e.w/8,.03,.03+Math.PI*2,false);ctx.closePath();ctx.fillStyle="#18121a";ctx.fill();
       }
       // Health bar above enemy
       let hw=Math.max(24,e.hp*1.6);
       if(e.hp<18) { 
         ctx.globalAlpha=.82-e.hp*.0193; 
         ctx.strokeStyle="#ff1a36"; 
         ctx.lineWidth=4.3; 
         ctx.beginPath(); 
         ctx.moveTo(-hw/2,-30); 
         ctx.lineTo(hw/2,-30); 
         ctx.stroke(); 
         }
       ctx.restore();
   }

   // HUD Top Bar
   drawHUD();

}
function comboMult(){
   return combo>=30?4:
          combo>=20?3:
          combo>=15?2.5:
          combo>=10?2:
          combo>=5?1.5:
          1;
}
function comboFlash(){
   comboTimer=0;
}

function drawHUD(){
   // Top bar BG
   let topBarH = 44;
   let grad = ctx.createLinearGradient(0,0,GAME_WIDTH,topBarH);
   grad.addColorStop(0,"#18151c");
   grad.addColorStop(.7,"#52340f");
   grad.addColorStop(.9,"#191723");
   grad.addColorStop(1,"#232e35");
   ctx.globalAlpha=.95;
   ctx.fillStyle = grad; 
   ctx.fillRect(0,0,GAME_WIDTH,topBarH); 
   // Borders
   for(let i=0;i<4;i++){
     let c=["#ffb347","#bc3cff","#f7e17c","#222"][i];
     if(i===selectedLevelIdx) c="#ff7200";
     ctx.strokeStyle=c; 
     ctx.lineWidth=(i==selectedLevelIdx)?3.8:.7+i*.6;
     ctx.beginPath(); 
     let xx=(i)*GAME_WIDTH/4+.5; 
     ctx.moveTo(xx,.5); 
     xx=(i+1)*GAME_WIDTH/4-.5; 
     ctx.lineTo(xx,.5); 
     ctx.stroke();
   }
   // Score & HUD Texts
   let barY = topBarH -13;
   // Score
   drawHUDElement("SCORE",currentScore.toLocaleString(),95,barY,"#f7e17c");
   drawHUDElement("HIGH",highScore.toLocaleString(),240 ,barY,"#bc3cff");
   drawHUDElement("COMBO",(combo>1?combo+"x":"--"),395 ,barY,"#ffb347");
   drawHUDElement("MULT",(comboMult()).toFixed(1)+"x",545 ,barY,"#18d860");
   
   function drawHUDElement(label,val,x,y,col){
      // Number/label 
      ctx.font="bold italic "+(val.length>4?"19":"24")+"px Segoe UI";
      ctx.textAlign="left";
      ctx.shadowColor="#232e35";ctx.shadowBlur=7;
      if(combo>1 && label=="COMBO") col="#ffe480";
      if(combo>20 && label=="COMBO") col="#ff4fcf";
      if(label=="MULT"&&combo>=15) col="#bc3cff";
      if(label=="HIGH") col="#bc3cff";
      if(label=="SCORE") col="#f7e17c";
      if(label=="COMBO"&&combo<3) col="#aaa";
      //
      let lx=x-55,lw=42;
      //
      if(label!=="MULT"){
         // Label text under number (small)
         ctx.font="italic bold 13px Segoe UI";
         ctx.globalAlpha=.67; 
         lw=Math.max(lw,val.length*10); 
         let offy=-19,labelCol="#bbb";
         if(label=="COMBO") labelCol="#bc3cff";
         else if(label=="HIGH") labelCol="#888de6";
         else if(label=="SCORE") labelCol="#f7e17c";
         else labelCol="#aaa";
         //
         if(label=="MULT") lw+=14;
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         //
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         

         //
         //
         //
         //
         //

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

          
          
          
          
          
          
          
          
          
          
          
          
          
        
        
       
       
       
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      

       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

        
     
        
        
        
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     

        
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    
   
    
   
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    




    

    
    

    
    

    
    
    
    
    
    

    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    

    
    
    

    
    
    


    
    
    
    

    
   
   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     

     
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        
            
                
                    
                    
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                                                    
                                            
                                        
                                    
                                
                            
                        
                    
                
            
        
    
}
// Health Bar (bottom)
let healthW=Math.max(180,(playerHealth/100)*260);
let healthX=(GAME_WIDTH-healthW)/2;
let healthY=GAME_HEIGHT-37;
// Bar bg
ctx.save();
let hbGrad=ctx.createLinearGradient(healthX,healthY+16,GAME_WIDTH-healthX+healthW/8+8,healthY+27);
hbGrad.addColorStop(0,"#232e35");hbGrad.addColorStop(.45,"#502a11");hbGrad.addColorStop(.8,"#232e35");
ctx.globalAlpha=.94;ctx.fillStyle=hbGrad;ctx.fillRect(healthX-4.5,healthY-6.5,healthW+9.35,27);
// Health fg
let hfgGrad=ctx.createLinearGradient(healthX-12.5+healthW*.15-(playerHealth<33?10*Math.sin(Date.now()/150):0),healthY+6,GAME_WIDTH-healthX+.5+healthW*.95+(playerHealth<33?10*Math.cos(Date.now()/180):0),healthY+19);
hfgGrad.addColorStop(0,"#ffe480");hfgGrad.addColorStop(.25,"#ff7200");hfgGrad.addColorStop(.72,"#bc3cff");hfgGrad.addColorStop(.98,"#18121a");
if(playerHealth<33) hfgGrad.addColorStop(.80,"#ff222f");
//
ctx.globalAlpha=.96-(playerHealth<33?.45:.15)*Math.abs(Math.sin(Date.now()/150));
if(playerHealth>60) hfgGrad.addColorStop(.6,"#18d860");
//
if(playerHealth<33) { hfgGrad.addColorStop(.90,"#ff222f"); }
// Bar fg
//
let barLerp=(playerHealth/100);
if(barLerp<.15) barLerp+=Math.abs(Math.sin(Date.now()/240))*.14;
// Animate bar loss at low HP!
let hpDisplayW=Math.max(38,(healthW)*barLerp);
if(playerHealth<33) hpDisplayW*=lerp(.98,.94,.4+.07*Math.sin(Date.now()/110));
//
if(hpDisplayW>10)
{
	ctx.save();
	ctx.shadowColor="#ffe48088";ctx.shadowBlur=(playerHealth<40)?12:7.8;
	ctx.beginPath();ctx.moveTo(healthX+4.5-GAME_WIDTH*.0029-(playerHealth<40?Math.random()*4.3:.6),healthY+7.7-(playerHealth<33?Math.random()*3:.6),hpDisplayW-8+(playerHealth<33?Math.random()*4:-.6),13-(playerHealth<33?Math.random()*4:-.6));
	ctx.rect(healthX+4.5-GAME_WIDTH*.0029-(playerHealth<40?Math.random()*4.3:.6),healthY+7.7-(playerHealth<33?Math.random()*3:.6),hpDisplayW-8+(playerHealth<33?Math.random()*4:-.6),13-(playerHealth<33?Math.random()*4:-.6));
	ctx.closePath();	
	ctx.globalAlpha=.91-(playerHealth<33?.43:.08)*Math.abs(Math.sin(Date.now()/130));
	ctx.clip();
	ctx.fillStyle=hfgGrad;	
	ctx.fillRect(healthX+4-GAME_WIDTH*.0029-(playerHealth<40?Math.random()*4:.6),healthY+7-(playerHealth<33?Math.random()*3:.6),hpDisplayW-8+(playerHealth<33?Math.random()*4:-.6),13-(playerHealth<33?Math.random()*4:-.6));
	ctx.restore();
}
// HP Text overlay
if(playerHealth>8){
	ctx.font="italic bold "+ (playerHealth>99?20:(playerHealth>9?22:24)) +"px Segoe UI";
	ctx.textAlign="center";	ctx.globalAlpha=.95-(playerHealth<33?.35:.09)*Math.abs(Math.sin(Date.now()/90));
	ctx.shadowColor=(playerHealth<33?"#ff222f":"#502a11");	ctx.shadowBlur=(playerHealth<40)?12:7.8;
	ctx.lineWidth=.9+(playerHealth<40?.9:.29);	ctx.strokeStyle=(playerHealth<33?"#ff222f":"#232e35");
	ctx.strokeText(playerHealth+" /100",GAME_WIDTH/2+(playerHealth>9?8:(playerHealth>99?-11:-18)),healthY+22+(playerHealth>99?-1:(playerHealth>9?2:-1)));
	ctx.globalAlpha=.89-(playerHealth<33?.43:.11)*Math.abs(Math.sin(Date.now()/110));
	ctx.shadowBlur=(playerHealth<40)?12:7.8;
	ctx.shadowColor=(playerHealth<33?"#ff222f":"#502a11");
	ctx.lineWidth=.9+(playerHealth<40?.9:.29);	ctx.strokeStyle=(playerHealth<33?"#ff222f":"#232e35");
	ctx.strokeText(playerHealth+" /100",GAME_WIDTH/2+(playerHealth>9?8:(playerHealth>99?-11:-18)),healthY+22+(playerHealth>99?-1:(playerHealth>9?2:-1)));
}
}

// =================== PAUSE/GAME OVER ===================
function endGame(win){
	state="gameover";
	if(currentScore>highScore){ highScore=currentScore; localStorage.setItem("forgeborn_highscore",highScore);}
	setTimeout(()=>{showOverlay(win?"Level Complete!":"Game Over")},400);
}
function showOverlay(msg){
	let html=`<div style="
	background:#222d;border-radius:16px;padding:64px;margin-top:84px;width:430px;text-align:center;">
	<h1 style='color:#ffb347;font-family:"Segoe UI",Arial,sans-serif;font-size:34px;margin-bottom:24px;'>${msg}</h1>
	<div style='color:#ffe480;font-size:22px;margin-bottom:15px;'>Score:&nbsp;<span>${currentScore}</span></div>
	<div style='color:#bc3cff;font-size:19px;margin-bottom:16px;'>High Score:&nbsp;<span>${highScore}</span></div>
	<button class='overlay-btn' onclick='window.location.reload()'>Restart</button>
	</div>`;
	overlay.innerHTML=html; overlay.style.display="block";
}

// =================== INPUT HANDLING ===================
window.addEventListener("keydown",(e)=>{
	if(document.activeElement!==document.body) return;// don't steal typing input!
	keys[e.key]=true;

	if(state==="title"){state="charselect";}
	else if(state==="charselect"){
		if(e.key==="ArrowLeft"){selectedCharIdx=Math.max(selectedCharIdx-1,0);}
		else if(e.key==="ArrowRight"){selectedCharIdx=Math.min(selectedCharIdx+1,getUnlockedChars().length-1);}
		else if(e.key==="Enter"||e.key===" "||e.key==="z"){
			if(highScore>=CHARACTERS[selectedCharIdx].unlockedAt) state="levelselect";
		}
	}else if(state==="levelselect"){
		if(e.key==="ArrowUp"){selectedLevelIdx=Math.max(selectedLevelIdx-1,0);}
		else if(e.key==="ArrowDown"){selectedLevelIdx=Math.min(selectedLevelIdx+1,getUnlockedLevels().length-1);}
		else if(e.key==="Enter"||e.key===" "||e.key==="z"){
			if(highScore>=LEVELS[selectedLevelIdx].unlockedAt){startGameplay();}
		}
	} else if(state==="playing"){
		if(e.key==="Escape"){ state="pause";}
	} else if(state==="pause"){
		state="playing";
	} else if(state==="gameover"){
		window.location.reload();
	}
});
window.addEventListener("keyup",(e)=>{keys[e.key]=false});

// =================== MAIN LOOP ===================
function gameLoop(){
	let now = Date.now(),dt=Math.min((now-lastFrame)/16.67,2); lastFrame=now;

	if(state==="title") drawTitle();
	else if(state==="charselect") drawCharSelect();
	else if(state==="levelselect") drawLevelSelect();
	else if(state==="playing"){
		updateGameplay(dt);
		drawGameplay();
	}else if(state==="pause"){
		drawGameplay();
		ctx.save();ctx.globalAlpha=.83;
		ctx.fillStyle="#18121aee";ctx.fillRect(120,GAME_HEIGHT/2-96,GAME_WIDTH-240,192);
		ctx.globalAlpha=.92;
		ctx.font="bold italic 44px Segoe UI";ctx.textAlign="center";ctx.shadowBlur=14;ctx.shadowColor="#bc3cff";
		ctx.fillStyle="#ffe480";	ctx.fillText("PAUSED",GAME_WIDTH/2,GAME_HEIGHT/2-24);
		ctx.shadowBlur=8;	ctx.shadowColor="#232e35";
		ctx.font="italic bold 20px Segoe UI";	ctx.fillStyle="#fff";
		ctx.fillText("[ Press Escape to Resume ]",GAME_WIDTH/2,GAME_HEIGHT/2+38);
		ctx.restore();
	}else if(state==="gameover"){
		drawGameplay();// freeze frame under modal!
	}
	requestAnimationFrame(gameLoop);
}
lastFrame=Date.now();gameLoop();

</script>
</body>
</html>