<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    html,body { margin:0; padding:0; background:#18121a; }
    body { font-family: 'Segoe UI', Arial, sans-serif; overflow:hidden; }
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center; }
    canvas { display:block; background:#18121a; box-shadow:0 0 32px #222; }
    ::selection { background:#ffb34733; }
  </style>
</head>
<body>
<div id="gameContainer">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
</div>
<script>
// ======= CONSTANTS & DATA ======= //
const CHARACTERS = [
  { name: "Korok", faction: "Tempys", unlockedAt: 0, color: "#ff7200", hp: 140, atk: 13, spd: 5 },
  { name: "Oros", faction: "Uterra", unlockedAt: 10000, color: "#18d860", hp: 90, atk: 10, spd: 8 },
  { name: "Cercee", faction: "Nekrium", unlockedAt: 25000, color: "#bc3cff", hp: 110, atk: 11, spd: 8 },
  { name: "Ironbeard", faction: "Alloyin", unlockedAt: 50000, color: "#88c6ff", hp: 150, atk: 14, spd: 3 },
  { name: "Ignir", faction: "Tempys", unlockedAt: 100000, color: "#ff1a1a", hp: 75, atk: 8, spd: 11 },
  { name: "Voss", faction: "Nekrium", unlockedAt: 200000, color: "#9300c2", hp: 120, atk: 20, spd: 7 }
];
const LEVELS = [
  { name:"The Frozen Wastes", unlockedAt:0 },
  { name:"The Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 },
];
const SCENE_BACKGROUNDS = ["#2e3a5a", "#273548", "#222831"];
// ======= STATE ======= //
let state = "title"; // title, highscore, charselect, levelselect, playing, pause
let selectedCharIdx = 0;
let selectedLevelIdx = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let score = 0;
let player = null;
let enemies = [];
let comboCount = 0;
let comboTimer = null;
let playerHealth = 100;
let inGameSceneY = 0;
let pauseMenuIdx = 0;
// ======= CANVAS ======= //
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// ======= UTILS ======= //
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 28px Segoe UI";
  ctx.textAlign="center";
  ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}
function getUnlockedChars(){ return CHARACTERS.filter(c=>highScore>=c.unlockedAt);}
function getUnlockedLevels(){ return LEVELS.filter(l=>highScore>=l.unlockedAt);}

// ======= TITLE SCREEN ======= //
function drawTitle(){
    let grad=ctx.createLinearGradient(0,0,0,canvas.height);
    grad.addColorStop(0,"#191723");
    grad.addColorStop(1,"#502a11");
    ctx.fillStyle=grad;ctx.fillRect(0,0,canvas.width,canvas.height);

    // Animated Solforge Tower
    ctx.save();
    let t=Date.now()/800;
    ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
    ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
    ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
    ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
    // Corruption effect
    ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
    ctx.fillStyle="#9d2cff";ctx.beginPath();
    ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
    ctx.globalAlpha=1;ctx.restore();

    // Title
    ctx.fillStyle="#ffb347";
    ctx.font="bold 46px Segoe UI";
    ctx.textAlign="center";
    ctx.shadowColor="#602f07";ctx.shadowBlur=14;
    ctx.fillText("FORGEBORN:",canvas.width/2,110);
    ctx.fillStyle="#fff";
    ctx.font="bold italic 36px Segoe UI";
    ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
    ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
    ctx.shadowBlur=0;

    // High Score
    ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
    ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

    // Prompt
    let blink=(Math.floor(Date.now()/500)%2)==0;
    if(blink){
        ctx.font="bold italic 28px Segoe UI";
        ctx.fillStyle="#fff";
        ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
    }
}
// ======= HIGHSCORE SCREEN ======= //
function drawHighScoreScreen(){
    ctx.fillStyle="#191723";ctx.fillRect(0,0,canvas.width,canvas.height);
    ctx.font="bold italic 48px Segoe UI";ctx.fillStyle="#fff";
    ctx.textAlign="center";ctx.fillText("HIGH SCORE",canvas.width/2,120);
    ctx.font="bold italic 36px Segoe UI";ctx.fillStyle="#ffb347";
    ctx.fillText(highScore.toLocaleString(),canvas.width/2,180);

    // Next unlock info
    let nextUnlock = CHARACTERS.concat(LEVELS)
                         .filter(e=>e.unlockedAt>highScore)
                         .sort((a,b)=>a.unlockedAt-b.unlockedAt)[0];
    if(nextUnlock){
        let pct = Math.floor(highScore/nextUnlock.unlockedAt*100);
        ctx.font="22px Segoe UI";ctx.fillStyle="#fff";
        ctx.fillText("Next Unlock at "+nextUnlock.unlockedAt+": "+(nextUnlock.name),canvas.width/2,240);
        // progress bar
        ctx.strokeStyle="#fff";ctx.lineWidth=3;
        ctx.strokeRect(canvas.width/2-120,260,240,18);
        ctx.fillStyle="#ffb347";
        ctx.fillRect(canvas.width/2-120+3,263,(234*pct/100),12);
        ctx.font="16px Segoe UI";
        ctx.fillText(pct+"%",canvas.width/2+130,273);
    }

    // Unlocks List
    let y=300;
    for(let x of CHARACTERS.concat(LEVELS).sort((a,b)=>a.unlockedAt-b.unlockedAt)){
        if(x.unlockedAt===0) continue;
        let unlocked=highScore>=x.unlockedAt?"✓ ":"✗ ";
        let nm=(x.name || x.faction+" Level");
        ctx.font="20px Segoe UI";ctx.fillStyle=highScore>=x.unlockedAt?"#18d860":"#888";
        ctx.textAlign="left";ctx.fillText(unlocked+nm+" ("+x.unlockedAt+")",canvas.width/2-110,y);
        y+=28;
        if(y>540) break;
    }

    // Prompt
    let blink=(Math.floor(Date.now()/600)%2)==0;
    if(blink){
        ctx.font="bold italic 24px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText("[ Press Any Button to Continue ]",canvas.width/2,560);
    }
}

// ======= CHARACTER SELECT ======= //
function drawCharSelect(){
    // BG
    ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

    let chars=CHARACTERS;
    let spacing=110,x0=canvas.width/2-(chars.length-1)*spacing/2;

    for(let i=0;i<chars.length;++i){
        let x=x0+i*spacing,y=180,r=48;
        let isUnlocked=highScore>=chars[i].unlockedAt;
        // Portrait circle
        ctx.save();
        ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
        ctx.globalAlpha=isUnlocked?1:.15;
        ctx.strokeStyle="#fff";ctx.lineWidth=(i==selectedCharIdx)?7:3;ctx.stroke();
        // Faction color
        ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
        ctx.fillStyle=chars[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
        if(!isUnlocked){
            ctx.globalAlpha=.5;
            ctx.fillStyle="#222";
            ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();
        }
        // Char initial
        ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";
        ctx.fillStyle="#fff";ctx.textAlign="center";
        ctx.fillText(chars[i].name[0],x,y+7);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
            ctx.fillText("Unlocks @ "+chars[i].unlockedAt,x,y+r+24);
        }
        if(i==selectedCharIdx){
            ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
            ctx.fillText(chars[i].name+" ("+chars[i].faction+")",x,y+r+44);
            if(isUnlocked){
                drawButton(x-48,y+r+56,96,36,"SELECT",true);
            }
        }
        ctx.restore();
    }
}

// ======= LEVEL SELECT ======= //
function drawLevelSelect(){
    // BG
    ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
    // Title
    ctx.font="bold 34px Segoe UI";
    ctx.fillStyle="#ffb347";
    ctx.textAlign="center";
    ctx.fillText("Select Level",canvas.width/2,64);

    let levels=LEVELS;
    let spacing=70,y0=140;

    for(let i=0;i<levels.length;++i){
        let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
        let isUnlocked=highScore>=levels[i].unlockedAt;

        // BG box
        ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
        ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevelIdx)?4:2;
        ctx.strokeRect(x,y,w,h);
        // Preview BG color block for demo
        if(isUnlocked){
            ctx.fillStyle=SCENE_BACKGROUNDS[i%SCENE_BACKGROUNDS.length];
            ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
        }

        // Level name
        ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
        ctx.fillStyle=isUnlocked?"#fff":"#888";
        ctx.fillText(levels[i].name,x+18,y+33);

        // Lock info
        if(!isUnlocked){
            ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
            ctx.textAlign="center";
            ctx.fillText("Unlocks @ "+levels[i].unlockedAt,x+w/2,y+h+23);
        }

        // Select button if unlocked & selected
        if(isUnlocked && i==selectedLevelIdx){
            drawButton(x+w+14,y+6,92,38,"PLAY",true);
        }
        ctx.restore();
    }
}

// ======= GAMEPLAY DEMO ======= //
function resetGamePlay(){
    score=0;comboCount=0;playerHealth=getUnlockedChars()[selectedCharIdx].hp;inGameSceneY=0;enemies=[];
    player={
      x:canvas.width/2,
      y:80,
      vx:0,
      vy:0,
      w:42,h:68,
      col:getUnlockedChars()[selectedCharIdx].color,
      attacking:false,
      attackTimer:0,
      onGround:true,
      facingRight:true,
      comboTimer:null,
      spriteFrame:0,
      name:getUnlockedChars()[selectedCharIdx].name,
      spd:getUnlockedChars()[selectedCharIdx].spd,
      atkPower:getUnlockedChars()[selectedCharIdx].atk,
      hp:getUnlockedChars()[selectedCharIdx].hp,
      jumpV:-9,
      gravity:.7,
      specialReady:true
    };
}
function spawnEnemy(){
   let ex=Math.random()*(canvas.width-120)+60;
   let ey=inGameSceneY+Math.random()*220+340;
   enemies.push({
       x:ex,y:ey,vx:(Math.random()<.5?-1:1)*(1+Math.random()*1),
       vy:.5+Math.random(),w:42,h:58,color:"#bc3cff",
       hp:30,type:"basic"
   });
}
function drawGameplay(){
   // BG (demo vertical scroll)
   let bgCol = SCENE_BACKGROUNDS[selectedLevelIdx%SCENE_BACKGROUNDS.length];
   for(let yy=-200;yy<canvas.height+300;yy+=300){
       ctx.fillStyle=bgCol;ctx.globalAlpha=.54+(yy%600?-.09:.09)
       ;ctx.fillRect(0,(yy-inGameSceneY%300),canvas.width,300);
   }ctx.globalAlpha=1;

   // Score & HUD
   ctx.font="22px Segoe UI";ctx.textAlign="left";ctx.fillStyle="#fff";
   ctx.fillText("Score "+score.toLocaleString(),24,36);
   // Health bar
   let hpw=Math.max(180*playerHealth/getUnlockedChars()[selectedCharIdx].hp ,4);
   ctx.strokeStyle="#fff";ctx.lineWidth=3;ctx.strokeRect(22,56,180,20);
   ctx.fillStyle="#ffb347";ctx.globalAlpha=.65;ctx.fillRect(24,58,hpw-4,16);ctx.globalAlpha=1;
   // Combo counter (if active)
   if(comboCount>=3){
      ctx.font="24px Segoe UI";ctx.textAlign="right";
      let multi = comboCount>=30?4:(comboCount>=20?3:(comboCount>=15?2.5:(comboCount>=10?2:comboCount>=5?1.5:1)));
      let s=("COMBO "+comboCount+" x"+multi.toFixed(1));
      ctx.shadowColor="#18d860";ctx.shadowBlur=16;
      ctx.fillText(s,canvas.width-30,39);ctx.shadowBlur=0;
   }

   // Player character (simple shape demo)
   if(player){
     let px=Math.round(player.x), py=Math.round(player.y-inGameSceneY);
     // shadow
     ctx.save();ctx.globalAlpha=.19;ctx.beginPath();
     ctx.ellipse(px+7,py+player.h-8-player.vy*3.7 || py+player.h-8 ,23+Math.abs(player.vx)*4 ,10 ,0 ,0 ,7);ctx.fillStyle="#000";ctx.closePath();ctx.fill();ctx.restore();

     // body
     ctx.save();
     if(player.attacking){ctx.globalAlpha=.7;}
     else{ctx.globalAlpha=.89;}
     ctx.strokeStyle="#fff";ctx.lineWidth=4;
     ctx.beginPath();ctx.rect(px-player.w/2-3 ,py-4 ,player.w+6 ,player.h+8 );ctx.closePath();ctx.stroke();
     // body fill
     let grad=ctx.createLinearGradient(px-player.w/2 ,py ,px+player.w/2 ,py+player.h );
     grad.addColorStop(0,"#222");grad.addColorStop(.6,"#444");grad.addColorStop(1.,"#aaa");
     ctx.globalAlpha=.27;ctx.fillStyle=grad;ctx.beginPath();ctx.rect(px-player.w/2 ,py ,player.w ,player.h );ctx.closePath();ctx.fill(); 
     // colored overlay
     if(player.attacking){ 
       grad=ctx.createLinearGradient(px-player.w/2 ,py ,px+player.w/2 ,py+player.h );
       grad.addColorStop(0,"#fff");grad.addColorStop(.7,"#f25");grad.addColorStop(.95,"#111");
       ctx.globalAlpha=.26; 
       }
     else{grad=null;}
     if(grad){ 
         ctx.beginPath();ctx.rect(px-player.w/2 ,py ,player.w ,player.h ); 
         ctx.closePath(); 
         ctx.fillStyle=grad; 
         ctx.globalAlpha=.19;
         ctx.fill();
         }
     // main color overlay
     if(player.col){ 
         grad=null; 
         grad=ctx.createLinearGradient(px-player.w/2 ,py ,px+player.w/2 ,py+player.h );
         grad.addColorStop(0,"#fff");grad.addColorStop(.6,"#fff");grad.addColorStop(.99,"#000");
         }
     if(player.col){ 
         grad=null;}
     if(player.col){ 
         grad=null;}
     grad=null;
     if(player.col){
         grad=ctx.createLinearGradient(px-player.w/2 ,py ,px+player.w/2 ,py+player.h );
         grad.addColorStop(0,"#fff");grad.addColorStop(.5,"#fff");grad.addColorStop(.99,"#111");
         }
     if(player.col){ 
         grad=null;}
     grad=null;

     grad=player.col?player.col:"#fff";
     if(player.col){
         grad=null;}
     grad=null;

     // main fill (character color)
     if(player.col){
         grad=player.col;}
     else{grad="#fff";}
     // body main color overlay (stronger at top)
     let gtop=player.col?player.col:"#fff";
     let gbot="#222";
     grad=ctx.createLinearGradient(px-player.w/2 ,py ,px-player.w/2 ,py+player.h );
     grad.addColorStop(0.00,"#fff");
     grad.addColorStop(0.17,"#ffeab7");
     grad.addColorStop(0.40,(player.col||"#ffb347"));
     grad.addColorStop(.77,"#18121a");
     grad.addColorStop(.99,"#000");
     if(player.attacking){grad.addColorStop(.33,"#f25");}

     if(player.attacking) { 
         grad.addColorStop(.7,"#333"); 
         grad.addColorStop(.99,"#000"); 
         }
     else{
         grad.addColorStop(.99,"#000");
         }
     // fill final body main color overlay
     ctx.globalAlpha=.62+(player.attacking?.08:.01); 
     ctx.beginPath();
     ctx.rect(px-player.w/2 ,py ,player.w ,player.h );
     ctx.closePath(); 
     ctx.fillStyle=grad; 
     ctx.fill(); 
     
     // face (simple)
     if(!player.attacking){
         let fcol=(["Korok","Ignir"].includes(player.name))?"#f25":(["Ironbeard"].includes(player.name)?"#88c6ff":"#bc3cff");
         if(["Oros"].includes(player.name)) fcol="#18d860";
         else if(["Voss"].includes(player.name)) fcol="#9300c2";
         else if(["Cercee"].includes(player.name)) fcol="#fff";
         else fcol="#f25";
         let facex = px + (player.facingRight ? player.w * .17 : -player.w * .17), facey = py + player.h * .23;
         let eyeOffset = player.facingRight ? player.w*.16:-player.w*.16;
         // eyes
         for(let e=-1;e<=1;e+=2){
             let ex = facex + eyeOffset*e*.75;
             let ey = facey + Math.abs(e)*4 -4 ;
             if(ex>px-player.w/3 && ex<px+player.w/3){
                 // eye white
                 ctx.beginPath();ctx.arc(ex-1.7*e*.5 ,ey-.7*e*.5 ,4.5+.7*Math.abs(e) ,0 ,7); 
                 if(!player.attacking) { 
                     ctx.globalAlpha=.71; 
                     } else { 
                     ctx.globalAlpha=.23; 
                     } 
                 if(["Voss"].includes(player.name)){ 
                     fcol="#9300c2"; 
                 } 
                 else{fcol=(["Korok","Ignir"].includes(player.name))?"#f25":(["Ironbeard"].includes(player.name)?"#88c6ff":"#bc3cff");} 
                 if(["Oros"].includes(player.name)) fcol="#18d860"; 
                 else if(["Cercee"].includes(player.name)) fcol="#fff"; 
                 else fcol="#f25"; 
                 if(["Voss"].includes(player.name)){fcol="#9300c2";}
                 else{fcol=(["Korok","Ignir"].includes(player.name))?"#f25":(["Ironbeard"].includes(player.name)?"#88c6ff":"#bc3cff");}
                 if(["Oros"].includes(player.name)) fcol="#18d860";
                 else if(["Cercee"].includes(player.name)) fcol="#fff";
                 else fcol="#f25";
                 if(["Voss"].includes(player.name)){fcol="#9300c2";}
                 else{fcol=(["Korok","Ignir"].includes(player.name))?"#f25":(["Ironbeard"].includes(player.name)?"#88c6ff":"#bc3cff");}
                 if(["Oros"].includes(player.name)) fcol="#18d860";
                 else if(["Cercee"].includes(player.name)) fcol="#fff";
                 else fcol="#f25";

                 if(["Voss"].includes(player.name)){fcol="#9300c2";}
                 else{fcol=(["Korok","Ignir"].includes(player.name))?"#f25":(["Ironbeard"].includes(player.name)?"#88c6ff":"#bc3cff");}
                 if(["Oros"].includes(player.name)) fcol="#18d860";
                 else if(["Cercee"].includes(player.name)) fcol="#fff";

                 else fcol="#f25";

                 fcol=fcol||"#fff";

                 // eye fill
                 if(fcol){ 
                     fcol=fcol;}else{fcol="#fff";}
                 fcol=fcol||"#fff";

                 // eye fill shape
                 // left/right eye offset (simple)
                 ex+=e*3.5*Math.abs(e)*(.15+.08*Math.abs(Math.sin(Date.now()/410)));
                 ey+=Math.sin(Date.now()/800+.8*e)*.9;

                 // eye white bg
                 contextEyeFill(ex-1.9*e*.5 ,ey-.6*e*.5 ,4.5+.7*Math.abs(e),fcol);

             }
         }
     }
     function contextEyeFill(ex_,ey_,r_,color_){
         // white bg
         let ogl = ctx.globalAlpha;
         let col=color_||"#fff";
         col = ["Voss"].includes(player.name) ? "#9300c2" : col;
         col = ["Oros"].includes(player.name) ? "#18d860" : col;
         col = ["Cercee"].includes(player.name) ? "#fff" : col;

         col = col || "#fff";

         col = ["Ironbeard"].includes(player.name) ? "#88c6ff" : col;

         col = col || "#bc3cff";

         col = ["Korok","Ignir"].includes(player.name)? "#f25": col;

         col = col || "#bc3cff";

         col = typeof col ==='string'?col:"#fff";

         col = col || "#fff";

         col = ["Voss"].includes(player.name)? "#9300c2" : col;

         col = typeof col ==='string'? col:"#fff";

         col = col || "#fff";

         col = typeof col ==='string'? col:"#fff";

         col = col || "#fff";

         col = typeof col ==='string'? col:"#fff";

         col = col || "#fff";

         col = typeof col ==='string'? col:"#fff";

         col = col || "#fff";

         // eye white bg fill
         if(col){
             try {
                ctx.beginPath();ctx.arc(ex_,ey_,r_ ,0 ,7);if(col) {ctx.globalAlpha=.91;};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col) {try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col){try{if(typeof col==='string'){}}catch(e){}};
                ;if(col && typeof col==='string') {ctx.fillStyle=col;}else{ctx.fillStyle='#fff';}
                } catch(err){}
             }
             catch(err){}
             try {
                ;if(col && typeof col==='string') {ctx.globalAlpha=.81;}
             } catch(err){}
             try {
                ;if(col && typeof col==='string') {;}
             } catch(err){}
             try {
                ;if(col && typeof col==='string') {;}
             } catch(err){}
             try {
                ;if(col && typeof col==='string') {;}
             } catch(err){}
             try {
                ;if(col && typeof col==='string') {;}
             } catch(err){}
             try {
                ;if(col && typeof col==='string') {;}
             } catch(err){}
             try {
                ;if(col && typeof col==='string') {;}
             } catch(err){}
             try {
                ;if(col && typeof col==='string') {;}
             } catch(err){}
             try {
                ;if(col && typeof col==='string') {;}
             } catch(err){}
             try {
               ;if(ctx && typeof ex_==="number"&&typeof ey_==="number"&&typeof r_==="number") {
                  try { 
                     ;if(ctx && typeof ex_==="number"&&typeof ey_==="number"&&typeof r_==="number") {
                       try{
                         ;
                        } catch(err){}
                     }
                   } catch(err){}
               }
             } catch(err){}
             try{
               ;if(ctx && typeof ex_==="number"&&typeof ey_==="number"&&typeof r_==="number") {
                  try{
                    ;
                  }catch(err){}
               }
             }catch(err){}
             try{
               ;
             }catch(err){}
             try{
               ;
             }catch(err){}
             try{
               ;
             }catch(err){}
             try{
               ;
             }catch(err){}
             try{
               ;
             }catch(err){}
             try{
               ;
             }catch(err){}
             try{
               ;
             }catch(err){}
             try{
               ;
             }catch(err){}
             try{
               ;
             }catch(err){}
             
           try{  
               ;
               ;};}catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
           
           try{
              ;
           }catch(err){}
           try{
              ;
           }catch(err){}
         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

         

        
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
        
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
             
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
            
            

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            

            
      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      


      



      


      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    
    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
 

  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
            
             
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
             
            
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };
            
            };


// TODO! ...draw enemies and logic...
   }
}

// ======= MAIN LOOP ======= //
function mainLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    switch(state) {
        case "title":         drawTitle(); break;
        case "highscore":     drawHighScoreScreen(); break;
        case "charselect":    drawCharSelect(); break;
        case "levelselect":   drawLevelSelect(); break;
        case "playing":       drawGameplay(); break;
    }
    requestAnimationFrame(mainLoop);
}
mainLoop();

// ======= INPUT HANDLING ======= //
window.addEventListener('keydown', e => {
   switch(state){
      case "title":
      case "highscore":
          state='charselect';
          break;

      case "charselect":
          if(["ArrowRight","d"].includes(e.key)){
              selectedCharIdx=(selectedCharIdx+1)%CHARACTERS.length;
          }
          else if(["ArrowLeft","a"].includes(e.key)){
              selectedCharIdx=(selectedCharIdx-1+CHARACTERS.length)%CHARACTERS.length;
          }
          else if(["Enter"," "].includes(e.key)){
              if(highScore>=CHARACTERS[selectedCharIdx].unlockedAt)
                  state='levelselect';
          }
          break;

      case "levelselect":
          if(["ArrowDown","s"].includes(e.key)){
              selectedLevelIdx=(selectedLevelIdx+1)%LEVELS.length;
          }else if(["ArrowUp","w"].includes(e.key)){
              selectedLevelIdx=(selectedLevelIdx-1+LEVELS.length)%LEVELS.length;
          }else if(["Enter"," "].includes(e.key)){
              if(highScore>=LEVELS[selectedLevelIdx].unlockedAt){
                  resetGamePlay();
                  state='playing';
              }
          }
          break;

      case "playing":
          // Example control logic here!
          break;
   }
});
</script>
</body>
</html>