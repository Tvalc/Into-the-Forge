<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    html, body { height: 100%; margin:0; padding:0; background: #18141e; }
    #gameCanvas { display:block; margin:0 auto; background:#191723; }
    body { font-family: Segoe UI, Arial, sans-serif; }
    ::selection { background: #ffb34788; }
  </style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="600"></canvas>

<script>
// === DATA ===
const CHARACTERS = [
  { name:"Korok", faction:"Tempys", unlockedAt:0, color:"#ff7200", desc:"Tank with area control" },
  { name:"Oros", faction:"Alloyin", unlockedAt:10000, color:"#18d860", desc:"Ranged combat, defensive" },
  { name:"Cercee", faction:"Uterra", unlockedAt:25000, color:"#bc3cff", desc:"Support/crowd control" },
  { name:"Ironbeard", faction:"Alloyin", unlockedAt:50000, color:"#88c6ff", desc:"Heavy damage, slow" },
  { name:"Ignir", faction:"Tempys", unlockedAt:100000, color:"#ff1a1a", desc:"Fast-paced combo fighter" },
  { name:"Voss", faction:"Nekrium", unlockedAt:200000, color:"#9300c2", desc:"Secret Nekrium powers" }
];
const LEVELS = [
  { name:"Frozen Wastes", unlockedAt:0 },
  { name:"Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 },
  // ...add more levels as needed
];

// === STATE ===
let state = "title"; // title,charselect,levelselect,playing
let selectedChar = 0;
let selectedLevel = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore") || "0");
let canvas = document.getElementById('gameCanvas');
let ctx = canvas.getContext('2d');
let keys = {};
window.addEventListener('keydown', e => {
  keys[e.key] = true;
  if(state === "title") { state = "charselect"; keys = {}; }
});
window.addEventListener('keyup', e => { keys[e.key] = false; });

// === MAIN LOOP ===
function loop() {
  ctx.clearRect(0,0,canvas.width,canvas.height);
  switch(state) {
    case "title": drawTitle(); break;
    case "charselect": drawCharSelect(); break;
    case "levelselect": drawLevelSelect(); break;
    case "playing": drawGameHUD(); break;
  }
  requestAnimationFrame(loop);
}
loop();

// === SCREENS ===
function drawTitle() {
  // BG & animated SolForge
  let grad=ctx.createLinearGradient(0,0,0,canvas.height);
  grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
  ctx.fillStyle=grad; ctx.fillRect(0,0,canvas.width,canvas.height);

  let t=Date.now()/800;
  ctx.save();
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#bc3cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();

  // Title
  ctx.fillStyle="#ffb347"; ctx.font="bold 46px Segoe UI"; ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.fillStyle="#fff"; ctx.font="bold italic 36px Segoe UI";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160); ctx.shadowBlur=0;

  // High Score
  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

  // Prompt
  if(Math.floor(Date.now()/500)%2===0) {
    ctx.font="bold italic 28px Segoe UI";ctx.fillStyle="#fff";
    ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }
}

function drawCharSelect() {
  ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing = 120;
  let x0 = canvas.width/2 - ((CHARACTERS.length-1)*spacing)/2;
  for(let i=0;i<CHARACTERS.length;++i) {
    let x=x0+i*spacing,y=220,r=48,isUnlocked=highScore>=CHARACTERS[i].unlockedAt;

    // Portrait BG
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.15;ctx.strokeStyle="#fff";ctx.lineWidth=i===selectedChar?7:3;ctx.stroke();
    // Portrait Fill
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    if(!isUnlocked){ctx.globalAlpha=.5;ctx.fillStyle="#222";ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();}
    // Letter
    ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);

    // Lock info
    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
      ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt,x,y+r+24);
    }
    // Selected Info
    if(i===selectedChar) {
      ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
      ctx.fillText(CHARACTERS[i].name+" ("+CHARACTERS[i].faction+")",x,y+r+44);
      if(isUnlocked){
        // SELECT BUTTON
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
        if(keys["Enter"]||keys[" "]) {
          state="levelselect";
          keys["Enter"]=keys[" "]=false;
        }
      }
      // Description
      ctx.font="16px Segoe UI";ctx.fillStyle="#aaa";
      ctx.fillText(CHARACTERS[i].desc,x,y+r+80);
    }
    ctx.restore();

    // Navigation (keyboard)
    if(keys["ArrowLeft"]&&i===selectedChar&&i>0){selectedChar--;keys["ArrowLeft"]=false;}
    if(keys["ArrowRight"]&&i===selectedChar&&i<CHARACTERS.length-1){selectedChar++;keys["ArrowRight"]=false;}
  }
}

function drawLevelSelect() {
  ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Select Level",canvas.width/2,64);

  let spacing=70,y0=140;
  for(let i=0;i<LEVELS.length;++i){
    let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
    let isUnlocked=highScore>=LEVELS[i].unlockedAt;

    // BG box
    ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
    ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevel)?4:2;
    ctx.strokeRect(x,y,w,h);

    // Level name
    ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
    ctx.fillStyle=isUnlocked?"#fff":"#888";
    ctx.fillText(LEVELS[i].name,x+18,y+33);

    // Lock info
    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
      ctx.textAlign="center";
      ctx.fillText("Unlocks @ "+LEVELS[i].unlockedAt,x+w/2,y+h+23);
    }

    // Select button if unlocked & selected
    if(isUnlocked && i==selectedLevel){
      drawButton(x+w+14,y+6,92,38,"PLAY",true);
      if(keys["Enter"]||keys[" "]){ state="playing"; keys["Enter"]=keys[" "]=false;}
    }

    ctx.restore();

    // Navigation (keyboard)
    if(keys["ArrowUp"]&&i===selectedLevel&&i>0){selectedLevel--;keys["ArrowUp"]=false;}
    if(keys["ArrowDown"]&&i===selectedLevel&&i<LEVELS.length-1){selectedLevel++;keys["ArrowDown"]=false;}
  }
}

// Simple HUD for demo purposes only
function drawGameHUD() {
  // Top bar HUD (Score/Health)
  ctx.save();
  ctx.globalAlpha=.97;
  ctx.fillStyle="#222a37";
  ctx.fillRect(0,0,canvas.width,52);
  
  // Score and Health text
  ctx.font="bold 22px Segoe UI";
  ctx.textAlign="left";
  ctx.fillStyle="#ffe898";
  ctx.fillText("SCORE: "+(Math.floor(Math.abs(Math.sin(Date.now()/600))*100000)).toLocaleString(),38,32);
  
  let char = CHARACTERS[selectedChar];
  
  // Health bar
  let hp = Math.round((Math.abs(Math.cos(Date.now()/800))*100));
  
  let hpBarW = Math.max(120,hp*2);
  
  ctx.save();
    // Health bar bg
    ctx.strokeStyle="#fff";
    ctx.lineWidth=3;
    ctx.strokeRect(canvas.width-220,14,180,24);
    
    // Health bar fill (forge orange)
    let grad=ctx.createLinearGradient(canvas.width-220,14,canvas.width-40,14);
    grad.addColorStop(0,"#ffe898"); grad.addColorStop(.5,"#ff7200"); grad.addColorStop(1,"#bc3cff");
    
    ctx.fillStyle = grad;
    ctx.globalAlpha=.88;
    ctx.fillRect(canvas.width-220+2,16,hpBarW-4,20);
    
    // Health text
    ctx.globalAlpha=1;
    ctx.font="bold italic 18px Segoe UI";
    ctx.textAlign="right";
    ctx.fillStyle="#fff";
    ctx.fillText("HEALTH: "+hp+"%",canvas.width-44,32);
    
   // Character label portrait (mini)
   let r=17,xp=18;
   ctx.save();
   ctx.beginPath();ctx.arc(xp+14,26,r+3,0,Math.PI*2);ctx.closePath();
   ctx.strokeStyle="#fff";ctx.lineWidth=3;ctx.globalAlpha=.7;ctx.stroke();
   ctx.beginPath();ctx.arc(xp+14,26,r,0,Math.PI*2);ctx.closePath();ctx.globalAlpha=.9;ctx.fillStyle=char.color;ctx.fill();
   // Initial
   ctx.globalAlpha=1;ctx.font="italic bold 19px Segoe UI";ctx.textAlign="center";
   ctx.fillStyle="#fff";ctx.fillText(char.name[0],xp+14,31);
   ctx.restore();
   
   // Quit to title via Esc
   if(keys["Escape"]) { state = "title"; keys["Escape"] = false; }
  
}

// === Draw Glowing Button ===
function drawButton(x,y,w,h,text,isActive) {
  ctx.save();
  if(isActive) {
    let glowGrad = ctx.createLinearGradient(x,y,x+w,y+h);
    glowGrad.addColorStop(0,'#ffb347');
    glowGrad.addColorStop(.7,'#bc3cff');
    glowGrad.addColorStop(1,'#18141e');
    ctx.shadowBlur =8;ctx.shadowColor='#ffb347';
    ctx.globalAlpha=.95;
    ctx.fillStyle = glowGrad;
    ctx.fillRect(x,y,w,h);
    ctx.shadowBlur =0;
    
    // Border effect
    ctx.strokeStyle='#fff';ctx.lineWidth=2;ctx.globalAlpha=.8;
    ctx.strokeRect(x,y,w,h);
    
    // Text
    ctx.font="bold italic 22px Segoe UI";
    ctx.textAlign='center';ctx.textBaseline='middle';
    ctx.globalAlpha =1; 
    ctx.fillStyle='#fff';
    ctx.fillText(text,x+w/2,y+h/2);
    
  } else {
    // Disabled state
    ctx.globalAlpha=.5;
    ctx.fillStyle='#333';ctx.fillRect(x,y,w,h);
    ctx.strokeStyle='#888';ctx.lineWidth=1.5;
    ctx.strokeRect(x,y,w,h);
    
    // Text
    ctx.font="bold italic 22px Segoe UI";
    ctx.textAlign='center';ctx.textBaseline='middle';
    ctx.globalAlpha =.8; 
    ctx.fillStyle='#bbb';
    ctx.fillText(text,x+w/2,y+h/2);
    
  }
  
  ctx.restore();
}

</script>
</body>
</html>