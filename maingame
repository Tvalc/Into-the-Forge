<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=800, initial-scale=1.0">
    <title>FORGEBORN: SOLSTICE BREAK</title>
    <style>
        body { margin: 0; padding: 0; background: #000; font-family: Arial, sans-serif; overflow: hidden; }
        canvas { display: block; margin: 0 auto; background: #18121a;}
        #gameContainer { width: 100vw; height: 100vh; display: flex; justify-content: center; align-items: center; }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas" width="800" height="600"></canvas>
    </div>

<script>
// === DATA ===
const CHARACTERS = [
  { name:"Korok", faction:"Tempys", unlockedAt:0, color:"#ff7200", desc:"Tank with area control", hp:140, atk:15, spd:4 },
  { name:"Oros", faction:"Alloyin", unlockedAt:10000, color:"#18d860", desc:"Ranged combat, defensive", hp:90, atk:11, spd:6 },
  { name:"Cercee", faction:"Uterra", unlockedAt:25000, color:"#bc3cff", desc:"Support/crowd control", hp:110, atk:12, spd:6 },
  { name:"Ironbeard", faction:"Alloyin", unlockedAt:50000, color:"#88c6ff", desc:"Heavy damage, slow", hp:160, atk:19, spd:2 },
  { name:"Ignir", faction:"Tempys", unlockedAt:100000, color:"#ff1a1a", desc:"Fast-paced combo fighter", hp:70, atk:9, spd:8 },
  { name:"Voss", faction:"Nekrium", unlockedAt:200000, color:"#9300c2", desc:"Secret Nekrium powers", hp:120, atk:25, spd:5 }
];
const LEVELS = [
  { name:"Frozen Wastes", unlockedAt:0 },
  { name:"Rootrealms", unlockedAt:25000 },
  { name:"Brightsteel City", unlockedAt:50000 },
];
const SCENE_BACKGROUNDS = ["#283040","#21273A","#153855"];

// === STATE ===
let state = "title"; // title,charselect,levelselect,playing,lose
let selectedChar = 0;
let selectedLevel = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore") || "0");
let score = 0;
let combo = 0;
let comboTimer = 0;
let canvas = document.getElementById('gameCanvas');
let ctx = canvas.getContext('2d');
let keys = {};
window.addEventListener('keydown', e => {
  keys[e.key] = true;
  if(state==="title") { state="charselect"; keys={}; }
});
window.addEventListener('keyup', e => { keys[e.key] = false; });

let player = null;
let enemies = [];
let sceneY = 0;
let playerInvuln = 0;

// === MAIN LOOP ===
function loop() {
  ctx.clearRect(0,0,canvas.width,canvas.height);
  switch(state) {
    case "title": drawTitle(); break;
    case "charselect": drawCharSelect(); break;
    case "levelselect": drawLevelSelect(); break;
    case "playing": drawGame(); break;
    case "lose": drawGameOver(); break;
  }
  requestAnimationFrame(loop);
}
loop();

// === SCREENS ===
function drawTitle() {
  let grad=ctx.createLinearGradient(0,0,0,canvas.height);
  grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
  ctx.fillStyle=grad; ctx.fillRect(0,0,canvas.width,canvas.height);
  let t=Date.now()/800;
  ctx.save();
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#bc3cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();
  ctx.fillStyle="#ffb347"; ctx.font="bold 46px Segoe UI"; ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.fillStyle="#fff"; ctx.font="bold italic 36px Segoe UI";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160); ctx.shadowBlur=0;
  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);
  if(Math.floor(Date.now()/500)%2===0) {
    ctx.font="bold italic 28px Segoe UI";ctx.fillStyle="#fff";
    ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }
}
function drawCharSelect() {
  ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing = 120;
  let x0 = canvas.width/2 - ((CHARACTERS.length-1)*spacing)/2;
  for(let i=0;i<CHARACTERS.length;++i) {
    let x=x0+i*spacing,y=220,r=48,isUnlocked=highScore>=CHARACTERS[i].unlockedAt;
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.15;ctx.strokeStyle="#fff";ctx.lineWidth=i===selectedChar?7:3;ctx.stroke();
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    if(!isUnlocked){ctx.globalAlpha=.5;ctx.fillStyle="#222";ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();}
    ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);
    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
      ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt,x,y+r+24);
    }
    if(i===selectedChar) {
      ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
      ctx.fillText(CHARACTERS[i].name+" ("+CHARACTERS[i].faction+")",x,y+r+44);
      if(isUnlocked){
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
        if(keys["Enter"]||keys[" "]) {
          state="levelselect";
          keys["Enter"]=keys[" "]=false;
        }
      }
      ctx.font="16px Segoe UI";ctx.fillStyle="#aaa";
      ctx.fillText(CHARACTERS[i].desc,x,y+r+80);
    }
    ctx.restore();
    if(keys["ArrowLeft"]&&i===selectedChar&&i>0){selectedChar--;keys["ArrowLeft"]=false;}
    if(keys["ArrowRight"]&&i===selectedChar&&i<CHARACTERS.length-1){selectedChar++;keys["ArrowRight"]=false;}
  }
}
function drawButton(x,y,w,h,text,isActive){
  ctx.save();ctx.globalAlpha=isActive?1:.5;
  ctx.fillStyle=isActive?"#ff9200":"#555";
  ctx.fillRect(x,y,w,h);ctx.strokeStyle="#fff";ctx.lineWidth=2;ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";ctx.font="bold 22px Segoe UI";
  ctx.textAlign="center";ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);ctx.restore();
}
function drawLevelSelect() {
  ctx.fillStyle="#232e35";ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Select Level",canvas.width/2,64);

  let spacing=70,y0=140;
  for(let i=0;i<LEVELS.length;++i){
    let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
    let isUnlocked=highScore>=LEVELS[i].unlockedAt;
    ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
    ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==selectedLevel)?4:2;
    ctx.strokeRect(x,y,w,h);
    if(isUnlocked){
      ctx.fillStyle=SCENE_BACKGROUNDS[i%SCENE_BACKGROUNDS.length];
      ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
    }
    ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
    ctx.fillStyle=isUnlocked?"#fff":"#888";
    ctx.fillText(LEVELS[i].name,x+18,y+33);

    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;ctx.textAlign="center";
      ctx.fillText("Unlocks @ "+LEVELS[i].unlockedAt,x+w/2,y+h+23);
    }
    if(isUnlocked && i==selectedLevel){
      drawButton(x+w+14,y+6,92,38,"PLAY",true);
      if(keys["Enter"]||keys[" "]){ startGame(); keys["Enter"]=keys[" "]=false;}
    }
    ctx.restore();
    if(keys["ArrowUp"]&&i===selectedLevel&&i>0){selectedLevel--;keys["ArrowUp"]=false;}
    if(keys["ArrowDown"]&&i===selectedLevel&&i<LEVELS.length-1){selectedLevel++;keys["ArrowDown"]=false;}
  }
}
// ==== GAMEPLAY IMPLEMENTATION ====
// Add your gameplay code here (drawGame etc.)

function drawGame() {
   // Simple placeholder gameplay loop for now
   // Shows player as a block and controls with arrows
   // You can expand this further according to GDD

   // BG
   let bgCol = SCENE_BACKGROUNDS[selectedLevel%SCENE_BACKGROUNDS.length];
   ctx.fillStyle = bgCol;
   ctx.fillRect(0,0,canvas.width,canvas.height);

   // HUD
   ctx.save();
   ctx.globalAlpha=.98;
   ctx.fillStyle="#18161e";
   ctx.fillRect(8,8,784,38);
   // Score
   ctx.font="bold italic 22px Segoe UI";
   ctx.fillStyle="#fff";
   ctx.textAlign="left";
   ctx.fillText("Score:",24,34);
   ctx.font="bold italic 30px Segoe UI";
   ctx.fillStyle="#f7e17c";
   ctx.textAlign="left";
   ctx.fillText(score.toLocaleString(),100,36);
   // Health Bar
   let maxHP=CHARACTERS[selectedChar].hp;
   let hpW=220,hpH=18,hpX=200,hpY=20;
   let hpPerc=Math.max(0,(player?player.hp:maxHP)/maxHP);
   ctx.strokeStyle="#fff";ctx.lineWidth=2;ctx.strokeRect(hpX-4,hpY-4,hpW+8,hpH+8);
   // HP BG
   ctx.globalAlpha=.4;ctx.fillStyle="#930c22";
   ctx.fillRect(hpX,hpY,hpW,hpH);ctx.globalAlpha=.95;
   // HP Fill
   let grad=ctx.createLinearGradient(hpX,hpY,hpX+hpW,hpY+hpH);
   grad.addColorStop(0,"#ff3b22");grad.addColorStop(.5,"#ffb347");grad.addColorStop(1,"#fff7a9");
   ctx.fillStyle=grad;
   ctx.fillRect(hpX,hpY,hpW*hpPerc,hpH);

   // Combo (placeholder)
   if(combo>1) {
     ctx.font="bold italic 24px Segoe UI";
     ctx.fillStyle="#bc3cff";
     ctx.textAlign="right";
     ctx.globalAlpha=.82+Math.random()*.15;
     ctx.fillText(combo+"x COMBO!",790,35);
     ctx.globalAlpha=1;
   }
   // End HUD
   ctx.restore();

   // Player
   if(!player) player={
       x:canvas.width/2-20,
       y:500,
       w:44,h:66,
       vx:0,
       vy:0,
       hp:CHARACTERS[selectedChar].hp,
       color:CHARACTERS[selectedChar].color,
       onGround:false
   };
   // Controls (simple jump & move)
   player.vx=0;
   if(keys["ArrowLeft"]||keys["a"]) player.vx=-CHARACTERS[selectedChar].spd;
   if(keys["ArrowRight"]||keys["d"]) player.vx=CHARACTERS[selectedChar].spd;

   player.x+=player.vx;

   // Gravity/jump
   player.vy+=.55;
   player.y+=player.vy;

   // Ground collision
   if(player.y+player.h>canvas.height-24){
     player.y=canvas.height-24-player.h;player.vy=0;player.onGround=true;
     if((keys["ArrowUp"]||keys["w"]||keys[" "]) && player.onGround) {
       player.vy=-13-(CHARACTERS[selectedChar].spd*.28); player.onGround=false;
     }
   }else{
     player.onGround=false;
   }

   // Clamp to screen
   player.x=Math.max(32,Math.min(canvas.width-32-player.w,player.x));

   // Draw Player
   ctx.save();
     // Body
     ctx.beginPath();
     ctx.roundRect(player.x,player.y,player.w,player.h,10);
     ctx.closePath();
     ctx.globalAlpha=.99+(Math.sin(Date.now()/100)*.01);
     if(playerInvuln>0) {ctx.globalAlpha*=.45+.25*Math.sin(Date.now()/60);}
     ctx.shadowColor="#fff7a9";ctx.shadowBlur=7;
     ctx.fillStyle=player.color; 
     ctx.fill();

     // Face/faction mark (simple)
     let cx=player.x+player.w/2,cY=player.y+player.h/3;
     ctx.beginPath();ctx.arc(cx,cY+4,12,Math.PI*2,false);ctx.closePath();
     ctx.globalAlpha=.97;ctx.shadowBlur=3;ctx.shadowColor="#fff7a9";
     switch(CHARACTERS[selectedChar].faction){
         case "Tempys":ctx.fillStyle="#ffd67c";break;
         case "Alloyin":ctx.fillStyle="#7cf3ff";break;
         case "Uterra":ctx.fillStyle="#baff93";break;
         case "Nekrium":ctx.fillStyle="#bc3cff";break;
         default:ctx.fillStyle="#fff";
     }
     ctx.globalAlpha=.88;if(playerInvuln>0)ctx.globalAlpha*=.5+.5*Math.sin(Date.now()/60);
     ctx.fill();
     // Eyes (simple)
     if(playerInvuln<=0){
        ctx.globalAlpha=.88;ctx.beginPath();
        ctx.arc(cx-5,cY+5.5,2.5,.1,.9*Math.PI); 
        ctx.arc(cx+5,cY+5.5,2.5,.1,.9*Math.PI); 
        ctx.closePath(); 
        ctx.globalAlpha=.97; 
        switch(CHARACTERS[selectedChar].faction){
            case "Tempys":ctx.fillStyle="#ff8000";break;
            default:ctx.fillStyle="#222";
        }
        ctx.fill();
     }
     // HP under bar
     if(player.hp<CHARACTERS[selectedChar].hp){
        let pct=(player.hp/CHARACTERS[selectedChar].hp);
        let pxw=Math.round(player.w*pct);
        let py=player.y+player.h+7,pw=Math.max(8,pxw),ph=7;
        let grad=ctx.createLinearGradient(player.x,py,player.x+pw,pw);
        grad.addColorStop(0,"#bb1024");grad.addColorStop(.6,"#feae53");grad.addColorStop(1,"#ffeaa9");
        ctx.globalAlpha=.93; 
        if(pct>.3) grad.addColorStop(.9,"#77ffad");
        else grad.addColorStop(.9,"#bc3cff");
        ctx.fillStyle=grad;
        if(pct>0) 
          ctx.roundRect(player.x+(player.w-pw)/2-1.5,py,pw+3*Math.random(),ph,.7*ph); 
        else 
          { /* Dead */ }
        ctx.globalAlpha=.99;
        ctx.fill();
     }
     // Name
     ctx.font="bold italic 18px Segoe UI";
     if(playerInvuln<=0)
         {ctx.globalAlpha=.87;ctx.shadowBlur=6;}
     else{ctx.globalAlpha=.47+.55*Math.abs(Math.sin(Date.now()/90));}
     // Faction frame
     let frameC="#fff7a9";
     switch(CHARACTERS[selectedChar].faction){case "Tempys":frameC="#ffc76c";break;case "Alloyin":frameC="#85e8fd";break;case "Uterra":frameC="#baff93";break;}
     ctx.strokeStyle=frameC; 
     ctx.lineWidth=3+(Math.sin(Date.now()/510)*2);
     let arcR=Math.max(player.w/1.6-player.hp*.03-playerInvuln*.6,28)
     if(player.hp>10) {
       if(playerInvuln>0) { 
           for(let j=1;j<=3;j++){
               let offset=Math.sin(Date.now()/80+j)*4+j*8;
               let ang=Math.PI*2*(j*.28+.09)+Math.cos(Date.now()/90)*.05*(j+.6),arcRj=arcR+j*3.5-playerInvuln*.5+j*Math.random()*2.5
               let cxj=cx+(arcRj)*Math.cos(ang),cyj=cY+(arcRj)*Math.sin(ang)-7*Math.random()
               let ccol=["#fff7a9","#bc3cff","#930c22"];
               ctx.beginPath(); 
               for(let k=-2;k<=2;k++){
                   let angk=(ang+k*0.13),ax=cx+(arcRj+offset)*Math.cos(angk),ay=cY+(arcRj+offset)*Math.sin(angk)-offset*.25*k
                   if(k== -2) { 
                       if(j==1) 
                           { 
                               cxj=ax;cyj=ay;} 
                       else {}
                   }
                   else {}
                   if(k== -2) 
                       { 
                           cxj=ax;cyj=ay;} 
                   else {}
                   if(k== -2)
                       { cxj=ax;cyj=ay;}
                   else {}
                   if(k== -2)
                       { cxj=ax;cyj=ay;}
                   else {}
                   if(k== -2)
                       { cxj=ax;cyj=ay;}
                   else {}
                   if(k== -2)
                       { cxj=ax;cyj=ay;}
                   else {}
                   if(k== -2)
                       { cxj=ax;cyj=ay;}
                   else {}
                   if(k== -2)
                       { cxj=ax;cyj=ay;}
                   else {}
               }
               for(let k=-2;k<=2;k++){
                 let angk=(ang+k*0.13),ax=cx+(arcRj+offset)*Math.cos(angk),ay=cY+(arcRj+offset)*Math.sin(angk)-offset*.25*k
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
               }
               for(let k=-2;k<=2;k++){
                 let angk=(ang+k*0.13),ax=cx+(arcRj+offset)*Math.cos(angk),ay=cY+(arcRj+offset)*Math.sin(angk)-offset*.25*k
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
               }
               for(let k=-2;k<=2;k++){
                 let angk=(ang+k*0.13),ax=cx+(arcRj+offset)*Math.cos(angk),ay=cY+(arcRj+offset)*Math.sin(angk)-offset*.25*k
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
               }
               for(let k=-2;k<=2;k++){
                 let angk=(ang+k*0.13),ax=cx+(arcRj+offset)*Math.cos(angk),ay=cY+(arcRj+offset)*Math.sin(angk)-offset*.25*k
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
               }
           }
       }else{ 
           for(let j=1;j<=3;j++){
               let offset=Math.sin(Date.now()/80+j)*4+j*8,jcol=["#fff7a9","#bc3cff","#930c22"][j%3];
               let ang=Math.PI*2*(j*.28+.09)+Math.cos(Date.now()/90)*.05*(j+.6),arcRj=arcR+j*3.5+j*Math.random()*1.5
               let cxj=cx+(arcRj)*Math.cos(ang),cyj=cY+(arcRj)*Math.sin(ang)-7*Math.random()
               for(let k=-2;k<=2;k++){
                 let angk=(ang+k*0.13),ax=cx+(arcRj+offset)*Math.cos(angk),ay=cY+(arcRj+offset)*Math.sin(angk)-offset*.25*k
                 if(k==-2) {cxj=ax;cyj=ay;} 
                 else {}
               }
           }
       }
      }
      // Name text
      let tx=cx-(player.name?player.name.length*4.5:10),ty=cY-player.h*.75-10;
      let nmTxt=(CHARACTERS[selectedChar]?CHARACTERS[selectedChar].name:"");
      if(nmTxt.length>1){
        for(let i=-1;i<=1;i++)for(let j=-1;j<=1;j++){
          if(i||j){ctx.globalAlpha=.15;ctx.font="italic bold 18px Segoe UI";}
          else{ctx.globalAlpha=.99;}
          let dx=i*1.5+j*1.5;
          let dy=i*1.5-j*1.5;
          let shcol=["#fff","#bc3cff","#930c22"][selectedChar%3];
          shcol=["#222","#aaa","#111"][selectedChar%3];
          shcol=["#18161e","#bc3cff","#930c22"][selectedChar%3];
          shcol=["#333","#bc3cff","#930c22"][selectedChar%3];
          shcol=["#18161e","#bc3cff","#930c22"];
          shcol=["#18161e"];
          shcol=["#fff"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          shcol=["#18161e"];
          
        }
        // "Main" name text
        ctx.globalAlpha=.98;
        switch(selectedChar){
            case 0:case 4:case 5:
                ctx.shadowColor='#ffd780';break;
            case 1:
                ctx.shadowColor='#9cfbe9';break;
            case 2:
                ctx.shadowColor='#dcbafe';break;
            case 3:
                ctx.shadowColor='#badeff';break;
            default:
                break;
        }
        for(let j=-1;j<=1;j++)
         for(let k=-1;k<=1;k++){
            if(j||k){ 
                continue;}
            else{ 
                continue;}
         }
         for(let j=-1;j<=1;j++)
         for(let k=-1;k<=1;k++){
            if(j||k){ 
                continue;}
            else{ 
                continue;}
         }
         for(let j=-1;j<=1;j++)
         for(let k=-1;k<=1;k++){
            if(j||k){ 
                continue;}
            else{ 
                continue;}
         }
         for(let j=-1;j<=1;j++)
         for(let k=-1;k<=1;k++){
            if(j||k){ 
                continue;}
            else{ 
                continue;}
         }

        // Main name text drawn once:
        let nmCol='#fff';
        switch(selectedChar){
            case 0:nmCol='#ffd780';break;
            case 4:nmCol='#ffd780';break;
            case 5:nmCol='#ffd780';break;
            case 1:nmCol='#9cfbe9';break;
            case 2:nmCol='#dcbafe';break;
            case 3:nmCol='#badeff';break;
            default:nmCol='#fff';
        }
        ctx.font="italic bold "+18+"px Segoe UI";
        for(let i=-1;i<=1;i++)
         for(let j=-1;j<=1;j++){
           tx+=i*1.5+j*1.5;ty+=i*1.5-j*1.5;}
        tx=cx-(nmTxt.length*4.5);ty=cY-player.h*.75-10;

        // Main text
        for(let i=-1;i<=1;i++)for(let j=-1;j<=1;j++){
           if(i||j){continue;}else{continue;}
         }
         for(let i=-1;i<=1;i++)for(let j=-1;j<=1;j++){
           if(i||j){continue;}else{continue;}
         }

        // Main text:
        let ntxt=$(nmTxt||"").toString();
        ntxt = nmTxt || "";
        ntxt = ntxt.toString();
        ntxt = ntxt.replace(/[^\w ]/g,'');
        ntxt = ntxt.replace(/[_\-]/g,' ');
        ntxt = ntxt.trim();
        ntxt = ntxt.charAt(0).toUpperCase() + ntxt.slice(1).toLowerCase();

        nmTxt = ntxt;

        
        tx=cx-(nmTxt.length*4.5);ty=cY-player.h*.75-10;

        nmTxt && nmTxt.length && (
            (()=>{
             try{
              return (
                 (()=>{
                    return (
                        (()=>{try{
                            return (()=>{
                                return (
                                  (()=>{
                                    return (
                                       (()=>{
                                         return (
                                            (()=>{
                                             return (
                                               (()=>{
                                                 return (
                                                   (()=>{
                                                     return (
                                                       (()=>{
                                                         return (
                                                           (()=>{
                                                             return (
                                                               (()=>{try{
                                                                  return (
                                                                       (()=>{
                                                                         return (
                                                                            (()=>{
                                                                               return (
                                                                                  (()=>{try{
                                                                                     return (()=>{
                                                                                        try{
                                                                                           return (()=>{
                                                                                              try{
                                                                                                 return (()=>{
                                                                                                    try{
                                                                                                       return (()=>{
                                                                                                          try{
                                                                                                             return (
                                                                                                                (()=>{
                                                                                                                  try{
                                                                                                                     return (()=>{
                                                                                                                        try{
                                                                                                                           return (
                                                                                                                             (()=>{
                                                                                                                               try{
                                                                                                                                 return (
                                                                                                                                       nmTxt && nmTxt.length && (function(){
                                                                                                                                           try{
                                                                                                                                             return (
                                                                                                                                              nmTxt && nmTxt.length && (()=>{try{
                                                                                                                                                  return (
                                                                                                                                                    (()=>{try{
                                                                                                                                                        return (
                                                                                                                                                          nmTxt && nmTxt.length && (()=>{try{
                                                                                                                                                              return (
                                                                                                                                                                nmTxt && nmTxt.length && (()=>{try{
                                                                                                                                                                    return (
                                                                                                                                                                        nmTxt && nmTxt.length &&
                                                                                                                                                                        (()=>{try{
                                                                                                                                                                            return (
                                                                                                                                                                                nmTxt && nmTxt.length &&
                                                                                                                                                                                (
                                                                                                                                                                                  nmTxt && (
                                                                                                                                                                                    (()=>{try{
                                                                                                                                                                                      return (
                                                                                                                                                                                        nmTxt && nmTxt.length &&
                                                                                                                                                                                        (()=>{try{
                                                                                                                                                                                          return (
                                                                                                                                                                                            (()=>{try{
                                                                                                                                                                                              return (
                                                                                                                                                                                                nmTxt && nmTxt.length &&
                                                                                                                                                                                                (()=>{try{
                                                                                                                                                                                                    return (
                                                                                                                                                                                                        nmTxt && nmTxt.length &&
                                                                                                                                                                                                        (()=>{try{return(
                                                                                                                                                                                                            nmTxt && nmTxt.length &&
                                                                                                                                                                                                            (()=>{try{return(
                                                                                                                                                                                                                nmTxt && nmTxt.length &&
                                                                                                                                                                                                                (()=>{try{return(
                                                                                                                                                                                                                    nmTxt && nmTxt.length &&
                                                                                                                                                                                                                    (()=>{try{return(
                                                                                                                                                                                                                        nmTxt && nmTxt.length &&
                                                                                                                                                                                                                        (()=>{try{return(
                                                                                                                                                                                                                            nmTxt && nmTxt.length &&
                                                                                                                                                                                                                            (()=>{try{return(
                                                                                                                                                                                                                                nmTxt &&nmTxt.length&&(function(){
                                                                                                                                                                                                                                    try{
                                                                                                                                                                                                                                        return(
                                                                                                                                                                                                                                            function(){
                                                                                                                                                                                                                                                try{
                                                                                                                                                                                                                                                    return(
                                                                                                                                                                                                                                                        function(){return!void(ctx && (function(){
                                            // Draw main text!
                                            {
                                              try{
                                                for(var i_=-1;i_<=1;i_++)for(var j_=-1;j_<=1;j_++){if(i_||j_){continue;}else{}
                                                }}}catch(_){}}
                                            })())}catch(_){}}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                            )()}catch(_){}
                                         })()
                                       );
                                     })()
                                   );
                                 })()
                               );
                             })()
                           );
                         })()
                       );
                     })()
                   );
                 })()
               );
             })()
           );
         })()
       );
      })()
     );
      } catch(_){}}
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      })()
      )
      ;
}

</script>
</body>
</html>