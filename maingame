<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <title>Simple Pong Game</title>
  <link rel="stylesheet" href="style.css" />
<style>
body {
  background: #222;
  color: #fff;
  font-family: 'Segoe UI', Arial, sans-serif;
  text-align: center;
  margin: 0;
  padding: 0;
}

h1 {
  margin-top: 30px;
}

#gameCanvas {
  display: block;
  margin: 30px auto;
  background: #333;
  border: 4px solid #fff;
  box-shadow: 0 0 30px #111 inset;
}

#instructions {
  margin-top: -10px;
}

button#restartBtn {
  padding: 10px 30px;
  font-size: 1.1em;
  background: #09f;
  color: #fff;
  border: none;
  border-radius: 4px;
  margin-top: 15px;
  cursor: pointer;
}

button#restartBtn:hover {
  background: #06c;
}
</style>
</head>
<body>
  <h1>Simple Pong Game</h1>
  <canvas id="gameCanvas" width="800" height="500"></canvas>
  <div id="instructions">
    <p><strong>Left Paddle:</strong> W / S</p>
    <p><strong>Right Paddle:</strong> Up / Down Arrows</p>
    <button id="restartBtn">Restart</button>
  </div>
  <script src="game.js"></script>
<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Game Constants
const PADDLE_WIDTH = 12,
      PADDLE_HEIGHT = 90,
      PADDLE_SPEED = 6,
      BALL_RADIUS = 10,
      BALL_SPEED = 5;

let leftScore = 0, rightScore = 0;

// Paddle Objects
const leftPaddle = {
    x: 20,
    y: canvas.height/2 - PADDLE_HEIGHT/2,
    width: PADDLE_WIDTH,
    height: PADDLE_HEIGHT,
    dy: 0
};
const rightPaddle = {
    x: canvas.width - PADDLE_WIDTH - 20,
    y: canvas.height/2 - PADDLE_HEIGHT/2,
    width: PADDLE_WIDTH,
    height: PADDLE_HEIGHT,
    dy: 0
};

// Ball Object
const ball = {
    x: canvas.width/2,
    y: canvas.height/2,
    radius: BALL_RADIUS,
    speedX: BALL_SPEED * (Math.random() > .5 ? 1 : -1),
    speedY: BALL_SPEED * (Math.random() * .7 + .3) * (Math.random() > .5 ? 1 : -1)
};

let isRunning = true;

function resetBall(direction) {
    ball.x = canvas.width/2;
    ball.y = canvas.height/2;
    // Serve toward the player who lost the point
    ball.speedX = BALL_SPEED * (direction || (Math.random() > .5 ? 1 : -1));
    ball.speedY = BALL_SPEED * (Math.random() * .7 + .3) * (Math.random() > .5 ? 1 : -1);
}

function drawRect(x, y, w, h, color='#fff') {
    ctx.fillStyle = color;
    ctx.fillRect(x, y, w, h);
}

function drawCircle(x, y, r, color='#fff') {
    ctx.beginPath();
    ctx.arc(x, y, r, 0, Math.PI*2);
    ctx.fillStyle = color;
    ctx.fill();
}

function drawNet() {
    ctx.strokeStyle = '#888';
    ctx.setLineDash([8,16]);
    ctx.beginPath();
    ctx.moveTo(canvas.width/2,20);
    ctx.lineTo(canvas.width/2,canvas.height-20);
    ctx.stroke();
    ctx.setLineDash([]);
}

function drawScore() {
    ctx.font = "bold 40px Segoe UI, Arial";
    ctx.textAlign = "center";
    ctx.fillStyle = "#fff";
    ctx.fillText(leftScore, canvas.width/4,50);
    ctx.fillText(rightScore, canvas.width*3/4,50);
}

function clear() {
    ctx.clearRect(0,0,canvas.width,canvas.height);
}

function draw() {
    clear();
    drawNet();
    drawRect(leftPaddle.x, leftPaddle.y, leftPaddle.width, leftPaddle.height);
    drawRect(rightPaddle.x, rightPaddle.y, rightPaddle.width, rightPaddle.height);
    drawCircle(ball.x, ball.y, ball.radius);
    drawScore();
}

function clamp(val,min,max) { return Math.max(min, Math.min(max,val)); }

function update() {
    // Move paddles
    leftPaddle.y += leftPaddle.dy;
    rightPaddle.y += rightPaddle.dy;

    // Clamp paddles within canvas
    leftPaddle.y = clamp(leftPaddle.y,0,canvas.height-leftPaddle.height);
    rightPaddle.y = clamp(rightPaddle.y,0,canvas.height-rightPaddle.height);

    // Move ball
    ball.x += ball.speedX;
    ball.y += ball.speedY;

    // Ball collision with top/bottom
    if (ball.y - ball.radius < 0) {
        ball.y = ball.radius; ball.speedY *= -1;
    }
    if (ball.y + ball.radius > canvas.height) {
        ball.y = canvas.height-ball.radius; ball.speedY *= -1;
    }

    // Ball collision with paddles
    // Left paddle
    if (
      ball.x - ball.radius < leftPaddle.x + leftPaddle.width &&
      ball.x - ball.radius > leftPaddle.x &&
      ball.y > leftPaddle.y &&
      ball.y < leftPaddle.y + leftPaddle.height
     ) {
        // Reflect and add some randomness
        ball.x = leftPaddle.x + leftPaddle.width + ball.radius;
        let norm = (ball.y - (leftPaddle.y + leftPaddle.height/2)) / (leftPaddle.height/2);
        let angle = norm * (Math.PI/4); // max ±45°
        let speed = Math.sqrt(ball.speedX*ball.speedX + ball.speedY*ball.speedY) * 1.05; // slight speed up
        ball.speedX = speed * Math.cos(angle);
        ball.speedY = speed * Math.sin(angle);
        if (ball.speedX < BALL_SPEED) ball.speedX = BALL_SPEED; // prevent slow balls
     }
     // Right paddle
     if (
      ball.x + ball.radius > rightPaddle.x &&
      ball.x + ball.radius < rightPaddle.x + rightPaddle.width &&
      ball.y > rightPaddle.y &&
      ball.y < rightPaddle.y + rightPaddle.height
     ) {
        ball.x = rightPaddle.x - ball.radius;
        let norm = (ball.y - (rightPaddle.y + rightPaddle.height/2)) / (rightPaddle.height/2);
        let angle = norm * (Math.PI/4); // max ±45°
        let speed = Math.sqrt(ball.speedX*ball.speedX + ball.speedY*ball.speedY) * 1.05; // slight speed up
        ball.speedX = -speed * Math.cos(angle);
        ball.speedY = speed * Math.sin(angle);
        if (ball.speedX > -BALL_SPEED) ball.speedX = -BALL_SPEED; // prevent slow balls
     }

     // Score!
     if (ball.x < 0) {
       rightScore++;
       resetBall(1);
       isRunning = false;
       setTimeout(()=>{isRunning=true;},800);
     }
     if (ball.x > canvas.width) {
       leftScore++;
       resetBall(-1);
       isRunning = false;
       setTimeout(()=>{isRunning=true;},800);
     }
}

function gameLoop() {
   if(isRunning) update();
   draw();
   requestAnimationFrame(gameLoop);
}

// Input Handling
document.addEventListener('keydown', function(e){
   switch(e.code){
     case 'KeyW': leftPaddle.dy = -PADDLE_SPEED; break;
     case 'KeyS': leftPaddle.dy = PADDLE_SPEED; break;
     case 'ArrowUp': rightPaddle.dy = -PADDLE_SPEED; break;
     case 'ArrowDown': rightPaddle.dy = PADDLE_SPEED; break;
   }
});
document.addEventListener('keyup', function(e){
   switch(e.code){
     case 'KeyW': if(leftPaddle.dy<0)leftPaddle.dy=0; break;
     case 'KeyS': if(leftPaddle.dy>0)leftPaddle.dy=0; break;
     case 'ArrowUp': if(rightPaddle.dy<0)rightPaddle.dy=0; break;
     case 'ArrowDown': if(rightPaddle.dy>0)rightPaddle.dy=0; break;
   }
});

// Restart Button
document.getElementById('restartBtn').onclick = function(){
   leftScore=rightScore=0;
   leftPaddle.y=canvas.height/2-PADDLE_HEIGHT/2;
   rightPaddle.y=canvas.height/2-PADDLE_HEIGHT/2;
   resetBall(Math.random()>.5?1:-1);
   isRunning=true;
};

gameLoop();
</script>
</body>
</html>