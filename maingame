<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <style>
    html, body { margin:0; padding:0; background:#18121a;}
    canvas { display:block; margin:0 auto; background:#18121a;}
    body { overflow:hidden; }
    #lorePopup {
      position:absolute; left:50%; top:30%; transform:translate(-50%,-30%);
      background:#232e35; border:4px solid #ffb347; color:#fff; z-index:2;
      padding:32px; display:none; font-family:"Segoe UI",sans-serif; border-radius:20px;
      min-width:340px; min-height:120px;
      box-shadow:0 8px 32px #000a;
      text-align:center;
    }
  </style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="600"></canvas>
<div id="lorePopup"></div>
<script>
// ====== GAME DATA ======
const CHARACTERS = [
  { name: "Korok", color: "#ff7200", hp:120, speed:4.5, atk:14, unlockedAt:0 },
  { name: "Oros", color: "#18d860", hp:80, speed:6.3, atk:10, unlockedAt:10000 },
  { name: "Cercee", color: "#bc3cff", hp:90, speed:6.2, atk:11, unlockedAt:25000 },
  { name: "Ironbeard", color: "#88c6ff", hp:130, speed:3.9, atk:15, unlockedAt:50000 },
  { name: "Ignir", color: "#ff1a1a", hp:70, speed:7.2, atk:8, unlockedAt:100000 },
  { name: "Voss", color: "#9300c2", hp:100, speed:5.8, atk:18, unlockedAt:200000 }
];

const LEVELS = [
  { name:"Frozen Wastes", scenes:[
    { bg:"frozen_wastes_1.png", color:"#2e3a5a", lore:"The open tundra of Solis." },
    { bg:"frozen_wastes_2.png", color:"#273548", lore:"Ice fissures cut through the wastes." },
    { bg:"frozen_wastes_3.png", color:"#222831", lore:"Ruined gates of the Ice Cave—miniboss awaits within." }
  ], unlockedAt:0 },
  { name:"Rootrealms", scenes:[
    { bg:"rootrealms_1.png", color:"#234a33", lore:"Lush jungle beneath the ice—Uterra's last refuge." },
    { bg:"rootrealms_2.png", color:"#133f22", lore:"Twisted roots block your path... corrupted life pulses here." }
  ], unlockedAt:25000 }
];

// ====== CANVAS & STATE ======
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

let gameState = "title"; // title -> charselect -> levelselect -> playing -> gameover
let charIdx = 0, levelIdx = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let currentScore = 0;

// Gameplay objects
let player = null;
let enemies = [];
let keys = {};
let verticalScrollY = 0;
let currentSceneIdx = 0;
let sceneTransition = false;
let attackCooldown = 0;

// Controls mapping
const KEYMAP = {
  left:['ArrowLeft','a','A'],
  right:['ArrowRight','d','D'],
  up:['ArrowUp','w','W'],
  down:['ArrowDown','s','S'],
  jump:[' '], // spacebar
  attack:['j','J'],
}

// ====== DRAW HELPERS ======
function drawButton(x,y,w,h,text,isActive){
  ctx.save();
  ctx.globalAlpha = isActive ? 1 : .5;
  ctx.fillStyle = isActive ? "#ff9200" : "#555";
  ctx.fillRect(x,y,w,h);
  ctx.strokeStyle="#fff";
  ctx.lineWidth=2;
  ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";
  ctx.font="bold 22px Segoe UI";
  ctx.textAlign="center";ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);
  ctx.restore();
}

// ====== UTILS ======
function clamp(x,a,b){ return Math.max(a,Math.min(x,b)); }

// ====== SCREENS ======
function drawTitle() {
  ctx.fillStyle="#191723";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  // Animated SolForge
  ctx.save();
  let t=Date.now()/800;
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#9d2cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();

  ctx.font="bold 46px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.font="bold italic 36px Segoe UI";
  ctx.fillStyle="#fff";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160);
  ctx.shadowBlur=0;

  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

  let blink=(Math.floor(Date.now()/500)%2)==0;
  if(blink){
      ctx.font="bold italic 28px Segoe UI";
      ctx.fillStyle="#fff";
      ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }
}

function drawCharSelect() {
  ctx.fillStyle="#262335";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing=110,x0=canvas.width/2-(CHARACTERS.length-1)*spacing/2;

  for(let i=0;i<CHARACTERS.length;++i){
    let x=x0+i*spacing,y=200,r=48;
    let isUnlocked = highScore >= CHARACTERS[i].unlockedAt;
    // Portrait
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.12;
    ctx.strokeStyle="#fff";ctx.lineWidth=(i==charIdx)?7:3;ctx.stroke();

    // Faction color
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();
    ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    // Char initial
    ctx.globalAlpha=isUnlocked?1:.38;ctx.font="bold italic 38px Segoe UI";
    ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);

    // Info
    if(i==charIdx){
      if(!isUnlocked){
        ctx.font="italic bold 18px Segoe UI";ctx.fillStyle="#ffb347";
        ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt+" pts",x,y+r+44);
      } else {
        ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
        ctx.fillText(CHARACTERS[i].name,x,y+r+44);
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
      }
    }
    ctx.restore();
  }
}

function drawLevelSelect() {
  ctx.fillStyle="#232e35";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";
  ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Select Level",canvas.width/2,64);

  let spacing=70,y0=140;

  for(let i=0;i<LEVELS.length;++i){
    let y=y0+i*spacing,x=canvas.width/2-120,w=240,h=52;
    let isUnlocked = highScore >= LEVELS[i].unlockedAt;

    // BG box
    ctx.save();ctx.globalAlpha=isUnlocked?1:.25;
    ctx.strokeStyle=isUnlocked?"#f7e17c":"#555";ctx.lineWidth=(i==levelIdx)?4:2;
    ctx.strokeRect(x,y,w,h);

    // Preview BG color block for demo
    if(isUnlocked){
      ctx.fillStyle=LEVELS[i].scenes[0].color || "#222";
      ctx.globalAlpha=.13;ctx.fillRect(x,y,w,h);
    }

    // Level name
    ctx.font="bold italic 26px Segoe UI";ctx.textAlign="left";ctx.globalAlpha=isUnlocked?1:.4;
    ctx.fillStyle=isUnlocked?"#fff":"#888";
    ctx.fillText(LEVELS[i].name,x+18,y+33);

    // Lock info
    if(!isUnlocked){
      ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";ctx.globalAlpha=.9;
      ctx.textAlign="center";
      ctx.fillText("Unlocks @ "+LEVELS[i].unlockedAt,x+w/2,y+h+23);
    }

    // Select button if unlocked & selected
    if(isUnlocked && i==levelIdx){
      drawButton(x+w+14,y+6,92,38,"PLAY",true);
    }
    ctx.restore();
  }
}

function drawGameplay() {
   // Scene setup
   let scene = LEVELS[levelIdx].scenes[currentSceneIdx];
   // BG (solid color for demo)
   ctx.fillStyle = scene.color || "#444";
   ctx.fillRect(0,0,canvas.width,canvas.height);

   // Camera scroll (vertical)
   let camY = Math.max(0, player.y - canvas.height/2 + player.h/2);
   verticalScrollY = camY;

   // Draw enemies
   enemies.forEach(e=>{
     let ey = e.y - verticalScrollY;
     if(ey > -40 && ey < canvas.height +40) {
       // Shadow
       ctx.save();
       ctx.beginPath();
       ctx.arc(e.x+e.w/2, ey+e.h/2+e.h*0.4,e.w*0.57,0,Math.PI*2); 
       ctx.closePath();
       ctx.globalAlpha=.08; 
       ctx.fillStyle="#000"; 
       ctx.fill(); 
       // Main body
       ctx.globalAlpha=1;
       ctx.fillStyle=e.color||"#b93c59"; 
       ctx.beginPath(); 
       ctx.arc(e.x+e.w/2, ey+e.h/2,e.w/2-3,0,Math.PI*2); 
       ctx.closePath(); 
       ctx.fill();
       // Eye
       if(e.hp>0){
         ctx.beginPath(); 
         ctx.arc(e.x+e.w/2+6*Math.sin(Date.now()/300), ey+e.h/2-6*Math.cos(Date.now()/400),6+e.w*0.01*Math.sin(Date.now()/800),0,Math.PI*2); 
         ctx.closePath(); 
         ctx.fillStyle="#fff"; 
         ctx.globalAlpha=.8; 
         ctx.fill();
       }
       if(e.damagedTimer>0){
         // Damage effect
         ctx.strokeStyle="#fff";ctx.lineWidth=4;ctx.globalAlpha=.7;
         ctx.beginPath();ctx.arc(e.x+e.w/2,ey+e.h/2,e.w/2-5,0,Math.PI*2);ctx.stroke();
         ctx.globalAlpha=1;
       }
       ctx.restore();
     }
   });

   // Draw player
   let px = player.x;
   let py = player.y - verticalScrollY;
   // Shadow
   ctx.save();
   ctx.beginPath();ctx.arc(px+player.w/2,py+player.h*0.95,(player.w/2)*1.01,0,Math.PI*2);ctx.globalAlpha=.09;ctx.fillStyle="#000";ctx.fill();
   // Main body
   if(player.hp>0){
     // Flash on damage
     if(player.damagedTimer>0 && Math.floor(player.damagedTimer/60*10)%2 ==1){
        ctx.globalAlpha=.4;
     }
     // Color body
     ctx.beginPath();ctx.arc(px+player.w/2,py+player.h/2,(player.w/2)-3+(player.isAttacking?4:0),0,Math.PI*2);ctx.closePath();
     ctx.fillStyle=player.col;ctx.globalAlpha*=player.isAttacking?.93 :1;ctx.fill();
     // Faction stripe
     if(player.isAttacking){
        ctx.save();ctx.translate(px+player.w/2,py+player.h/2);
        for(let i=0;i<6;i++){
          let a=i*Math.PI/3 + Date.now()/200;
          let r=(player.w/2)+7*Math.abs(Math.sin(Date.now()/180));
          let x=Math.cos(a)*r,y=Math.sin(a)*r;
          ctx.beginPath();ctx.arc(x,y,r*.13,.6*Math.PI,-.6*Math.PI);ctx.strokeStyle="#fff8";ctx.lineWidth=3;ctx.stroke();
        }
        ctx.restore();
     }
     // Eyes
     if(player.hp>0){
       let dx = player.facingRight?10:-10;
       for(let k=-1;k<=1;k+=2){
         let ex=px+player.w/2+k*dx*.7;
         let ey=py+player.h/2-10;
         ctx.beginPath();ctx.arc(ex,ey,.09*player.w+.5*Math.abs(Math.sin(Date.now()/300)),0,Math.PI*2);ctx.closePath();ctx.globalAlpha=.7;ctx.fillStyle="#fff";ctx.fill();
       }
     }
   }
   // Health bar (top left)
   let maxw=160,hbarw=Math.max(30,maxw*player.hp/player.maxHp);
   let hbary=22;
   drawBar(28,hbary,hbarw,maxw,"#18d860","#c33","#fff","HP",player.hp+"/"+player.maxHp);

   // Score
   let scText = "SCORE "+currentScore.toLocaleString()+" / HIGH "+highScore.toLocaleString();
   drawTextBar(canvas.width/2-160,hbary+7,"#ffb347","#232","#fff",scText);

   // Combo display (if any)
   if(player.combo>1 && player.comboTimer>0){
     let txt = "COMBO x"+player.combo+"!";
     drawTextBar(canvas.width-250,hbary,"#bc3cff","#232","#fff",txt);
   }

   // Lore notification for new scene
   if(scene.lore && scene.loreShowT>0){
     drawLorePopup(scene.lore);
     scene.loreShowT--;
   }

   // Scene transition effect (fade)
   if(sceneTransition){
      let t = sceneTransitionTimer / sceneTransitionMax;
      t = Math.min(t,.99);
      ctx.save();
      ctx.globalAlpha=t;
      ctx.fillStyle="#000";
      ctx.fillRect(0,0,canvas.width,canvas.height);
      if(t>.93){
        // Loading next scene...
        drawCenteredText("Descending to next area...",canvas.width/2,
            canvas.height/2,"#fff","bold italic "+(38+t*30)+"px Segoe UI");
      }
      ctx.restore();
   }
}
function drawBar(x,y,vw,maxw,colBg,colFill,colBorder,label,valtxt){
   // Background
   ctx.save();
   let h=22,r=12;
   // BG rect
   roundRect(ctx,x,y,maxw,h,r,colBg,true,colBorder,.9,true);
   // HP fill
   roundRect(ctx,x,y,vw,h,r,colFill,true,null,null,false);
   // Texts
   if(label){
     drawCenteredText(label,x+maxw*.13,y+h*.53,"#fff","bold italic "+(h*.77)+"px Segoe UI");
     drawCenteredText(valtxt,x+maxw*.65,y+h*.58,"#f7e17c","18px Segoe UI");
   }
   ctx.restore();
}
function drawCenteredText(txt,x,y,col,font){
   if(font)ctx.font=font;
   else{ctx.font="20px Segoe UI";}
   ctx.textAlign="center";ctx.textBaseline="middle";ctx.fillStyle=col||"#fff";
   ctx.shadowColor="#000b";ctx.shadowBlur=8;ctx.fillText(txt,x,y);ctx.shadowBlur=0;
}
function roundRect(ctx,x,y,w,h,r,colFill,isFill,colStroke,aStroke,isStroke){
   if(r>Math.min(w,h)/1.5)r=Math.min(w,h)/1.5;
   aStroke=aStroke||1.0;if(!isStroke)isStroke=true;if(!isFill)isFill=true;
   if(isFill){ctx.save();if(colFill)ctx.fillStyle=colFill;else colFill="#fff";
     if(typeof aStroke==="number")ctx.globalAlpha=aStroke;else aStroke=.97;}
   // Path
   let path=new Path2D();
   path.moveTo(x+r,y);path.lineTo(x+w-r,y);path.quadraticCurveTo(x+w,y,x+w,y+r);
   path.lineTo(x+w,y+h-r);path.quadraticCurveTo(x+w,y+h,x+w-r,y+h);
   path.lineTo(x+r,y+h);path.quadraticCurveTo(x,y+h,x,y+h-r);
   path.lineTo(x,y+r);path.quadraticCurveTo(x,y,x+r,y);
   if(isFill){ctx.fill(path);}
   if(isStroke && colStroke){ctx.save();ctx.strokeStyle=colStroke;ctx.lineWidth=3;ctx.globalAlpha=.97;ctx.stroke(path);ctx.restore();}
}
function drawTextBar(x,y,bgCol,bordCol,textCol,text){
   roundRect(ctx,x-12,y-7,text.length*15+.5*text.length+26,28,
             Math.min(19,text.length*1.8),bgCol,true,bordCol,.25,true);
   drawCenteredText(text,x+(text.length*14)+12,y+10,textCol,"bold italic "+22+"px Segoe UI");
}
function drawLorePopup(text){
    roundRect(ctx,
        canvas.width/2-220,
        canvas.height-145,
        Math.min(440,text.length*11),
        Math.max(70,text.split(' ').length*17),
        Math.min(30,text.length), "#292843", true,"#bc3cff");
    drawCenteredText(text,
        canvas.width/2,
        canvas.height-110,
        "#fff",
        "italic bold "+(20+(text.length>80? -3 : +4))+"px Segoe UI"
    );
}

// ===== GAME LOOP & LOGIC =====

function resetGameplay(){
    const c = CHARACTERS[charIdx];
    player={
      x:canvas.width/2-21,
      y:40,
      vx:0,
      vy:0,
      w:42,
      h:68,
      col:c.color,
      isAttacking:false,
      attackTimer:0,
      onGround:true,
      facingRight:true,
      maxHp:c.hp,
      hp:c.hp,
      speed:c.speed,
      atkPower:c.atk,
      combo:1,
      comboTimer:0,
      damagedTimer:0
    };
    currentScore = 0; // Ensure score is always zero on new run!
    enemies=[];
    verticalScrollY = 0;
    currentSceneIdx = 0;
    spawnEnemiesForScene(currentSceneIdx);
}
function spawnEnemiesForScene(sceneIdx){
    enemies=[];
    let n = Math.ceil(4 + sceneIdx * .8 + Math.random()*3);
    for(let i=0;i<n;i++){
        const ex=Math.random()*(canvas.width-100)+50;
        const ey=(sceneIdx*700)+Math.random()*350+210;
        enemies.push({
            x:ex,
            y:ey,
            w:44,
            h:52,
            vx:(Math.random()<.5?-1:+1)*(.7+.4*Math.random()),
            vy:.03*(Math.random()-.5),
            hp:20+(sceneIdx*6)+Math.floor(Math.random()*8),
            maxHp:24+(sceneIdx*8),
            color:"#b93c59",
            damagedTimer:0
        });
    }
}
// Input logic for beat em up controls
function updateGameplayInput(){
    player.vx=0;
    const lpressed = KEYMAP.left.some(k=>!!keys[k]);
    const rpressed = KEYMAP.right.some(k=>!!keys[k]);
    const jumpPressed = KEYMAP.jump.some(k=>!!keys[k]);
    let moved=false;

    if(lpressed){ player.vx=-player.speed;moved=true;player.facingRight=false;}
    if(rpressed){ player.vx=player.speed;moved=true;player.facingRight=true;}
    
    if(jumpPressed && player.onGround && !player.jumpLock){
        player.vy=-11-(player.speed*.35);player.onGround=false;player.jumpLock=true;
        setTimeout(()=>{player.jumpLock=false},360);
    }

    const attackPressed = KEYMAP.attack.some(k=>!!keys[k]);
    if(attackPressed && !player.isAttacking && attackCooldown<=0){
        player.isAttacking=true;
        player.attackTimer=18+(Math.round(player.speed));
        attackCooldown=15-Math.round(player.speed*.7); // faster chars can spam more!
        setTimeout(()=>{player.isAttacking=false},player.attackTimer*12);
        setTimeout(()=>{attackCooldown=0},attackCooldown*11);
        checkPlayerAttackHitsEnemy();
    }
}
// Move physics & collisions (vertical beat em up)
function updatePhysics(){
    player.x+=player.vx;
    player.x=clamp(player.x,-10,canvas.width-player.w+10);

    player.vy+=.75; // gravity
    player.y+=player.vy;

    if(player.y > ((currentSceneIdx)*700)+canvas.height-80-player.h){
        player.y=((currentSceneIdx)*700)+canvas.height-80-player.h;
        player.vy=0;player.onGround=true;
    } else { player.onGround=false;}

    if(player.y < ((currentSceneIdx)*700)+30){ player.y=((currentSceneIdx)*700)+30; player.vy=Math.abs(player.vy)*.33;}

    // Combo timer
    if(player.comboTimer>0){ player.comboTimer--; } else { player.combo=1;}

}
function checkPlayerAttackHitsEnemy(){
     enemies.forEach(e=>{
         if(e.hp>0 && Math.abs(e.x-player.x)<40 && Math.abs(e.y-player.y)<50){
             e.hp-=Math.ceil(player.atkPower*(1+.15*(player.combo)));
             e.damagedTimer=16; 
             addScore(100*player.combo); 
             player.combo+=1;if(player.combo>6)player.combo=6; player.comboTimer=48+(player.combo)*10;
             if(e.hp<=0) addScore(200*player.combo);
         }
     });
}
function addScore(val){
     currentScore+=val||100;if(currentScore>highScore){ highScore=currentScore; localStorage.setItem("forgeborn_highscore",""+highScore);}
}
function updateEnemies(){
     enemies.forEach(e=>{
         e.x+=e.vx*(.7+.23*Math.sin(Date.now()/470));
         if(e.x<22 || e.x>canvas.width-e.w-22) e.vx=-e.vx*.96+.09*(Math.random()-.5);
         e.damagedTimer=Math.max(0,e.damagedTimer-1);

         // Move toward player a bit
         if(Math.abs(player.y-e.y)<120 && e.hp>0){
           e.x+=((player.x-e.x)/180)*(Math.random()+.4)*(e.hp>9?1:.51);
         }
         // Touch damage (if not dead)
         const pdistY=Math.abs(player.y-e.y), pdistX=Math.abs(player.x-e.x);
         if(pdistX<27 && pdistY<34 && e.hp>3 && player.damagedTimer<=1 && !sceneTransition){
             player.hp-=5+(currentSceneIdx*1);player.damagedTimer=23;e.vx=-e.vx*.7+(Math.random()-.49)*1.7; 
             if(player.hp<=0) setTimeout(()=>{gameState="gameover"},500);
         }
     });
     enemies=enemies.filter(e=>e.hp>0 || e.damagedTimer>5 || Math.random()>.08); // fade out dead ones soonish!
}

// Scene transitions & progression
let sceneTransitionTimer=0;
let sceneTransitionMax=36;

function checkSceneProgression(){
     // If all enemies dead & at bottom of scene...
     const bottomY=((currentSceneIdx)*700)+canvas.height-80-player.h;
     const allDead=enemies.every(e=>e.hp<=0), atBottom=(Math.abs(player.y-bottomY)<24);

     if(allDead && atBottom && !sceneTransition && currentSceneIdx<LEVELS[levelIdx].scenes.length-1){
         sceneTransition=true;sceneTransitionTimer=sceneTransitionMax;

         setTimeout(()=>{
             currentSceneIdx++;
             spawnEnemiesForScene(currentSceneIdx);
             sceneTransition=false;
             LEVELS[levelIdx].scenes[currentSceneIdx].loreShowT=90; // Show lore for new area!
             player.y=(currentSceneIdx)*700 +40; 
             verticalScrollY=(currentSceneIdx)*700 -30;
         },sceneTransitionMax*21 +430); 
     }
}

// Main game update loop
function updateGame(){
 if(gameState==="playing"){
     updateGameplayInput();
     updatePhysics();
     updateEnemies();
     checkSceneProgression();

     // Damage timer etc.
     if(player.damagedTimer>0) player.damagedTimer--;
 }
}

// Main render loop
function render(){
 switch(gameState){
 case "title":drawTitle();break;
 case "charselect":drawCharSelect();break;
 case "levelselect":drawLevelSelect();break;
 case "playing":drawGameplay();break;
 case "gameover":
     drawGameplay();
     drawCenteredText("GAME OVER!",canvas.width/2,canvas.height/2-26,"#ff5555","bold italic 46px Segoe UI");
     drawCenteredText("Final Score "+currentScore.toLocaleString(),canvas.width/2,canvas.height/2+14,"#fff","bold italic 30px Segoe UI");
     drawCenteredText("[ Press any key to return to Title ]",canvas.width/2,canvas.height/2+62,"#f7e17c","italic bold 24px Segoe UI");
 break;
 }
 requestAnimationFrame(render);
}

// Keyboard handling (for movement)
window.addEventListener('keydown',e=>{
 keys[e.key]=true;

 switch(gameState){
 case "title": gameState="charselect"; break;

 case "charselect":
     if(KEYMAP.left.includes(e.key)){ charIdx=(charIdx+CHARACTERS.length-1)%CHARACTERS.length;}
     else if(KEYMAP.right.includes(e.key)){ charIdx=(charIdx+1)%CHARACTERS.length;}
     else if(e.key==="Enter"||e.key===" "||e.key==="j"||e.key==="J"){
         if(highScore>=CHARACTERS[charIdx].unlockedAt){ gameState="levelselect";}
     } break;

 case "levelselect":
     if(["ArrowUp","w","W"].includes(e.key)){ levelIdx=(levelIdx+LEVELS.length-1)%LEVELS.length;}
     else if(["ArrowDown","s","S"].includes(e.key)){ levelIdx=(levelIdx+1)%LEVELS.length;}
     else if(["Enter"," ","j","J"].includes(e.key)){
         if(highScore>=LEVELS[levelIdx].unlockedAt){ 
            resetGameplay(); 
            gameState="playing"; 
            LEVELS[levelIdx].scenes[0].loreShowT=90;
         }
     } break;

 case "gameover":
     gameState="title";
 break;

 default:
 break;}
});
window.addEventListener('keyup',e=>{ keys[e.key]=false; });

// Responsive sizing (optional)
window.addEventListener('resize',()=>{
 canvas.width=Math.min(window.innerWidth-10||800,900);
 canvas.height=Math.min(window.innerHeight-10||600,740);
});
canvas.width=Math.min(window.innerWidth-10||800,900);
canvas.height=Math.min(window.innerHeight-10||600,740);

// Start loop!
requestAnimationFrame(render);
// Game update interval
setInterval(updateGame,1000/60);

</script>
</body>
</html>