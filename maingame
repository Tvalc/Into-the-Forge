<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>FORGEBORN: SOLSTICE BREAK</title>
  <meta name="viewport" content="width=800, initial-scale=1.0">
  <style>
    html,body { margin:0; padding:0; background:#18121a; }
    body { font-family: 'Segoe UI', Arial, sans-serif; overflow:hidden; }
    #gameContainer { width:100vw; height:100vh; display:flex; justify-content:center; align-items:center; }
    canvas { display:block; background:#18121a; box-shadow:0 0 32px #222; }
    @media (max-width:900px) {
      #gameCanvas { width:100vw !important; height:auto !important; }
    }
  </style>
</head>
<body>
<div id="gameContainer">
  <canvas id="gameCanvas" width="800" height="600"></canvas>
</div>
<script>
// =================== CONSTANTS & DATA ===================
const CHARACTERS = [
  {
    name: "Korok",
    faction: "Tempys",
    unlockedAt: 0,
    color: "#ff7200",
    desc: "Tank with area control",
    hp: 140,
    atk: 17,
    spd: 4,
    abilities: ["Ground Slam","Stone Armor"]
  }
];
const LEVELS = [
  {
    name: "Frozen Wastes",
    unlockedAt: 0,
    scenes: [
      { name:"Frozen Wastes 1", color:"#28405a" }
      // More scenes can be added for future expansion
    ]
  }
];
const ENEMY_TYPES = [
  {
    name: "Frostling",
    color: "#5ec6ff",
    hp: 30,
    atk: 8,
    spd: 2.5,
    reward: 100
  }
];
const comboTiers = [
  { hits:5, mult:1.5 },
  { hits:10, mult:2 },
  { hits:15, mult:2.5 },
  { hits:20, mult:3 },
  { hits:30, mult:4 }
];

// =================== STATE ===================
let state = "title"; // title,charselect,playing,gameover
let selectedChar = 0;
let highScore = Number(localStorage.getItem("forgeborn_highscore")||"0");
let score = 0;
let combo = 0;
let comboTimer = 0;
let comboMult = 1;
let sceneY = 0;
let player = null;
let enemies = [];
let keys = {};
let gameOverReason = "";
let damageFlash = 0;

// === CANVAS SETUP ===
let canvas = document.getElementById('gameCanvas');
let ctx = canvas.getContext('2d');

// === INPUT HANDLING ===
window.addEventListener('keydown', e => {
  keys[e.key] = true;
});
window.addEventListener('keyup', e => {
  keys[e.key] = false;
});

// =================== MAIN GAME LOOP ===================
function mainLoop() {
  ctx.clearRect(0,0,canvas.width,canvas.height);
  switch(state) {
    case "title": drawTitle(); break;
    case "charselect": drawCharSelect(); break;
    case "playing": drawGame(); break;
    case "gameover": drawGameOver(); break;
  }
  requestAnimationFrame(mainLoop);
}
mainLoop();

// =================== SCREENS ===================
function drawTitle() {
  // BG gradient
  let grad=ctx.createLinearGradient(0,0,0,canvas.height);
  grad.addColorStop(0,"#191723"); grad.addColorStop(1,"#502a11");
  ctx.fillStyle=grad; ctx.fillRect(0,0,canvas.width,canvas.height);

  // Animated Solforge Tower
  let t=Date.now()/800;
  ctx.save();
  ctx.translate(canvas.width/2,canvas.height/2-90 + Math.sin(t)*8);
  ctx.fillStyle="#aaa";ctx.fillRect(-32,-160,64,220);
  ctx.strokeStyle="#ffb347";ctx.lineWidth=6;
  ctx.beginPath();ctx.arc(0,-160,32,Math.PI*2,false);ctx.stroke();
  // Corruption effect
  ctx.globalAlpha=0.18+Math.abs(Math.sin(t*1.3))*0.12;
  ctx.fillStyle="#bc3cff";ctx.beginPath();
  ctx.arc(18,-140+Math.cos(t)*16,16+Math.sin(t*1.9)*4,0,Math.PI*2);ctx.fill();
  ctx.globalAlpha=1;ctx.restore();

  // Title text
  ctx.fillStyle="#ffb347"; ctx.font="bold 46px Segoe UI"; ctx.textAlign="center";
  ctx.shadowColor="#602f07";ctx.shadowBlur=14;
  ctx.fillText("FORGEBORN:",canvas.width/2,110);
  ctx.fillStyle="#fff"; ctx.font="bold italic 36px Segoe UI";
  ctx.shadowBlur=8;ctx.shadowColor="#bc3cff";
  ctx.fillText("SOLSTICE BREAK",canvas.width/2,160); ctx.shadowBlur=0;

  // High Score
  ctx.font="bold 26px Segoe UI";ctx.fillStyle="#f7e17c";
  ctx.fillText("High Score: "+highScore.toLocaleString(),canvas.width/2,260);

  // Prompt
  if(Math.floor(Date.now()/500)%2===0) {
    ctx.font="bold italic 28px Segoe UI";ctx.fillStyle="#fff";
    ctx.fillText("[ Press Any Button to Start ]",canvas.width/2,340);
  }

  if(Object.values(keys).some(v=>v)) {
    state="charselect";
    keys={};
  }
}

function drawCharSelect() {
  ctx.fillStyle="#262335";ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font="bold 34px Segoe UI";ctx.fillStyle="#ffb347";
  ctx.textAlign="center";
  ctx.fillText("Choose Your Forgeborn",canvas.width/2,64);

  let spacing = 120;
  let x0 = canvas.width/2 - ((CHARACTERS.length-1)*spacing)/2;
  
  for(let i=0;i<CHARACTERS.length;++i) {
    let x=x0+i*spacing,y=220,r=48,isUnlocked=highScore>=CHARACTERS[i].unlockedAt;
    ctx.save();
    ctx.beginPath();ctx.arc(x,y,r+8,0,Math.PI*2);ctx.closePath();
    ctx.globalAlpha=isUnlocked?1:.15;ctx.strokeStyle="#fff";ctx.lineWidth=i===selectedChar?7:3;ctx.stroke();
    ctx.beginPath();ctx.arc(x,y,r,0,Math.PI*2);ctx.closePath();ctx.fillStyle=CHARACTERS[i].color;ctx.globalAlpha=isUnlocked?.85:.19;ctx.fill();
    if(!isUnlocked){ctx.globalAlpha=.5;ctx.fillStyle="#222";ctx.beginPath();ctx.arc(x,y,r-4,0,Math.PI*2);ctx.closePath();ctx.fill();}
    ctx.globalAlpha=1;ctx.font="bold italic 38px Segoe UI";ctx.fillStyle="#fff";ctx.textAlign="center";
    ctx.fillText(CHARACTERS[i].name[0],x,y+7);
    if(i===selectedChar) {
      ctx.font="italic bold 20px Segoe UI";ctx.fillStyle="#fff";
      ctx.fillText(CHARACTERS[i].name+" ("+CHARACTERS[i].faction+")",x,y+r+44);
      if(isUnlocked){
        drawButton(x-48,y+r+56,96,36,"SELECT",true);
        if(keys["Enter"]||keys[" "]) {
          state="playing";
          startGame();
          keys["Enter"]=keys[" "]=false;
        }
      } else {
        ctx.font="16px Segoe UI";ctx.fillStyle="#ffb347";
        ctx.fillText("Unlocks @ "+CHARACTERS[i].unlockedAt,x,y+r+24);
      }
      ctx.font="16px Segoe UI";ctx.fillStyle="#aaa";
      ctx.fillText(CHARACTERS[i].desc,x,y+r+80);
    }
    // Navigation
    if(keys["ArrowLeft"]&&i===selectedChar&&i>0){selectedChar--;keys["ArrowLeft"]=false;}
    if(keys["ArrowRight"]&&i===selectedChar&&i<CHARACTERS.length-1){selectedChar++;keys["ArrowRight"]=false;}
    ctx.restore();
  }
}

function drawButton(x,y,w,h,text,isActive){
  ctx.save();ctx.globalAlpha=isActive?1:.5;
  ctx.fillStyle=isActive?"#ff9200":"#555";
  ctx.fillRect(x,y,w,h);ctx.strokeStyle="#fff";ctx.lineWidth=2;ctx.strokeRect(x,y,w,h);
  ctx.fillStyle="#fff";ctx.font="bold 22px Segoe UI";
  ctx.textAlign="center";ctx.textBaseline="middle";
  ctx.fillText(text,x+w/2,y+h/2);ctx.restore();
}

// =================== GAMEPLAY ===================
function startGame() {
   // Reset all necessary state for a new run
   let c=CHARACTERS[selectedChar];
   player = {
     x:canvas.width/2,
     y:100,
     vx:0,
     vy:0,
     w:40,h:64,
     color:c.color,
     hp:c.hp,
     maxhp:c.hp,
     atk:c.atk,
     spd:c.spd,
     onGround:false,
     attacking:false,
     attackTimer:0,
     facingRight:true
   };
   score = combo = comboMult = sceneY = comboTimer = damageFlash = gameOverReason = 0;
   enemies = [];
   spawnEnemyWave();
}
function spawnEnemyWave() {
   // Spawn some basic enemies ahead of player in the vertical descent
   for(let i=0;i<4;i++) {
     let etype=ENEMY_TYPES[0];
     enemies.push({
       type:"Frostling",
       x:Math.random()*(canvas.width-80)+40,
       y:sceneY+250+Math.random()*220,
       w:36,h:54,
       color:etype.color,
       hp:etype.hp,
       maxhp:etype.hp,
       atk:etype.atk,
       spd:etype.spd,
       vx:(Math.random()<.5?-1:1)*etype.spd*.7,
       vy:etype.spd*.7,
       alive:true
     });
   }
}

function drawGame() {
   // BG
   let scene=LEVELS[0].scenes[0];
   ctx.fillStyle=scene.color||"#222";ctx.fillRect(0,0,canvas.width,canvas.height);

   // Scene snow/ice particles (simple)
   for(let i=0;i<40;i++){
     let px=(i*81+(sceneY*3)%800)%800;
     let py=((i*133)+(sceneY*5)%600)%600;
     ctx.globalAlpha=.11+(i%4)*.07;
     ctx.beginPath();ctx.arc(px,py+sceneY%600,6+(i%4),0,Math.PI*2);ctx.fillStyle="#e9fbff";ctx.fill();
   }
   ctx.globalAlpha=1;

   // Enemies
   for(let e of enemies){
     if(!e.alive) continue;
     // Move enemy
     e.x+=e.vx;
     if(e.x<32||e.x>canvas.width-32) e.vx*=-1;
     e.y+=e.vy*0.35;
     // Draw enemy
     ctx.save();
     ctx.beginPath();ctx.arc(e.x,e.y-e.h/3,e.w/1.3,Math.PI,.02*Math.PI,false);ctx.closePath();
     ctx.shadowColor=e.color;ctx.shadowBlur=18;
     ctx.fillStyle=e.color;ctx.globalAlpha=.9;ctx.fill();ctx.shadowBlur=0;ctx.restore();
     // Face/eyes
     ctx.beginPath();ctx.arc(e.x-10,e.y-e.h/2+10,4,0,Math.PI*2);ctx.arc(e.x+10,e.y-e.h/2+10,4,0,Math.PI*2);
     ctx.globalAlpha=.4;ctx.fillStyle="#222";ctx.fill();
     // HP bar
     let hpfrac=e.hp/e.maxhp;
     if(hpfrac<1){
       ctx.globalAlpha=.7;
       ctx.fillStyle="#222";ctx.fillRect(e.x-18,e.y-e.h-13,36,7);
       ctx.globalAlpha=1;ctx.fillStyle="#5ec6ff";ctx.fillRect(e.x-18,e.y-e.h-13,36*hpfrac,7);
     }
   }

   // Player controls (simple platformer style)
   handlePlayerControl();

   // Player sprite (Korok)
   let pf=player.facingRight?1:-1;
   if(damageFlash>0){damageFlash--;if(damageFlash%4<2) pf=-pf;}
   ctx.save();
   ctx.translate(player.x,player.y);
   ctx.scale(pf,1);
   // Body
   ctx.shadowColor=player.color;ctx.shadowBlur=18;
   ctx.beginPath();ctx.ellipse(0,10,player.w/2.2,player.h/2.1,0,0,Math.PI*2);ctx.closePath();
   ctx.globalAlpha=.97;ctx.fillStyle=player.color;ctx.fill();ctx.shadowBlur=0;
   // Head
   ctx.beginPath();ctx.arc(0,-player.h/2+10,player.w/2.4,0,Math.PI*2);ctx.closePath();
   ctx.globalAlpha=1;ctx.fillStyle="#ffe7bd";ctx.fill();
   // Eyes/brow (simple angry)
   ctx.beginPath();ctx.arc(-8,-player.h/2+7.5,3.3,.55*Math.PI,.95*Math.PI,true);
   ctx.arc(8,-player.h/2+7.5,3.3,.05*Math.PI,.45*Math.PI,true);
   ctx.lineWidth=2;ctx.strokeStyle="#222";ctx.stroke();
   // Weapon (hammer)
   if(player.attacking) {
      ctx.save();
      let swingA=Math.sin(player.attackTimer/8)*1.6-.6;
      ctx.rotate(swingA);
      drawHammer(18,-12);
      ctx.restore();
   } else drawHammer(18,-12);
   // Arms
   let ax=Math.sin(Date.now()/150)*5;
   ctx.beginPath();ctx.arc(-player.w/2+12+ax,-player.h/6+30,10,.22*Math.PI,.85*Math.PI,false);
   ctx.lineWidth=12;ctx.strokeStyle=player.color;ctx.globalAlpha=.75;ctx.stroke();
   ctx.restore();

   // HUD - Top bar (score/combo/hp)
   drawHUD();

   // Combo timer display (pop-up)
   if(combo>1 && comboTimer>0){
      let yoff=Math.max(25-comboTimer*4,-25);
      let multStr=(comboMult>1?"x"+comboMult.toFixed(1):"");
      let label=(combo>=30?"Annihilation!":combo>=20?"Rampage!":combo>=15?"Crush!":combo>=10?"Combo!":"");
      let ccol=(combo>=20?"#bc3cff":combo>=10?"#18d860":"#ffb347");
      if(label){
        ctx.font="bold italic 38px Segoe UI";
        ctx.textAlign="center";
        ctx.globalAlpha=.95-(25-comboTimer)/60;
        ctx.strokeStyle="#222";ctx.lineWidth=6;ctx.strokeText(label+" "+multStr+"",canvas.width/2-40-yoff,75-yoff);
        ctx.globalAlpha=1;
        ctx.fillStyle=ccol;ctx.fillText(label+" "+multStr+"",canvas.width/2-40-yoff,75-yoff);
      }
   }

   // End condition (if health <=0)
   if(player.hp<=0) endGame("You were defeated!");
}

function handlePlayerControl(){
   // Gravity & vertical movement
   player.vy += .58;
   player.y += player.vy;

   // Horizontal movement & input
   let moveX = (keys["ArrowLeft"]?-1:0)+(keys["ArrowRight"]?1:0);
   player.vx+=(moveX)*player.spd*0.22 - player.vx*0.23;
   player.x+=player.vx;

   if(player.x<24) player.x=24;if(player.x>canvas.width-24) player.x=canvas.width-24;

   // Landing ground check (simple scene bottom ~550)
   if(player.y>550){
     player.y=550;player.vy=0;player.onGround=true;
   } else player.onGround=false;

   // Jumping
   if(keys["ArrowUp"]&&player.onGround){
      player.vy=-10.5; player.onGround=false; keys["ArrowUp"]=false;
   }

   // Attacking (space or Z)
   if((keys[" "]||keys["z"]||keys["Z"])&&!player.attacking){
      player.attacking=true;player.attackTimer=14;
      keys[" "]=keys["z"]=keys["Z"]=false;
      // Attack hit check (circle area in front)
      for(let e of enemies){
        if(!e.alive) continue;
        let dx=e.x-player.x+(player.facingRight?40:-40),dy=e.y-player.y-10;
        if(Math.abs(dx)<58&&Math.abs(dy)<38){
          e.hp-=player.atk+Math.random()*8|0;
          score+=ENEMY_TYPES[0].reward * comboMult |0;
          combo++; comboTimer=25;
          if(e.hp<=0){e.alive=false;}
        }
      }
      comboTimer=25;
      comboMult=getComboMult(combo);
      damageFlash=5;
   }

   // Attack swing duration
   if(player.attacking){
      player.attackTimer--;
      if(player.attackTimer<=0) player.attacking=false;
      else player.facingRight=(moveX>=0);
   }

   // Combo timer decay/break
   if(comboTimer>0) comboTimer--;
   else{if(combo>1)combo=1;}
}

function getComboMult(num){
    let m=1.00;
    for(let tier of comboTiers) if(num>=tier.hits) m=tier.mult;
    return m;
}

function drawHammer(x,y){
    // Simple stylized hammer sprite for Korok
    ctx.save();
    ctx.translate(x,y);
    // Handle
    ctx.beginPath();ctx.moveTo(-4,-12);ctx.lineTo(-4,+32);ctx.lineTo(4,+32);ctx.lineTo(4,-12);ctx.closePath();
    ctx.globalAlpha=.89;ctx.fillStyle="#b88c4a";ctx.fill();
    // Head
    ctx.globalAlpha=.99;ctx.strokeStyle="#fff";
    ctx.beginPath();ctx.moveTo(-15,-14);ctx.lineTo(-15,+6);ctx.lineTo(15,+6);ctx.lineTo(15,-14);ctx.closePath();
    ctx.lineWidth=3;ctx.stroke();
    ctx.fillStyle="#ffd080";ctx.globalAlpha=.92;ctx.fill();
    // Central spike
    ctx.beginPath();ctx.moveTo(-2,+7);ctx.lineTo(2,+7);ctx.lineTo(0,+25);ctx.closePath();
    ctx.globalAlpha=.6;ctx.fillStyle="#fffbe6";ctx.fill();
    // Hammer glow
    for(let i=6;i>1;i--){
        ctx.globalAlpha=.05*i;.25+(i%3)*.08;
        ctx.beginPath();ctx.arc(0,-6,i*7,0,Math.PI*2);ctx.closePath(); 
        ctx.strokeStyle="#ffb347"; 
        ctx.lineWidth=i*.8; 
        ctx.stroke();
    }
    ctx.restore();
}

function drawHUD(){
    // Top bar - Score / Combo / HP / Highscore 
    let barH =36;
    // Background bar
    ctx.globalAlpha=.83; 
    let grad=ctx.createLinearGradient(0,0,canvas.width,barH);
    grad.addColorStop(0,"#18121a");grad.addColorStop(.45,"#252c39");grad.addColorStop(1,"#18121a");
    ctx.fillStyle=grad; 
    ctx.fillRect(8,8,canvas.width-16,barH);

    // Score 
    ctx.font="bold italic 26px Segoe UI"; 
    ctx.textAlign="left";
    ctx.shadowColor="#fff";
    ctx.shadowBlur=3;
    ctx.fillStyle="#ffb347";
    ctx.fillText("Score "+score.toLocaleString(),24,34);

    // Combo & Multiplier 
    let ccol=(combo>=20?"#bc3cff":combo>=10?"#18d860":"#ffb347");
    if(combo>1){
      let mult=getComboMult(combo);
      let label=(combo>=30?"Annihilation!":combo>=20?"Rampage!":combo>=15?"Crush!":combo>=10?"Combo!":"");
      let ttxt=`${label} x${mult.toFixed(1)}`;
      ctx.font="bold italic "+(label.length>8?22:26)+"px Segoe UI";
      ctx.textAlign="center";
      ctx.shadowColor="#000";
      ctx.shadowBlur=4;
      ctx.globalAlpha=.95-(25-comboTimer)/60;
      ctx.fillStyle=ccol;
      ctx.fillText(ttxt+" ("+combo+")",canvas.width/2-30,34);
      ctx.shadowBlur=0;
      ctx.globalAlpha=1;
    }

    // High Score 
    let hsx=(canvas.width-24-(score>highScore?70:130));
    let hstxt=(score>highScore?"NEW ":"")+"High "+highScore.toLocaleString();
    if(score>highScore) hstxt+="!";
    else hstxt+=" ";
    
    ctx.font="bold italic 22px Segoe UI";
    ctx.textAlign="right";
    ctx.shadowColor="#ffeaa7";
    if(score>highScore) 
        { 
          localStorage.setItem("forgeborn_highscore",score);highScore=score;}
    
    ctx.shadowBlur=(score>highScore)?12:3;
    
    let hscol=(score>highScore?"#fffd92":"#f7e17c");
    
    ctx.globalAlpha=.98-(25-comboTimer)/90;.96;
    
    ctx.fillStyle=hscol;

    ctx.fillText(hstxt+"",hsx+80 ,34);

    // Health Bar - bottom left corner
    drawHealthBar(player.hp/player.maxhp);

}

function drawHealthBar(frac){
     let x=24,y=canvas.height-40,w=210,h=26,rcol="#ff7200";
     frac=Math.max(0,Math.min(frac||.001,.999));
     // BG bar
     let gradb=ctx.createLinearGradient(x,y,x+w,y+h);
     gradb.addColorStop(0,"#211c14");gradb.addColorStop(.45,"#281e16");gradb.addColorStop(1,"#322115");
     ctx.globalAlpha=.81; 
     roundRect(ctx,x,y,w,h,h/2,true,false);

     // Health bar
     let gradhp=ctx.createLinearGradient(x,y,x+w*frac,y+h);
     gradhp.addColorStop(0,rcol);gradhp.addColorStop(.8,"#faeabf");gradhp.addColorStop(1,"#be700d");
     roundRect(ctx,x,y,w*frac,h,h/2,true,false);

     // Shine effect
     roundRect(ctx,x+8,y+5,w*frac-16,h-12,(h-12)/2,true,false,"rgba(255,255,255,.13)");

     // Border
     roundRect(ctx,x,y,w,h,h/2,false,true,"#ffd080",3);

     // Label text
     if(player.hp!==undefined){
         let ttxt=`${player.hp|0} / ${player.maxhp|0}`;
         if(player.hp<=20){ttxt+=" (Low!)";}
         else if(player.hp/player.maxhp>.95){ttxt+=" (Healthy)";}
         else if(player.hp/player.maxhp>.6){ttxt+="";}
         else ttxt+=" ";
         ttxt+=" ";
         ttxt+="Forge Energy";
         ttxt+=" ";
         ttxt+=" ";
         ttxt+=" ";
         ttxt+=" ";
         ttxt+=" ";
         ttxt+=" ";
         ttxt+=" ";
         ttxt+=" ";
         ttxt+=" ";
         ttxt+=" ";
         
         let tx=x+w/2 , ty=y+h/2+4 ;
         let col=(player.hp/player.maxhp<.28?"#bc3cff":"#ffeaa7");
         if(player.hp/player.maxhp>.75) col="#ffb347";
         else if(player.hp/player.maxhp>.45) col="#f7e17c";
         else if(player.hp/player.maxhp>.28) col="#bc3cff";
         else col="#bc3cff";

         ctx.font="italic bold "+16+"px Segoe UI";
         ctx.textAlign="center";
         roundRect(ctx,x,y,w,h,h/2,false,true,"rgba(255,255,255,.14)",1.5);

         roundRect(ctx,x,y,w,h,h/2,false,true,col,.9);

         roundRect(ctx,x+6,y+6,(w-12)*frac,h-12,(h-12)/2,false,true,"rgba(255,255,255,.08)",.7);

         roundRect(ctx,x+9,y+9,(w-18)*frac,h-18,(h-18)/2,false,true,"rgba(255,255,255,.09)",.5);

         roundRect(ctx,x+11,y+11,(w-22)*frac,h-22,(h-22)/2,false,true,"rgba(255,255,255,.08)",.3);

         roundRect(ctx,x+13,y+13,(w-26)*frac,h-26,(h-26)/2,false,true,"rgba(255,255,255,.06)",.15);

         roundRect(ctx,x+8,y+4,(w-16)*frac,h-8,(h-8)/2,false,true,col,.13);

         roundRect(ctx,x+12,y+8,(w-24)*frac,h-16,(h-16)/2,false,true,col,.08);

         roundRect(ctx,x+14,y+10,(w-28)*frac,h-20,(h-20)/2,false,true,col,.04);

         roundRect(ctx,x+16,y+12,(w-32)*frac,h-24,(h-24)/2,false,true,col,.02);

         roundRect(ctx,x ,y ,w ,h ,h/2 ,false ,true ,"#fff" , .08 );
         
         roundRect(ctx,x+.3 ,y+.3 ,w-.6 ,h-.6 ,h/2-.3 ,false ,true ,"rgba(255,255,255,.28)" ,.08 );

         roundRect(ctx,x+.7 ,y+.7 ,w-.14 ,h-.14 ,h/2-.7 ,false ,true ,"rgba(255,255,255,.19)" ,.04 );
         
         roundRect(ctx,x+.9 ,y+.9 ,w-.18 ,h-.18 ,h/2-.9 ,false ,true ,"rgba(255,255,255,.09)" ,.04 );

         roundRect(ctx,x+.98 ,y+.98 ,w-.196 ,h-.196 ,h/2-.98 ,false ,true ,"rgba(255,255,255,.05)" ,.04 );


         roundRect(ctx,x + w /4 +11 + Math.sin(Date.now()/200)*3 , y+h/4 +11 + Math.cos(Date.now()/340)*3 ,
           w /4 + Math.cos(Date.now()/90)*6 ,
           h /4 + Math.sin(Date.now()/190)*6 ,
           (h /4 + Math.sin(Date.now()/190)*6 ) /2 ,
           false ,
           true ,
           "#fffbe6" ,
           .09 );



         
         roundRect(ctx,x+w*.11,y+h*.21,w*.79,h*.59,h*.22,false,true,col,.066);

         roundRect(ctx,x+w*.17,y+h*.27,w*.67,h*.47,h*.19,false,true,col,.04);

         roundRect(ctx,x+w*.21,y+h*.33,w*.57,h*.33,h*.13,false,true,col,.03);

         
         roundRect(ctx,x+w*.29,y+h*.41,w*.41,h*.19,h*.09,false,true,col,.025);

         
         roundRect(ctx,x+w*.33,y+h*.47,w*.31,h*.09,h*.06,false,true,col,.02);


         roundRect(ctx,x+w*.37,y+h*.51,w*.23,h*.03,h*.01,false,true,col,.012);

         
         
         

         roundRect(ctx,x+w*.47,y+h*.57,w*.09,h*.01,h*.004,false,true,col,.008);


         
         
         

         

        

        


         
         
         
         
         
         

         
         

         

         

         

         

         
         
         

         

         
         

         

         

         
         
         
         

         
         
         

         
         

         
         

         

         
         

         
         

          
         
          
          
          
          
          
          
          
          
          


         
         
         
         
         
         


     
     
     
     
     
     
     

     
     
     
     

     
     
     

     

     
     

     
     
     
     
     
     

     
     

     
     

     
     
     

     

     

     

     
     

     
     

     

     

     

     
     
     
     

     
     

     
     

     
     

     

     

     
     

     

     
     

     

     
     

     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
     

     
   

       


        

   
   
   
   
   
   
   
   

   
   
   
   
   
   
   

   
   
   
   
   
   
   

   
   
   
   
   
   
   

   
   
   
   
   
   
   

   
   
   
   
   
   
   

   
   
   
   
   
   
   

      
      
      
      
      
      
      
      
      
      
      
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

        
        

       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

       
        
        
        
        
        
        
       
        
        
        
        
                 
                

                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 
               
        
                 

                 





       


   

    


   

    


   

    


   

    




   

    




   

    


   

    




   

    




   

    




   

    


   

    




   

    




   

    




   

    




   

    


   

    




   

    


   

    


   

    


   

    


   

    


   

    


   

    


   

    


   

    


   

    


   

    


   

    


   

    


   

    




           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           


           





    
 }


function roundRect(ctx,x,y,w,h,rnd,f,gcol,lineW){
	ctx.save();if(lineW===undefined)lineW=1.5;if(gcol===undefined)gcol=null;if(f===undefined)f=true;if(rnd===undefined)rnd=h/3;
	ctx.beginPath();for(let i=0;i<4;i++){
		let dx=[x+w-rnd,x+w-rnd,x+rnd,x+rnd][i],dy=[y+rnd,y+h-rnd,y+h-rnd,y+rnd][i];
		ctx.arcTo([x+w,x+w,x,x][i],[y,y+h,y+h,y][i],dx,dy,rnd);}
	ctx.closePath();if(f){if(gcol) {if(typeof gcol==='string') {	ctx.globalAlpha*=typeof lineW==='number'?lineW:.6;}	ctx.fillStyle=gcol;}	ctx.fill();}
	if(gcol&&!f){	ctx.strokeStyle=gcol;} else{	ctx.strokeStyle='#fff';}
	ctx.lineWidth=lineW||1.5;if(!f||gcol){	ctx.stroke();}
	ctx.restore();
}

// =================== GAME OVER SCREEN ===================
function endGame(reason){
	state="gameover";
	gameOverReason = reason||"Defeat!";
	if(score>highScore){
		highScore = score;
		localStorage.setItem("forgeborn_highscore",score.toString());
	}
}
function drawGameOver(){
	ctx.save();
	ctx.globalAlpha=.92;
	ctx.fillStyle="#191723bb";
	ctx.fillRect(0,0,canvas.width,canvas.height);
	ctx.globalAlpha=1;

	ctx.font="bold italic 52px Segoe UI"; 
	ctx.textAlign="center"; 
	ctx.shadowColor="#bc3cff"; 
	ctx.shadowBlur=12;

	ctx.fillStyle="#bc3cff";
	ctx.fillText("GAME OVER",canvas.width/2 ,130 );
	ctx.shadowBlur=8;

	ctx.font="bold italic 34px Segoe UI"; 
	ctx.shadowColor="#fff"; 
	ctx.shadowBlur=8;

	ctx.globalAlpha=.98;

	ctx.fillText(gameOverReason||"Defeat!",canvas.width/2 ,190 );
	ctx.shadowBlur=6;

	// Stats summary 
	ctx.font="italic bold 22px Segoe UI"; 
	ctx.globalAlpha=.95;

	let yoff =230;

	let bestC = combo>1 ? combo : "-";

	let fields=[
		["Final Score:",score],
		["High Score:",highScore],
		["Best Combo:", bestC ],
		["Press [Enter] to Restart",""],
	];

	for(let i=0;i<fields.length;++i){
		let txtL = fields[i][0], txtR = fields[i][1] + "";
		ctx.textAlign="right"; 
		ctx.font=i<fields.length-1?"italic bold "+23+"px Segoe UI":"italic bold "+21+"px Segoe UI";

		ctx.fillStyle=i===fields.length-1?"#ffeaa7":"#ffb347";

		let xxL = canvas.width/2 -90 ,
		    xxR = canvas.width/2 +110 ;
		if(i===fields.length-1){xxL-=30;xxR+=30;}

		ctx.shadowBlur=i===fields.length-1?16:5;

		ctx.textAlign="right";

		ctx.fillText(txtL+" ",xxL,yoff+i*42 );
		ctx.textAlign="left";

		ctx.shadowColor=i===fields.length-1?"#ffeaa7":"#f7e17c";

		ctx.shadowBlur=i===fields.length-1?19:(i<fields.length?"5":8);


		ctx.font=i<fields.length-1?"italic bold "+24+"px Segoe UI":"italic bold "+22+"px Segoe UI";

		ctx.globalAlpha=i===fields.length-1?.97:.95;

		ctx.fillText(txtR+"",xxR,yoff+i*42 );
	} 

	if(keys["Enter"]||keys[" "]||keys["z"]||keys["Z"]) {
		state="charselect";
		keys={};
	}
	ctx.restore();
}


</script>
</body>
</html>